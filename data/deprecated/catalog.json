[
    {
        "Update_Date": "2019-03-19",
        "Description": "LAGER (Light-weight Accumulator Gathering Efficiently in Real-time) is a reliable software logging system designed to allow multiple logging sources to log to multiple end users.",
        "Public Code Repo": "https://github.com/nasa/lager",
        "License": [
            "NASA Open Source v1.3"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/lager",
        "Contributors": [
            "jsc-ttco-software-request@mail.nasa.gov"
        ],
        "Labor_Hours": 2880,
        "Categories": [
            "logging",
            "LTTng",
            "high performance"
        ],
        "Categories_NLP": [
            "information system",
            "software development tool",
            "user requirement",
            "time measurement",
            "time dependence",
            "systems analysi",
            "human-computer interface",
            "real time operation",
            "light source",
            "computer systems design"
        ],
        "Software": "THIS IS A TEST"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "CODE is a framework for the control and observation of resources, services, and applications. The technology supports the secure and scalable transmission of observed information to other programs, and it enables the secure execution of actions on remote computer systems. ",
        "Public Code Repo": "https://www.nas.nasa.gov/Resources/Software/Open-Source/code.html",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://www.nas.nasa.gov/Resources/Software/Open-Source/code.html",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "information system",
            "distributed processing",
            "technology utilization",
            "distributed parameter system",
            "program verification (computers)",
            "automatic control",
            "computer network",
            "control",
            "computer systems performance",
            "computer systems design"
        ],
        "Software": "CODE-A Software Framework For Control and Observation In Distributed Environments"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "MST offers a simulation framework to support research in autonomy for remote exploration. The system allows developers to test models in a high-fidelity simulation and then evaluate system performance against a set of integrated, standardized simulations.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mission-simulation-toolkit/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mission-simulation-toolkit/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "autonomy",
            "performance prediction",
            "systems engineering",
            "systems analysi",
            "mathematical model",
            "flight simulation",
            "simulation",
            "systems simulation",
            "model"
        ],
        "Software": "Mission Simulation Toolkit (MST)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Livingstone 2 is a reusable artificial intelligence (AI) software system designed to assist spacecraft, life support systems, chemical plants, or other complex systems in operating robustly with minimal human supervision, even in the face of hardware failures or unexpected events. The technology diagnoses the current state of a spacecraft or other system and recommends commands or repair actions that will allow the system to continue operations. A re-engineered version of the Livingstone diagnosis system that was flight-tested onboard the Deep Space One spacecraft in 1999, Livingstone 2 contains significant enhancements to robustness, performance, and usability. Skunkworks is a suite of software tools that support the rapid deployment of model-based representations of complex systems for Livingstone2 via a visual model builder/tester and two graphical user interface tools that provide status information during testing.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/livingstone2/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/livingstone2/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "control systems design",
            "software development tool",
            "complex system",
            "artificial intelligence",
            "life support system",
            "spacecraft control",
            "deployment",
            "automatic control",
            "human-computer interface"
        ],
        "Software": "Livingstone 2 (System for Automated Diagnosis and Discrete Control of Complex Systems) and Skunkworks (Suite of Supporting Development and Runtime Tools)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Java Pathfinder (JPF) is a model checker for Java. The technology takes a Java program and \"executes\" it in a way that explores all possible executions/interleavings of the threads in the program. This allows JPF to detect certain bugs (e.g., deadlocks and assertion violations) that may be missed during testing. ",
        "Public Code Repo": "https://babelfish.arc.nasa.gov/trac/jpf/wiki/install/repositories",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://babelfish.arc.nasa.gov/trac/jpf/wiki/install/repositories",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "mathematical model",
            "program verification (computers)"
        ],
        "Software": "Java Pathfinder (JPF), Version 2.0"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "CAPO analyzes a Fortran program and inserts OpenMP directives into the code to improve its performance on a parallel machine. The tool relies on accurate inter-procedural data-dependence information currently provided by CAPTools, which was developed at the University of Greenwich.",
        "Public Code Repo": "https://software.nasa.gov/software/ARC-14487-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://software.nasa.gov/software/ARC-14487-1",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "subroutine",
            "fortran",
            "machine tool",
            "information system",
            "performance prediction",
            "parallel programming",
            "parallel processing (computers)",
            "optimization"
        ],
        "Software": "CAPTools-based Automatic Parallelizer Using OpenMP (CAPO)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "SLAB is a software-based, real-time, virtual acoustic-environment rendering system designed to study spatial hearing in environments such as concert halls, listening rooms, virtual reality, aviation spatial information displays, and video game sound effects. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/slab-spatial-audio-renderer/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/slab-spatial-audio-renderer/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "System Testing",
            "NASA"
        ],
        "Categories_NLP": [
            "hearing",
            "information system",
            "slab",
            "display device",
            "virtual reality",
            "auditory perception",
            "computer graphic",
            "game theory",
            "real time operation",
            "hall effect"
        ],
        "Software": "Sound Lab (SLAB), Version 5"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Libibvpp is a C++ wrapper around libibverbs, which is part of the OpenFabrics software suite.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/libibvpp/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/libibvpp/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "ARC",
            "Data and Image Processing",
            "Open Source",
            "NASA"
        ],
        "Categories_NLP": [],
        "Software": "Libibvpp"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Mariana is an algorithm that efficiently optimizes the hyperparameters for support vector machines for regression and classification. It currently uses simulated annealing for optimization but can be extended to use a variety of stochastic optimization techniques, including Markov Chain Monte Carlo, Sequential Monte Carlo, and genetic algorithms. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mariana/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mariana/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "monte carlo method",
            "vectors (mathematics)",
            "markov chain",
            "classification",
            "genetic algorithm",
            "machine learning",
            "optimization",
            "regression analysi",
            "vector analysi"
        ],
        "Software": "Mariana: Text Classification System"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "GMP serializes datatypes between XML and ANSI C data structures to support CFD applications. The library currently provides a description of geometric configurations, general moving-body scenarios (prescribed and/or 6-DOF), and control surface settings. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/gmp/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/gmp/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "surface propertie",
            "library",
            "three dimensional bodie",
            "protocol (computers)",
            "rigid structure",
            "aerodynamic configuration",
            "computational fluid dynamic"
        ],
        "Software": "Geometry Manipulation Protocol (GMP) for ComputationalFluid Dynamics (CFD) Applications, Version 1.0"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Constellation PRACA I-1 system is a modified version of an open-source, Web-based defect tracking tool called Bugzilla. Bugzilla allows software developers to document and track outstanding bugs in their products; in the Constellation PRACA I-1 system, these core capabilities have been extended to provide the necessary functionality and usability defined in the PRACA processing requirements.",
        "Public Code Repo": "https://software.nasa.gov/software/ARC-16033-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://software.nasa.gov/software/ARC-16033-1",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "data processing equipment",
            "defect",
            "software development tool",
            "data processing",
            "systems engineering",
            "onboard data processing",
            "evaluation",
            "crystal defect",
            "program verification (computers)",
            "computer systems performance"
        ],
        "Software": "Constellation PRACA Extension of the Bugzilla Application"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "nu-Anomica is an anomaly detector that can run faster than traditional OC-SVMs. The technology can handle large training sets and works with a well-defined target function. The program utilizes the OSU SVMs code (which is a MATLAB version of Lib-SVMs) as the baseline.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/nu-anomica/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/nu-anomica/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "vectors (mathematics)",
            "detector",
            "target acquisition",
            "education",
            "target recognition",
            "target",
            "symbol",
            "anomaly",
            "vector analysi",
            "functions (mathematics)"
        ],
        "Software": "nu-Anomica (Previously Sparse One Class Support Vector Machines (SOC-SVMs))"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "VERVE is a 3D visualization system that provides situational awareness, science analysis tools, and data understanding capabilities for robotics researchers and exploration science operations. The technology is highly modular and extensible and includes a 3D scene-graph database, an interactive 3D viewer, and associated graphical user interfaces to OSGI plugin-based applications.",
        "Public Code Repo": "https://sourceforge.net/p/irg-verve/wiki/VERVE%20Wiki%20Home/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://sourceforge.net/p/irg-verve/wiki/VERVE%20Wiki%20Home/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "situational awarenes",
            "remote control",
            "robotic",
            "virtual reality",
            "computer graphic",
            "scientific visualization",
            "graphical user interface",
            "human-computer interface",
            "data base",
            "graphs (charts)"
        ],
        "Software": "Visual Environment for Remote Virtual Exploration (VERVE), Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "NGT is a collection of automated processing tools that can transform raw geospatial raster data from remote sensing instruments into useful cartographic products, including visible image base maps and topographic models. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/tech/asr/intelligent-robotics/ngt/stereo/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/tech/asr/intelligent-robotics/ngt/stereo/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "digital data",
            "data acquisition",
            "geography",
            "remote sensing",
            "computer aided mapping",
            "data processing",
            "mapping",
            "data base",
            "image processing",
            "map"
        ],
        "Software": "Neo-Geography Toolkit (NGT), Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "IKOS is a kernel for the construction of open-static analyzers based on Patrick Cousot and Radhia Cousot's theory of abstract interpretation, which states that computations can be abstracted and reduced to a generalized set of objects and still exhibit the same critical properties of the parent program. By reducing the set of objects through abstraction, IKOS is scalable to large complex computer programs and presents a sound approach to verification of such programs. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/ikos/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/ikos/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "fortran",
            "performance prediction",
            "software development tool",
            "set theory",
            "inference",
            "computation",
            "computer aided design",
            "program verification (computers)",
            "kernel function"
        ],
        "Software": "Inference Kernel for Open Static (IKOS) Analyzers: A High-Performance Static Analysis Engine to Build Automated Code Analysis Tools for the Formal Verification of Critical Software Properties"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "RAPID is a software reference implementation framework for remote operations. The technology promotes interoperability between robot software modules and includes a standard programming interface and data distribution middleware. RAPID facilitates integration of experimental robot software modules created by a distributed development team; improves the compatibility and reusability of robotic functions; and offers speed prototype robot development in a wide range of configurations and environments.",
        "Public Code Repo": "https://rapid.nasa.gov/index.html",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://rapid.nasa.gov/index.html",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "compatibility",
            "interface",
            "programming environment",
            "systems integration",
            "software development tool",
            "module",
            "robotic",
            "interoperability",
            "prototype",
            "robot"
        ],
        "Software": "Robot Application Programming Interface Delegate (RAPID), Version 2"
    },
    {
        "Update_Date": "2014-11-05",
        "Description": "PathDroid is an extension of the open sourced Java Pathfinder (JPF) verification framework that supports checking binary Android applications for absence of software defects such as unhandled exceptions and deadlocks.\r\nPathDroid let users run such applications on development platforms, without the need for hardware-in-the-loop or availability of sources.\r\n",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/pathdroid/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/pathdroid/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "System Testing",
            "NASA"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "programming environment",
            "defect",
            "computer systems performance",
            "software development tool",
            "user requirement",
            "crystal defect",
            "program verification (computers)",
            "hardware",
            "computer program integrity"
        ],
        "Software": "PathDroid"
    },
    {
        "Update_Date": "2014-12-11",
        "Description": "Block GP is a Gaussian Process regression framework for multimodal data, that can be an order of magnitude more scalable than existing state-of-the-art nonlinear regression algorithms. The framework builds local Gaussian Processes on semantically meaningful partitions of the data and provides higher prediction accuracy than a single global model with very high confidence. The method relies on approximating the covariance matrix of the entire input space by smaller covariance matrices that can be modeled independently, and\r\ncan therefore be parallelized for faster execution. \r\n",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/block-gp/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/block-gp/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "prediction",
            "statistical analysi",
            "matrices (mathematics)",
            "covariance",
            "stochastic processe",
            "mathematical model",
            "prediction analysis technique",
            "random processe",
            "regression analysi"
        ],
        "Software": "Scalable Gaussian Process Regression"
    },
    {
        "Update_Date": "2015-03-05",
        "Description": "Java Pathfinder core system (jpf-core), is a model checker for Java bytecode. The technology takes a binary Java program and executes it in a user configurable way to detect defects such as deadlocks and unhandled exceptions, providing significantly higher confidence in correct program behavior than conventional testing.",
        "Public Code Repo": "https://babelfish.arc.nasa.gov/hg/jpf/jpf-core",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://babelfish.arc.nasa.gov/hg/jpf/jpf-core",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "defect",
            "systems engineering",
            "bionic",
            "mathematical model",
            "crystal defect"
        ],
        "Software": "Java Pathfinder (JPF) core system"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Decision trees are commonly used in artificial intelligence and statistical pattern recognition. A tree is \"grown\" from data using a recursive-partitioning algorithm. IND re-implements parts of existing standard prediction algorithms, offers experimental control suites, and also introduces new, more sophisticated methods for growing decision trees.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/ind/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/ind/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "cybernetic",
            "pattern recognition",
            "prediction",
            "trees (mathematics)",
            "decision making",
            "artificial intelligence",
            "prediction analysis technique",
            "decision theory",
            "data structure"
        ],
        "Software": "IND 2.1-Creation and Manipulation of Decision Trees from Data"
    },
    {
        "Update_Date": "2015-03-05",
        "Description": "JPF-NAS is developed to provide support for model checking distributed applications.   It relies on the multiprocess support included in Java Pathfinder (JPF) which provides basic functionality to verify the bytecode of distributed applications. JPF-NAS is implemented as a JPF extension which models interprocess communication mechanisms. It uses a form of partial order reduction to explore all possible executions of a distributed Java application. Moreover, JPF-NAS provides a functionality to check the given distributed application under test against possible network failures which can occur at the operating system or the hardware layer.",
        "Public Code Repo": "https://babelfish.arc.nasa.gov/hg/jpf/jpf-nas",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://babelfish.arc.nasa.gov/hg/jpf/jpf-nas",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "System Testing",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "interprocessor communication",
            "java (programming language)",
            "failure analysi",
            "failure",
            "communication network",
            "system failure",
            "computer network",
            "operating systems (computers)",
            "computer systems performance"
        ],
        "Software": "JPF-NAS, an extension of Java Pathfinder that provides support for model checking distributed systems"
    },
    {
        "Update_Date": "2015-03-05",
        "Description": "MFS (Multi-Fidelity Simulator) is a pluggable framework for creating an air traffic flow simulator at multiple levels of fidelity. The framework is designed to allow low-fidelity simulations of the entire US Airspace to be completed very quickly (on the order of seconds). The framework allows higher-fidelity plugins to be added to allow higher-fidelity simulations to occur in certain regions of the airspace concurrently with the low-fidelity simulation of the full airspace.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mfsim/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mfsim/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "simulator",
            "air traffic control",
            "control simulation",
            "airspace",
            "air flow",
            "traffic",
            "flight simulation",
            "simulation",
            "systems simulation"
        ],
        "Software": "MFSim - Multi-fidelity Simulation"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Surfer examines the pool of potential grid resources and extracts the highest-ranking resources that meet user-specified constraints and preferences. The technology has been implemented as a grid service that is compliant with an Open Grid Services Infrastructure (OGSI), and it can also be embedded directly into Java applications through its application programming interface or into non-java applications through its XML-based command-line interface.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/surfer/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/surfer/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "interface",
            "programming environment",
            "command and control",
            "technology utilization",
            "document markup language",
            "computational grid",
            "human-computer interface",
            "interactive control",
            "on-line system"
        ],
        "Software": "Surfer: An Extensible Pull-Based Framework For Resource Selection and Ranking"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Pour is a general-purpose information service framework for periodic, on-demand, and user-specified information reconciliation. The technology is designed to accommodate a wide variety of information types with support for high-volume, low-frequency periodic updates, user-specified updates, and automatic updates collected on demand when needed. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/pour/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/pour/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "information theory",
            "information system",
            "information retrieval",
            "user requirement",
            "information flow",
            "support system",
            "information dissemination",
            "information management",
            "frequency"
        ],
        "Software": "Pour: A Framework for Periodic, On-Demand, and User-Specified Information Reconciliation"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Swim is a software information service for the grid built on top of the NASA-developed Pour framework. Software information is periodically gathered from native package managers on FreeBSD, Solaris, and IRIX as well as the RPM, Perl, and Python package managers on multiple platforms. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/swim/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/swim/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "management",
            "programming environment",
            "information system",
            "software development tool",
            "information flow",
            "nasa program",
            "computational grid",
            "information dissemination",
            "management information system",
            "information management"
        ],
        "Software": "Swim: A Software Information Metacatalog for the Grid"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Ballast is a tool for balancing user load across Secure Shell Handler (SSH) servers. The system includes a load-balancing client, a lightweight data server, scripts for collecting system load, and scripts for analyzing user behavior. Because Ballast is invoked as part of the SSH login process, it has access to user names. This capability, which is not available in traditional approaches, enables Ballast to perform user-specific load balancing. In addition, Ballast is easy to install, induces near-zero overhead, and has fault-tolerant features in its architectures that will eliminate single points of failure.",
        "Public Code Repo": "https://github.com/pkolano/ballast",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/pkolano/ballast",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "failure analysi",
            "failure",
            "distributed processing",
            "balancing",
            "systems engineering",
            "loads (forces)",
            "systems analysi",
            "fault tolerance",
            "architecture (computers)",
            "computer systems design"
        ],
        "Software": "Ballast: Balancing Load Across Systems"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Dyper protects a site from unauthorized network flows. The tool offers dynamic perimeter enforcement by providing a general-purpose mechanism for maintaining least-privilege network security policies while still supporting the full utilization of multiport protocols. Dyper requires no changes to software or practices outside of the perimeter and only minimal changes inside.",
        "Public Code Repo": "https://sourceforge.net/projects/dyper/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://sourceforge.net/projects/dyper/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "computer information security",
            "network analysi",
            "network",
            "software development tool",
            "access control",
            "protocol (computers)",
            "security",
            "fluid flow",
            "computer network",
            "policy"
        ],
        "Software": "Dyper: Dynamic Perimeter Enforcement"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "JavaGenes is a genetic algorithm code written in Java. It evolves graphs using genetic software techniques and has applications in designing drugs, circuits, or any other system that is easily represented by graphs. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "digital system",
            "software development tool",
            "systems analysi",
            "integrated circuit",
            "combinatorial analysi",
            "graph theory",
            "symbol",
            "graphs (charts)",
            "circuit"
        ],
        "Software": "JavaGenes Genetic Graphs"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "JavaGenes-Scheduler is a general purpose evolutionary system designed to compare techniques for scheduling observations. It was originally developed for scheduling observations made by Earth-observing satellites. JavaGenes-Scheduler uses a simple, earliest-first scheduler to insert observations into the timeline in permutation order.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "satellite instrument",
            "software development tool",
            "earth (planet)",
            "earth observing system (eos)",
            "satellite communication",
            "systems analysi",
            "satellite observation",
            "scheduling",
            "geodetic satellite",
            "earth observations (from space)"
        ],
        "Software": "JavaGenes-Scheduler: Evolutionary Software for Earth Observing Satellite Scheduling"
    },
    {
        "Update_Date": "2016-07-07",
        "Description": "Open MCT is an open source and web-based mission control framework for visualization of data on desktop and mobile devices. Open MCT is designed for analysis, visualization, operation, and support of spacecraft missions. Open MCT provides an extensible plugin system allowing it to be integrated with existing ground systems, and adapted to support multiple missions as well as non-space applications.",
        "Public Code Repo": "https://github.com/nasa/openmct/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/openmct/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "ARC",
            "NASA",
            "Operations"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "space mission",
            "ground support system",
            "ground based control",
            "spacecraft control",
            "data system",
            "scientific visualization",
            "mission planning",
            "optic",
            "ground operational support system"
        ],
        "Software": "Open Mission Control Technologies (Open MCT)"
    },
    {
        "Update_Date": "2014-11-12",
        "Description": "The X-Plane Connect Toolbox enables users to receive real-time information on one or more simulated vehicles state from the X-Plane flight simulator, and control vehicles running in the X-Plane simulation environment. The toolbox can be used to record simulated flight data, visualize flight profiles, create out-the-window visuals, test autopilots, and test control algorithms. Additionally, the toolbox enables the display of ghost traffic flying predefined flight paths in the simulated airspace, and the visualization of flight plans in the form of waypoints. The toolbox allows custom built or third party autopilot programs to interface with X-Plane through MATLAB, C, C++, Java, or Python . Code examples are included in the open source distribution. The toolbox uses a network communication protocol, allowing X-Plane and the client program to run on different computers.",
        "Public Code Repo": "https://github.com/nasa/XPlaneConnect/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/XPlaneConnect/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "computerized simulation",
            "control simulation",
            "simulator",
            "flight path",
            "flight control",
            "real time operation",
            "flight simulation",
            "simulation",
            "flight simulator"
        ],
        "Software": "X-Plane Communication Toolbox (XPC)"
    },
    {
        "Update_Date": "2016-03-14",
        "Description": "In the analysis of radiation, it is helpful to be able to predict the heat transfer rate and the spectral distribution of the emitted energy. Presented here is a set of routines written in Microsoft Visual Basic for Applications (VBA) and incorporating functions specific to Microsoft Excel that are useful for predicting the radiative behavior of heated surfaces. These routines include functions for calculating important engineering quantities of primary importance to engineers and scientists such as radiative flux and spectral distributions. In addition, the routines also provide the capability to use such information to determine surface temperatures from spectral intensities and for calculating the sensitivity of these temperature measurements to unknowns in the input parameters.",
        "Public Code Repo": "https://software.nasa.gov/software/DRC-015-017",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "DFRC",
        "External Link": "https://software.nasa.gov/software/DRC-015-017",
        "Contributors": [
            "afrc-ipo-softwarecatalogue@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Materials and Processes",
            "NASA",
            "DFRC"
        ],
        "Categories_NLP": [
            "temperature measurement",
            "thermal radiation",
            "radiative heat transfer",
            "black body radiation",
            "radiant flux density",
            "spectral energy distribution",
            "radiation measurement",
            "heat flux",
            "heat transfer",
            "surface temperature"
        ],
        "Software": "Blackbody VBA Excel Functions"
    },
    {
        "Update_Date": "2016-07-12",
        "Description": "This is an easy-to-use MATLAB based finite element modeling and simulation tool for aeroservoelastic analysis of rectangular wings with trailing-edge control surfaces. It includes a tutorial on structural finite element modeling (FEM_Tutorial.m) using elements such as 12 DOF plates and 6 DOF beams. The aero tutorial (DLM_VLM_Tutorial.m) shows how to code doublet lattice and vortex lattice, with symmetry capability. Together the finite element and aero tutorials can be used to compare to experimental studies such as ground vibration testing, cantilever beam analysis, as well as wind tunnel testing. The primary code, EZASE.m, links structures and aero together in a commented way to produce a wing in flutter which can be controlled. The wing may include control surfaces or they can be excluded. A state space model with control surface inputs and accelerometer outputs can be produced. This model is used to design a PID control system and is tested using margin studies and pole plots. Other visualization methods such as V-g plots determined using the K-method are also included. The code is commented for Graduate and Undergraduate students of aeroservoelasticity who want to know the basic concepts of medium fidelity aeroservoelastic modeling. Not all methods are coded to industry standards. But students of the field including practicing engineers may find it useful for basic understanding; theoretical manuals for industry level codes tend to leave out many of the coding details. All of the details of the code are open sourced here and most of it is referenced at the top of the file to its source paper or book section. Two AIAA publications with one focusing on V&V with experimental wind tunnel test and ground vibration test data are also included.",
        "Public Code Repo": "https://software.nasa.gov/software/DRC-014-036",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "DFRC",
        "External Link": "https://software.nasa.gov/software/DRC-014-036",
        "Contributors": [
            "afrc-ipo-softwarecatalogue@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "NASA",
            "DFRC"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "flutter",
            "unsteady aerodynamic",
            "wind tunnel test",
            "three dimensional model",
            "control surface",
            "aeroelasticity",
            "mathematical model",
            "vibration damping",
            "flutter analysi"
        ],
        "Software": "EZASE  Easy Aeroservoelasticity"
    },
    {
        "Update_Date": "2014-10-30",
        "Description": "Tool for Turbine Engine Closed-loop Transient Analysis (TTECTrA)\r\n\r\nThe Tool for Turbine Engine Closed-loop Transient Analysis (TTECTrA) is a tool, developed in the Mathworks(R) Matlab/Simulink enviornment, intended to extend systems analysis by providing an estimate of the transient performance/capability of a conceptual engine design.  The TTECTrA tool is capable of designing a basic turbofan engine controller, with transient protection, based on the user's engine model and constraints.  TTECTrA is built in the Mathworks Matlab/Simulink environment and relies on the Matlab Control Systems Toolbox to provide additional functionality and streamline the control design process.",
        "Public Code Repo": "https://github.com/nasa/TTECTrA",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/TTECTrA",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "NASA",
            "GRC"
        ],
        "Categories_NLP": [
            "feedback control",
            "control systems design",
            "control equipment",
            "performance prediction",
            "turbofan engine",
            "systems engineering",
            "systems analysi",
            "controller",
            "transient response",
            "turbine engine"
        ],
        "Software": "Tool for Turbine Engine Closed-loop Transient Analysis (TTECTrA)"
    },
    {
        "Update_Date": "2016-03-22",
        "Description": "Photographic gallery type application containing imagery and descriptions from the GRC image archive. Photos and data cover the period from 1941-1979.  The software has been compiled and bundled as an iOS app for the iPad and intended for release through the Apple App Store.",
        "Public Code Repo": "https://www.nasa.gov/centers/glenn/multimedia/grchistory.html",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://www.nasa.gov/centers/glenn/multimedia/grchistory.html",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "NASA",
            "GRC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "imagery",
            "imaging technique",
            "photointerpretation",
            "satellite imagery",
            "nasa program",
            "aerial photography",
            "image analysi",
            "image processing",
            "image"
        ],
        "Software": "NASA Glenn Research Center: The Early Years for iPad"
    },
    {
        "Update_Date": "2016-03-22",
        "Description": "Augmented reality application intended to highlight NASA Glenn's research efforts in the area of flywheel energy storage systems.  The app utilizes a printed optical target, available on the GRC Flywheel Program brochure and through the NASA Glenn web portal, to present users with 3D views of flywheel hardware and space applications.  Additional video and imagery are also inlcuded in the application package. The software has been compiled and bundled as an iOS app for the iPad and intended for release through the Apple App Store.",
        "Public Code Repo": "https://www.nasa.gov/centers/glenn/multimedia/applied_science/flywheel",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://www.nasa.gov/centers/glenn/multimedia/applied_science/flywheel",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "GRC",
            "NASA",
            "Propulsion"
        ],
        "Categories_NLP": [
            "energy storage",
            "nasa program",
            "file maintenance (computers)",
            "flywheel"
        ],
        "Software": "NASA Flywheel for iPad"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Hierarchical Data Format Earth Observing System (HDF-EOS) Data Extractor (HEEX) is a tool that enables users to extract HDF-EOS data to binary or ASCII data formats in HTML or XML index. The software can be used for both HDF-EOS2 and HDF-EOS5, and it automatically recognizes the two formats.",
        "Public Code Repo": "https://software.nasa.gov/software/GSC-15011-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://software.nasa.gov/software/GSC-15011-1",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "format",
            "software development tool",
            "data processing",
            "document markup language",
            "earth observing system (eos)",
            "data system",
            "binary data",
            "data reduction",
            "data base"
        ],
        "Software": "Hierarchical Data Format Earth Observing System (HDF-EOS)Data Extractor (HEEX)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "PARAMESH offers parallel support with adaptive mesh capability for a large class of models on distributed memory machines. This package of Fortran 90 subroutines provides an application developer with an easy route to extend an existing serial code using a logically Cartesian structured mesh into a parallel code with adaptive mesh refinement.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/paramesh/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/paramesh/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "library",
            "subroutine",
            "fortran",
            "memory (computers)",
            "computer storage device",
            "cartesian coordinate",
            "support system",
            "computational grid",
            "mathematical model",
            "grid generation (mathematics)"
        ],
        "Software": "Parallel Adaptive Mesh Refinement Library (PARAMESH)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "TIPSOD is a software application designed for interactive, animated, 4D (space and time) visualization of satellite orbits. The technology is implemented in Java 3D and is an extension to the existing Satellite Situation Center Web (SSCWeb) 2D static orbit graphics. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/tipsod/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/tipsod/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/tipsod/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "orbital mechanic",
            "display device",
            "software development tool",
            "technology utilization",
            "computer graphic",
            "scientific visualization",
            "graphical user interface",
            "real time operation",
            "satellite orbit"
        ],
        "Software": "Tool For Interactive Plotting, Sonification, and 3D Orbit Display (TIPSOD)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The MATLAB-Zemax toolkit is a set of MATLAB scripts and functions that enable rapid transfer of optical system and performance data from Zemax optical software into the MATLAB environment. Typical applications include: extracting prescription data into MATLAB to confirm consistency of various delivered models; perturbing the models and performing various analyses in support of integrated modeling activities; and enabling a MATLAB-driven optical model for integrated system-level modeling of wavefront sensing and control. The toolkit can be downloaded at: http://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "remote sensing",
            "software development tool",
            "performance prediction",
            "wave front",
            "systems analysi",
            "mathematical model",
            "model"
        ],
        "Software": "MATLAB-Zemax Toolkit"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "ALIAS supports radiometric and geometric multispectral image processing for the Advanced Land Imager (ALI) instrument onboard NASA's Earth Observing-1 (EO-1) satellite. The radiometric subsystem characterizes and (where possible) corrects: detector operability; gain; bias; coherent, impulse, and random noise; signal-to-noise ratios; saturation levels; striping and banding; and the stability of detector performance. Geometric processing functions support sensor alignment calibrations; sensor chip assembly alignments; modulation transfer function characterizations; image-to-image characterizations; and geodetic accuracy assessments. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/Alias/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Alias/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Alias/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "radiometric correction",
            "imagery",
            "calibrating",
            "measuring instrument",
            "landsat satellite",
            "satellite instrument",
            "satellite-borne instrument",
            "earth observing system (eos)",
            "modulation transfer function",
            "characterization"
        ],
        "Software": "Advanced Land Image Assessment System (ALIAS)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The CDAWeb software and the CDAWeb service built on this software have been developed and continue to be enhanced and maintained by the Space Physics Data Facility. The technology has supported NASA/Office of Space Science programs dealing with the connections between the Sun and the Earth. CDAWeb software is essentially a set of Interactive Data Language (IDL) scripts that act as the engine of the system. Please visit: http://cdaweb.gsfc.nasa.gov/cdaweb/istp_public/",
        "Public Code Repo": "https://cdaweb.gsfc.nasa.gov/about.html",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://cdaweb.gsfc.nasa.gov/about.html",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data system",
            "nasa program",
            "solar terrestrial interaction",
            "earth science",
            "aerospace science"
        ],
        "Software": "Coordinated Data Analysis Workshop Web (CDAWeb)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Earth Observing System Clearing House (ECHO) affords the earth science community more flexibility in accessing and sharing data and services. As a metadata clearinghouse, ECHO supports iterative query data access. As a service broker, ECHO decentralizes data-manipulation tools and supports the interoperability of distributed functions. For more information, please visit: http://ti.arc.nasa.gov/opensource/projects/echo/",
        "Public Code Repo": "https://api.echo.nasa.gov/legacy-services/apis.html",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://api.echo.nasa.gov/legacy-services/apis.html",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "information system",
            "data management",
            "data base management system",
            "data processing",
            "earth observing system (eos)",
            "data system",
            "data reduction",
            "information management",
            "query language",
            "data structure"
        ],
        "Software": "Earth Observing System (EOS) Clearing House (ECHO)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "These Web services provide a distributed programming interface to a portion of the Space Physics Data Facility (SPDF) software. The technology conforms to all applicable Web service specifications of the World Wide Web Consortium. Please visit the following URL for additional information: http://spdf.gsfc.nasa.gov/",
        "Public Code Repo": "ftp://spdf.gsfc.nasa.gov/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "ftp://spdf.gsfc.nasa.gov/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "interface",
            "specification",
            "information system",
            "data management",
            "data system",
            "data base",
            "world wide web"
        ],
        "Software": "Space Physics Data Facility (SPDF) Web Services"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The WindowsEQFlux computer program converts solar-cell damage resulting from hard-particle radiation into the equivalent fluence on MeV electrons. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/eqflux/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/eqflux/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/eqflux/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "radiation measurement",
            "radiation belt",
            "damage",
            "solar cell",
            "electron radiation",
            "electron",
            "radiation effect",
            "radiation damage"
        ],
        "Software": "General EQFlux"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Earth Observing System Data Gateway (EDG) provides the earth science community with a single interface that will search for data granules from distributed data archives. The innovation enables users to explore, discover, and order available data from geographically distributed providers. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/edg/index.php#software",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/edg/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/edg/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data transmission",
            "data acquisition",
            "information system",
            "data management",
            "user requirement",
            "data processing",
            "earth observing system (eos)",
            "data system",
            "data reduction",
            "data base"
        ],
        "Software": "Earth Observing System (EOS) Data Gateway (EDG)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "S4PM is a set of Perl scripts that implement a data-driven processing system that executes science algorithms automatically as new data arrive. S4PM includes a graphical user interface for monitoring algorithms and the overall system for failures. The Perl scripts can currently process data from the Moderate Resolution Imaging Spectroradiometer and the Atmospheric Infrared Sounder, but the technology can be extended to process data from other missions if desired. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/s4pm/",
        "Public Code Repo": "https://sourceforge.net/projects/s4pm",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/s4pm",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "algorithm",
            "data processing equipment",
            "information system",
            "distributed processing",
            "imaging technique",
            "data processing",
            "data management",
            "user requirement",
            "data system",
            "graphical user interface"
        ],
        "Software": "Simple, Scalable, Script-Based Science Processor for Missions (S4PM)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This software program takes an XML representation of the contents of a Hierarchical Data Format-Earth Observing System (HDF-EOS) file and recreates the file from that description. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data base",
            "information system",
            "format",
            "data management",
            "software development tool",
            "data processing",
            "earth observing system (eos)",
            "data system",
            "systems analysi",
            "information management"
        ],
        "Software": "XML to HDF-EOS Convertor"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This Java-language software plug-in to HDFView provides an interface for two versions of hierarchical data formats (HDF 4 and HDF 5). Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/HDF/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HDF/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/HDF/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "interface",
            "information system",
            "format",
            "language",
            "software development tool",
            "language programming",
            "programming language",
            "high level language",
            "machine oriented language"
        ],
        "Software": "HDFView Plugin"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "NASA.rb (formerly fUnit) is a collection of Fortran modules that provide a framework for automating the construction, execution, and reporting of unit tests for Fortran software applications. Support is provided for several aspects of unit testing that are peculiar to scientific technical computing including distributing jparallel applications and parameterized behavior.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/FUNIT/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/FUNIT/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "construction",
            "fortran",
            "electronic module",
            "software development tool",
            "module",
            "evaluation",
            "computation",
            "program verification (computers)",
            "computer systems performance",
            "computer program integrity"
        ],
        "Software": "NASA.rb (formerly fUnit)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "NFMW reads weather forecast models outputs; subsets the data to the region of interest; interpolates the data to the specified size; generates a visualization of the data using colors, contour lines, or arrows; and sends the visualization to the client. More information can be found at: http://opensource.gsfc.nasa.gov/projects/NFMW/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "meteorological service",
            "mapping",
            "weather forecasting",
            "relief map",
            "contour",
            "scientific visualization",
            "meteorological chart",
            "map",
            "on-line system"
        ],
        "Software": "NASA Forecast Model Web (NFMW) Map Service"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This toolkit is a set of MATLAB scripts and functions that enable rapid transfer of optical system and performance data from Oslo optical software into the MATLAB environment. Typical applications include: extracting prescription data into MATLAB to confirm consistency of various delivered models; perturbing the models and performing various analyses in support of integrated modeling activities; and enabling a MATLAB-driven optical model for integrated system-level modeling of wavefront sensing and control. The toolkit can be downloaded at http://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "remote sensing",
            "software development tool",
            "performance prediction",
            "wave front",
            "systems analysi",
            "mathematical model",
            "model"
        ],
        "Software": "MATLAB-Oslo Toolkit"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The User-friendly Metadata (UFM) tool functions as a filter. The tool accepts an ODL file as input and generates a simple HTML representation of the ODL as output. Command-line options provide a user with the ability to modify the program's functionality. Please visit: http://opensource.gsfc.nasa.gov/projects/UFM/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/UFM/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/UFM/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "on-line programming",
            "input/output routine",
            "software development tool",
            "document markup language",
            "file maintenance (computers)",
            "filter",
            "electronic filter",
            "on-line system",
            "user manuals (computer programs)",
            "functions (mathematics)"
        ],
        "Software": "User-Friendly Metadata"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This software allows generators of HDF-EOS data products to encode product requirement specifications in XML. The tool will then mechanically check product files against those requirements. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/Validator/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Validator/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Validator/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "GSFC",
            "NASA"
        ],
        "Categories_NLP": [
            "information system",
            "data management",
            "software development tool",
            "document markup language",
            "earth observing system (eos)",
            "data system",
            "requirement",
            "management information system",
            "specification",
            "data base"
        ],
        "Software": "HDF-EOS5 Validator"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "HDF-EOS Metadata Updater (HEMU) enables users to modify metadata inside an HDF-EOS file (either HDF-EOS2 and HDF-EOS5). The tool can be used to extract metadata from a dataset to a text file that can then be modified with any text editor; replace metadata with text from an external file; or update metadata with text from an external file. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/hemu/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hemu/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/hemu/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data management",
            "format",
            "text",
            "information system",
            "user requirement",
            "data processing",
            "information retrieval",
            "earth observing system (eos)",
            "data base",
            "file maintenance (computers)"
        ],
        "Software": "Hierarchical Data Format Earth Observing System (HDF-EOS) Metadata Updater (HEMU)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "An XML standard has been developed for the HDF-EOS5 file format using document-type definitions and schemas. Users can transform HDF5 files into XML format and vice versa. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data base",
            "information system",
            "format",
            "data management",
            "information retrieval",
            "user requirement",
            "standard",
            "data system",
            "systems analysi",
            "information management"
        ],
        "Software": "Hierarchical Data Format Earth Observing System (HDF-EOS) XML Document-Type Definitions and Schemas"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This shell script chains together existing data usability group tools to: extract ODL metadata from an HDF-EOS file; convert the metadata to XML; reformat the XML into HTML; publish the HTML and the original HDF-EOS file to a Web server and an OPeNDAP server; and reformat the XML and submit it to the Earth Observing System Clearing House (ECHO). For more information, please visit: http://opensource.gsfc.nasa.gov/projects/heserve/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/heserve/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/heserve/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data management",
            "format",
            "information system",
            "data processing",
            "document markup language",
            "earth observing system (eos)",
            "data system",
            "data base",
            "file maintenance (computers)"
        ],
        "Software": "Hierarchical Data Format Earth Observing System (HDF-EOS) Web Server"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This command-line Java-based utility converts ODL Hierarchical Data Format-Earth Observing Satellite (HDFEOS) metadata file to an HDFEOS XML file. The tool utilizes an all-Java ODL library that includes a syntax and grammar parser. The software can be downloaded at: http://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "library",
            "data management",
            "format",
            "software development tool",
            "syntax",
            "earth observing system (eos)",
            "document markup language",
            "data system",
            "grammar"
        ],
        "Software": "ODL-to-XML Converter"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This C-language computer program accepts a set of scientific data/metadata from an Earth Observing System (EOS) satellite and converts it from the format in which it was created and delivered into another format for data processing and exchange on Earth. The converter can be downloaded at: http://www.hdfeos.org/software/convert_hdfeos5.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data management",
            "format",
            "data processing equipment",
            "data processing",
            "earth observing system (eos)",
            "data system",
            "airborne/spaceborne computer",
            "data transfer (computers)",
            "geodetic satellite",
            "computer systems design"
        ],
        "Software": "Hierarchical Data Format-Earth Observing System (HDF-EOS) to NetCDF Converter"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Designed to support a prototype validation network for the Global Precipitation Measurement (GPM) spaceflight mission, this space and ground radar comparison software collects data from the Precipitation Radar instrument flying on the Tropical Rainfall Measuring Mission (TRMM) spacecraft. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/GPM/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GPM/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GPM/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "proving",
            "meteorological radar",
            "measuring instrument",
            "ground truth",
            "ground based control",
            "spacecraft instrument",
            "trmm satellite",
            "radar data",
            "precipitation (meteorology)",
            "rain"
        ],
        "Software": "Global Precipitation Space and Ground Radar Comparison Software"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "GEOS-5 is a next-generation circulation model. Developed using the Earth System Modeling Framework (ESMF) for its internal architecture, the technology represents a new paradigm for systems development. Please visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/GEOS-5/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "information system",
            "dynamic model",
            "software development tool",
            "earth (planet)",
            "systems engineering",
            "systems analysi",
            "mathematical model",
            "architecture (computers)",
            "model"
        ],
        "Software": "GEOS-5 Global Change Master Modeling Software"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This toolkit is a set of MATLAB scripts and functions that enable rapid transfer of optical system and performance data from Code V optical software into the MATLAB environment. Typical applications include: extracting prescription data into MATLAB to confirm consistency of various delivered models; perturbing the models and performing various analyses such as ray tracing or generation of point-spread functions in support of integrated modeling activities; and enabling a MATLAB-driven optical model for integrated system-level modeling of wavefront sensing and control. The toolkit can be downloaded at: http://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "software development tool",
            "ray tracing",
            "systems analysi",
            "mathematical model",
            "model"
        ],
        "Software": "MATLAB-Code V Toolkit"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This program translates an XML representation of Hierarchical Data Format-Earth Observing System (HDF-EOS) ODL metadata back to the ODL format. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "information system",
            "format",
            "data management",
            "data processing",
            "earth (planet)",
            "earth observing system (eos)",
            "data system",
            "systems analysi",
            "information management",
            "information theory"
        ],
        "Software": "XML to ODL Convertor"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "GMAT is a software system for trajectory optimization, mission analysis, trajectory estimation, and prediction. Analysts use GMAT to design spacecraft trajectories, optimize maneuvers, perform orbit determination, visualize and communicate mission parameters, and understand a mission&apos;s trade space. GMAT contains models of real-world objects such as spacecraft and thrusters, as well as analysis \"objects\" such as plots and reports. These objects are used in the mission sequence wherein the user employs commands supported by the system to model missions and perform estimation. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/GMAT/index.php",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2011a",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2011a",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "trajectory analysi",
            "trajectory optimization",
            "spacecraft orbit",
            "software development tool",
            "spacecraft maneuver",
            "orbit calculation",
            "spacecraft trajectory",
            "mission planning",
            "space flight",
            "prediction analysis technique"
        ],
        "Software": "General Mission Analysis Tool (GMAT), Version 2011A"
    },
    {
        "Update_Date": "2015-02-05",
        "Description": "The ut-assert unit test tools provide a unit test framework and a collection of utilities that are designed to facilitate unit testing. These tools implement an assertion-based testing philosophy that requires the developer to explicitly write verification statements that assert whether a condition is true or false.  This approach is much different than the Flight Software Branch's historical approach to unit testing that creates a log file that requires developer analysis in order to determine whether a test passed or failed. In order to use the tools a developer populates the framework with their unit tests and links with the ut-asssert library to create an executable. ",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ut-assert/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ut-assert/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "library",
            "performance test",
            "software development tool",
            "software reliability",
            "systems analysi",
            "flight test",
            "evaluation",
            "program verification (computers)",
            "file maintenance (computers)",
            "electronic equipment test"
        ],
        "Software": "Assert-Based Unit Test Tools"
    },
    {
        "Update_Date": "2015-02-05",
        "Description": "This software interface provides a social and collaborative environment to allow end-users such as GEOSS users to discover, visualize, and access Earth Science information on demand from simple browsers and allow them to share the resulting products with their friends and/or Community of Interest through social networks.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/gsca/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/gsca/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "interface",
            "information system",
            "information retrieval",
            "user requirement",
            "communication network",
            "virtual reality",
            "information dissemination",
            "earth science",
            "computer network"
        ],
        "Software": "Open GeoSocial Consumer Application"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The SBN serves as a plug-in to the cFE framework to transfer messages across process/processor interfaces. The technology has three primary functions: to establish and maintain a connection to each peer over available process/processor interfaces; to distribute and maintain a subscription message database for each peer; and to distribute messages to peers that have subscribed to message identifiers.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-sbn",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-sbn",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "interface",
            "data processing equipment",
            "network",
            "distributed processing",
            "software development tool",
            "avionic",
            "network synthesi",
            "computer network",
            "data base",
            "channels (data transmission)"
        ],
        "Software": "Core Flight System (CFS) Software Bus Network (SBN) Application, Version 1.0"
    },
    {
        "Update_Date": "2015-02-05",
        "Description": "This capability allows for the generation of vectors by reading the Global Flood Monitoring data, processing the data and generating aTopoJSON encoded file for visualization on the web.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/vgfms/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/vgfms/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "world wide web",
            "vectors (mathematics)",
            "data management",
            "data processing",
            "data system",
            "scientific visualization",
            "flood",
            "vector analysi",
            "monitor"
        ],
        "Software": "Vectorization of Global Flood Monitoring System using Topojson"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The CFDP application provides the capability to transmit and receive files to/from the ground. Tables are used to allow flexibility in specifying directory priorities and configurations.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-cfdp",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-cfdp",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "flexibility",
            "automatic flight control",
            "spacecraft configuration",
            "flight control",
            "systems engineering",
            "aircraft configuration",
            "ground test",
            "flight test",
            "ground based control",
            "file maintenance (computers)"
        ],
        "Software": "Core Flight System (CFS) CFDP Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Checksum (CS) is one of the reusable applications that make up the Core Flight System (CFS). The technology performs memory integrity management by verifying the contents of critical flight memory regions. Unexpected changes in memory (i.e., due to an SEU) are reported to ground operators.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-cs",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-cs",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "magnetic core",
            "memory (computers)",
            "computer storage device",
            "technology utilization"
        ],
        "Software": "Core Flight System (CFS) Checksum Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The DS application provides the ability to store data (i.e., messages) into files. Tables are used to provide the flexibility for specifying messages.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-ds",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-ds",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "tables (data)",
            "data storage",
            "data processing equipment",
            "data management",
            "data processing",
            "computer storage device",
            "data system",
            "digital data",
            "message processing",
            "message"
        ],
        "Software": "Core Flight System (CFS) Data Storage (DS) Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The CFS Housekeeping application provides the ability to organize data from various packets into new packets in order to best utilize the telemetry bandwidth available for a mission.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-hk",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-hk",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "radio telemetry",
            "biotelemetry",
            "packets (communication)",
            "telemetry",
            "bandwidth",
            "space mission"
        ],
        "Software": "Core Flight System (CFS) Housekeeping (HK) Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "FM provides the user commands to perform the following operations: copy file, move file, rename file, delete file(s), close file, concatenate file, decompress file, delete directory contents, create directory, remove directory, obtain file information, obtain open file listing, and obtain directory listings.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-fm",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-fm",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "information system",
            "information retrieval",
            "command and control",
            "user requirement",
            "systems engineering",
            "information",
            "information management",
            "systems management",
            "user manuals (computer programs)"
        ],
        "Software": "Core Flight System (CFS) File Manager (FM) Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Memory Dwell application telemeters the contents of table-defined addresses at a table-defined dwell rate. Addresses can be processed using symbols if the target processor/operating system includes symbols.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-md",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-md",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "magnetic storage",
            "data storage",
            "data processing equipment",
            "memory (computers)",
            "computer storage device",
            "target acquisition",
            "central processing unit",
            "computer component",
            "symbol",
            "operating systems (computers)"
        ],
        "Software": "Core Flight System (CFS) Memory Dwell Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Limit Checker (LC) application is responsible for monitoring telemetry values.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-lc",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-lc",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "biotelemetry",
            "telemetry",
            "systems engineering",
            "systems analysi"
        ],
        "Software": "Core Flight System (CFS) Limit Checker (LC) Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The plug-and-play CFS Health and Safety application is compatible with the Core Flight Executive (cFE) and uses the Operating System Abstraction Layer (OSAL), both of which were developed by Goddard Space Flight Center in order to provide a reusable, platform-independent, mission-independent, layered architecture for hosting applications. The technology can be used for any government or commercial spacecraft. Please visit the following URL for additional information: http://sourceforge.net/projects/coreflightexec/files/cFE-6.1.1/",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-hs",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-hs",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "information system",
            "space mission",
            "manned space flight",
            "aerospace engineering",
            "technology utilization",
            "systems engineering",
            "space flight",
            "architecture (computers)"
        ],
        "Software": "Core Flight System (CFS) Health and Safety Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The CFS SC application provides the ability to execute onboard absolute-time and relative-time command sequences. The technology offers a generic implementation that can be configured by a user to fit the needs of a specific mission.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-sc",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-sc",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "sequencing",
            "space mission",
            "command and control",
            "user requirement",
            "technology utilization",
            "systems engineering",
            "mission planning",
            "real time operation"
        ],
        "Software": "Core Flight System (CFS) Stored Command (SC) Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Scheduler application uses a one-second major timeframe, which is divided into a designer-determined collection of equally divided minor timeframes. The technology is configurable and table-driven to provide greater flexibility.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-sch",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-sch",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "flexibility",
            "automatic flight control",
            "flight control",
            "technology utilization",
            "systems engineering"
        ],
        "Software": "Core Flight System (CFS) Scheduler Application Version 2"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "ILIADS 3.0 provides the data management capabilities to access CxP-vetted lunar data sets from the LMMP-provided Data Portal and the LMMP-provided OnMoon lunar data product server. (LMMP stands for Lunar Mapping and Modeling Project.) It also provides specific quantitative analysis functions to meet the stated LMMP Level 3 functional and performance requirements specifications that were approved by the CxP.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ILIADS/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ILIADS/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data base",
            "specification",
            "data management",
            "data base management system",
            "decision making",
            "support system",
            "data system",
            "architecture (computers)",
            "management information system",
            "information management"
        ],
        "Software": "Integrated Lunar Information Architecture for Decision Support (ILIADS), Version 3.0"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The Goddard Satellite Data Simulation Unit (SDSU) is a comprehensive unified system of multi-sensor satellite instrumental simulators. Skill of weather forecasting models can be evaluated in terms of satellite-observed multi-sensor radiance levels. Alternatively, the remote sensing community can more readily utilize atmospheric model simulations to develop and test their retrieval algorithms for application of Earth science.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "algorithm",
            "remote sensing",
            "atmospheric model",
            "satellite instrument",
            "weather forecasting",
            "remote sensor",
            "forecasting",
            "earth science",
            "simulation"
        ],
        "Software": "Goddard Satellite Data Simulation Unit"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This technology is a front end to the Climate Model Output Rewriter (CMOR2) software package. The technology converts a variety of standard data formats (e.g., netcdf3, netcdf4, Grads control files, and MATLAB data files) to allow publication on the Earth System Grid Federation (ESGF) data node.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/obs4mips/index.php",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/obs4mips/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data management",
            "format",
            "software development tool",
            "data processing",
            "data system",
            "climate",
            "data reduction",
            "data base",
            "file maintenance (computers)"
        ],
        "Software": "Obs4MIPS"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This software enables easy comparison of ground- and space-based radar observations for validation purposes. It can be accessed at: http://opensource.gsfc.nasa.gov/projects/GSRadar/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GSRadar/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GSRadar/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "proving",
            "software development tool",
            "radar tracking",
            "radar",
            "optical radar",
            "ground support equipment",
            "radar transmission",
            "ground based control",
            "radar data",
            "comparison"
        ],
        "Software": "Ground and Space Radar Volume Matching and Comparison Software"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Based on MATLAB and Java, the flexible Orbit-Determination Toolbox is intended primarily for the advanced mission analysis that might be performed in the concept exploration, proposal, and early design phases. Visit the following URL for more information: http://opensource.gsfc.nasa.gov/projects/ODTBX/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ODTBX",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ODTBX",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "orbital mechanic",
            "spacecraft orbit",
            "space mission",
            "space exploration",
            "systems engineering",
            "design analysi",
            "orbit calculation",
            "mission planning",
            "satellite orbit"
        ],
        "Software": "Orbit-Determination Toolbox"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This version of HSEG is not subject to patent restrictions. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/HSEG/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HSEG/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/HSEG/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "core",
            "software development tool",
            "segment",
            "electronic packaging",
            "reliability",
            "information theory",
            "circuit"
        ],
        "Software": "Core Hierarchical Segmentation (HSEG) Software Package"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "ViSBARD provides a way of visualizing multiple vector and scalar quantities as measured by many spacecraft at once. The data are displayed three-dimensionally; may be displayed either as connected lines or as points; and allow the rapid determination of vector configurations, correlations between many measurements at multiple points, and global relationships. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/visbard/index.php",
        "Public Code Repo": "https://sourceforge.net/projects/visbard/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/visbard/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data retrieval",
            "information system",
            "data processing",
            "data system",
            "correlation",
            "data reduction",
            "on-line system"
        ],
        "Software": "Visual System for Browsing, Analysis, and Retrieval of Data (ViSBARD)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This software performs lossless hyper-spectral and multi-spectral data compression. It can be downloaded at: http://opensource.gsfc.nasa.gov/projects/LHD/",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/LHD/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/LHD/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data and Image Processing",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data sampling",
            "digital data",
            "data management",
            "software development tool",
            "data processing",
            "data system",
            "data flow analysi",
            "data reduction",
            "data compression",
            "data structure"
        ],
        "Software": "Lossless Hyper-/Multi-Spectral Data Compression Software"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Simple, Scalable, Script-based, Science Processing (S4P) Archive (S4PA) is a disk-based archiving system for remote sensing data. The tool can be used for new data transfer, data preprocessing, metadata generation, and data archival. Services provided include data access control, data subscription, metadata publication, and data recovery. All data are archived on readily available disk drives, with FTP and HTTP being the primary modes of data access. S4PA includes a graphical user interface for monitoring and re-configuring system operation. Please visit: http://disc.sci.gsfc.nasa.gov/additional/techlab/s4pa",
        "Public Code Repo": "https://disc.sci.gsfc.nasa.gov/additional/techlab/s4pa",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://disc.sci.gsfc.nasa.gov/additional/techlab/s4pa",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "data acquisition",
            "remote sensing",
            "data management",
            "data processing equipment",
            "remote control",
            "data processing",
            "access control",
            "data system",
            "automatic control"
        ],
        "Software": "Simple, Scalable, Script-based Science Processing Archive (S4PA)"
    },
    {
        "Update_Date": "2015-02-05",
        "Description": "The General Mission Analysis Tool (GMAT) is the worlds only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.\r\n\r\nGMAT contains models of real world objects such as spacecraft and thrusters, and analysis \"objects\" such as propagators, plots, and reports. These objects are used in a mission sequence in which the user employs commands supported by the system to model mission events and perform estimation.\r\n\r\nFor a complete list of new features, compatibility changes, and bug fixes, see the Release Notes.  Below are just some of the new capabilities contained in this release. \r\nProduction quality orbit determination (Operational Certification expected in November, 2016)\r\nCode 500 ephemeris propagator\r\nSTK ephemeris file output\r\nWrite command to save GMAT configurations during execution\r\nInclude macro to load GMAT configurations from external sources during execution\r\nMany new built in math functions and parameters\r\n130 pages of new user documentation\r\n",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2012a",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2012a",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "space navigation",
            "parameter identification",
            "software development tool",
            "space mission",
            "systems engineering",
            "spacecraft design",
            "design analysi",
            "systems analysi",
            "parameterization"
        ],
        "Software": "General Mission Analysis Tool (GMAT) v.R2016a"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "HORIZON 5 is an extensible framework for data management systems. It is packaged with the following components SIP/AIP: The Open Archival Information System (OAIS) specification defines the framework for information capturing to information distribution. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-49540-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-49540-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Business Systems and Project Management",
            "NASA"
        ],
        "Categories_NLP": [
            "specification",
            "information system",
            "data management",
            "data base management system",
            "information retrieval",
            "systems engineering",
            "data system",
            "management information system",
            "information management",
            "management system"
        ],
        "Software": "HORIZON 5 - Framework for distributed data management and product generation workflow"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The RedShift mobile app lets operations staff on the MSL project follow the operations schedule of tactical and strategic meetings. RedShift is an application for iOS and Android that presents the meeting agenda for MSL strategic and tactical meeting events that are a part of the operations workflow.",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-50256-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-50256-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "NASA",
            "Business Systems and Project Management"
        ],
        "Categories_NLP": [
            "project management",
            "project planning",
            "systems engineering",
            "operations research",
            "schedule",
            "flight operation",
            "scheduling",
            "red shift",
            "conference"
        ],
        "Software": "RedShift: mobile app for following the tactical and strategic operations meeting schedule"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Implements the open webification API and provides ReSTful web services for planetary image data in commonly-used formats.  Exposes content of planetary image data through meaningful URLs and enables creation of applications on diverse platforms.",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-48378-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-48378-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "data acquisition",
            "java (programming language)",
            "image resolution",
            "software development tool",
            "data system",
            "image analysi",
            "imagery",
            "data reduction",
            "image processing"
        ],
        "Software": "Juneberry Web Service Software"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "JPL has provided the underlying infrastructure to share data increasing the study power associated with capturing and comparing information. The infrastructure provides software services including data processing and management (eCAS), biomarker data management (BMDB), specimen data management (ERNE), and a portal to link the system together and provide access. These are software built on top of the Apache OODT software services.",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-48644-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-48644-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data acquisition",
            "information system",
            "data management",
            "data processing equipment",
            "data base management system",
            "information retrieval",
            "data processing",
            "data system",
            "management information system",
            "information management"
        ],
        "Software": "The EDRN Knowledge Environment"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "We have developed a machine learning solution called DEMUD (Discovery through Eigenbasis Modeling of Uninteresting Data). DEMUD works by building a model U of the uninteresting class and then identifying items that are maximally anomalous (and therefore likely to be interesting) with respect to that model.\r\n",
        "Public Code Repo": "https://github.com/wkiri/DEMUD",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/wkiri/DEMUD",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "dynamic model",
            "mathematical model"
        ],
        "Software": "DEMUD: Discovery through Eigenbasis Modeling of Uninteresting Data"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "DTNTAP is a userspace Ethernet driver with the potential to expedite DTN deployment by providing a transition mechanism for legacy IP (Internet Protocol) applications to run alongside delay and disruption tolerant applications in large scale communication networks. By presenting an Ethernet-like interface, DTNTAP gives application developers access to many of the benefits of DTN without having to become immediately proficient at a new programming API.",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-48906-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-48906-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "interprocessor communication",
            "telecommunication",
            "internet",
            "communication network",
            "access control",
            "protocol (computers)",
            "deployment",
            "local area network",
            "computer network"
        ],
        "Software": "DTNTAP"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Unlike all Internet mechanisms for security distribution (e.g., certificate authorities), DTKA operates over the extremely long signal propagation times and interrupted links that characterize communication with interplanetary spacecraft. It has no single point of failure and cannot be \"spoofed\" by an attacker's subversion of any single key authority machine (or even two key authority machines, in most configurations.  ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-49413-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-49413-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "delay",
            "failure analysi",
            "failure",
            "data link",
            "telecommunication",
            "prototype",
            "spacecraft communication",
            "time lag",
            "time signal"
        ],
        "Software": "DTKA, a Prototype Implementation of Delay-Tolerant Security Key Distribution"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Juneplum is implemented as a Java servlet webapp and can be directly deployed into the same servlet engine that Hyrax frontend lives in. With Juneplum, any data product served by OPeNDAP is made simultaneously accessible in a fully ReSTful way.",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-49868-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-49868-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "data acquisition",
            "java (programming language)",
            "engine design",
            "tables (data)",
            "engine test",
            "access control",
            "product development",
            "aircraft engine",
            "data reduction"
        ],
        "Software": "Juneplum - ReSTful Web Access of OPeNDAP Hyrax Back End Server"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "EDGE uses Apache Solr for fast indexed search backend.  Inventory data stored in PO.DAAC's Oracle server is being incrementally indexed avery 15 minutes.  Apache Solr provides optimal search solution to all data it managements.  By offloading data from Oracle, this eliminates Denial of Service (DoS) attacks against the core data management backend.  To further ensure reliable serving of data, EDGE's Apache Solr uses Master and Slave model.  The Master instance is for data indexing.  ",
        "Public Code Repo": "https://github.com/dataplumber/edge",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/dataplumber/edge",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "gates (circuits)",
            "data management",
            "data base management system",
            "information retrieval",
            "inventory",
            "information management",
            "data system",
            "mathematical model",
            "inventory control",
            "data base"
        ],
        "Software": "EDGE - The Extensible Data Gateway Environment"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "NEXUS provides a bridge between science data and horizontal-scaling data analysis. It provides a workflow to divide science artifacts into small data tiles to store in a cloud-scaled database where they can be quickly retrieved through a high performance spatial search registry. Through spatial index, NEXUS provides fast access to all relevant data tiles where each tile fits into RAM for fast in-memory computation. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-50157-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-50157-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data storage",
            "random access memory",
            "searching",
            "memory (computers)",
            "data processing",
            "computer storage device",
            "random acces",
            "computation",
            "data reduction",
            "data base"
        ],
        "Software": "NEXUS: Deep Data Platform"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "UAVSAR backscatter data contain both geometric and radiometric distortions due to underlying topography and the radar viewing geometry. Currently, backscatter variation due to topography is the single largest error source when estimating biomass over steep or hilly terrain. Thus, proper calibration normalizes the backscatter images so that only contributions from the parameters of interest remain. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-47969-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-47969-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "radiometric correction",
            "calibrating",
            "radar imagery",
            "terrain analysi",
            "topography",
            "terrain",
            "synthetic aperture radar",
            "radar data",
            "geometric rectification (imagery)",
            "backscattering"
        ],
        "Software": "Radiometric Calibration of UAVSAR Images"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Just as web search involves more than matching phrases, spectral search is more challenging than simply matching the shape of the spectrum.  The background substrate and illumination changes can cause the same signature to appear very different across scenes.  Here, the search service uses an adaptive matched-filter approach that compensates for the context and background characteristics of each scene.  ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-49004-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-49004-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "signature",
            "spectrum analysi",
            "infrared spectrometer",
            "spectrometer",
            "shape",
            "imaging spectrometer",
            "spectrum",
            "imaging technique",
            "optical filter",
            "spectral signature"
        ],
        "Software": "A Web-based Search Service to Support Imaging Spectrometer Instrument Operations."
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The GNEIMO methods and algorithms build up on the Spatial Operator Algebra (SOA) multibody dynamics framework. The specific problems addressed in this work are velocity intialization techniques that are consistent with the CICMD equipartition priniciple, techniques for nulling momentum drift, analysis and solutions for the flying ice-cube effect, and performance of integration schemes. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-48712-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-48712-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "measure and integration",
            "algebra",
            "dynamic structural analysi",
            "drift rate",
            "numerical analysi",
            "problem solving",
            "numerical integration",
            "operators (mathematics)",
            "computational fluid dynamic"
        ],
        "Software": "GNEIMO Advanced Techniques for Constrained Internal Coordinate Molecular Dynamics"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The primary purpose of the Level 2 retrieval software is to derive estimates of the column averaged atmospheric CO2 dry air mole fraction, XCO2, and other Level 2 data products from the spectra returned by the OCO-2 mission. Where XCO2 is defined as the ratio of the column abundances of CO2 and the column abundance of dry air.",
        "Public Code Repo": "https://disc.gsfc.nasa.gov/OCO-2",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://disc.gsfc.nasa.gov/OCO-2",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "estimate",
            "carbon dioxide concentration",
            "spectrum analysi",
            "carbon dioxide",
            "data processing",
            "abundance",
            "air",
            "atmospheric composition"
        ],
        "Software": "The OCO-2 Level 2 Retrieval Algorithm"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The software known as the The Imagery Exchange (TIE) 0.4 is an extension of the HORIZON 5 framework. It delivers horizontal scaling solutions for image capturing to automate the generation of the Meta Raster Format (MRF) imagery products. ",
        "Public Code Repo": "https://github.com/nasa-gibs/tie",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-gibs/tie",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "format",
            "imaging technique",
            "software development tool",
            "satellite imagery",
            "nasa program",
            "image analysi",
            "imagery",
            "image enhancement",
            "image processing",
            "image"
        ],
        "Software": "TIE 0.4 - The Imagery Exchange for the NASA Global Imagery Browse Services (GIBS) Project"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "SMART supports a high-level system trade study on a complex mission, such as a potential Mars Sample Return (MSR) mission, in an intuitive and quantitative manner. SMART offers a unique capability of handling correlated redundancies and accurately evaluate the probability of mission success as well as its sensitivity to the reliability of mission components. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-49732-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-49732-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "risk",
            "space mission",
            "redundancy",
            "systems engineering",
            "probability theory",
            "systems analysi",
            "reliability analysi",
            "mission planning",
            "mars sample return mission",
            "reliability"
        ],
        "Software": "Space Mission Architecture and Risk Analysis Tool (SMART)"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Provides software developers, peer reviewers, testers, and quality assurance personnel with an interactive tool that facilitates searching for patterns, confirm compliance or non-compliance with coding guidelines and coding standards, identify suspicious code fragments, etc. Cobra uses a lexical analyzer for C to scan in source code. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-50050-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-50050-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "quality control",
            "standard",
            "statistical analysi",
            "software development tool",
            "evaluation",
            "c (programming language)",
            "coder",
            "symbol",
            "program verification (computers)",
            "computer program integrity"
        ],
        "Software": "Cobra: A Code Browser and Analyzer -- an extendable, interactive tool for the analysis of C code"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The primary motivation for the development of this software was to separate the analysis part of the problem from the data-specific part. This allows the exact same software to be used for multiple missions as needed; the only requirement for new mission input is the creation of a translator specific to that data source. Provides an API and for developing tools for astronomical data analysis. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-50136-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-50136-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "navigation",
            "data management",
            "data processing equipment",
            "software development tool",
            "data processing",
            "data system",
            "mission planning",
            "image processing",
            "light source",
            "computer systems design"
        ],
        "Software": "OMINAS (OPEN-SOURCE MODULAR IMAGE NAVIGATION AND ANALYSIS SYSTEM) astronomical data processing software"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "SysML is a standard, visual, and general-purpose system modeling language developed by the Object Management Group (OMG). MagicDraw from NoMagic is used as a modelling tool.",
        "Public Code Repo": "https://github.com/Open-MBEE/TMT-SysML-Model",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/Open-MBEE/TMT-SysML-Model",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "language",
            "dynamic model",
            "programming language",
            "systems engineering",
            "systems analysi",
            "mathematical model",
            "object-oriented programming",
            "telescope",
            "management system",
            "model"
        ],
        "Software": "SysML System Model for the Thirty Meter Telescope (TMT)"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "JPL's Integrated Model-Centric Engineering (IMCE) initiative developed ontologies for Model-Based Systems Engineering (MBSE) to support JPL's MBSE practices and methodologies. The IMCE ontologies have been carefully engineered to provide support for scalable query and reasoning according to the semantics of the Ontology Web Language (OWL) standard in such a way that these ontologies can be mapped as extensions of the Unified Modeling Language (UML) & Systems Modeling Language (SysML) standards. ",
        "Public Code Repo": "https://github.com/JPL-IMCE",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "semantic",
            "procedure",
            "standard",
            "programming language",
            "linguistic",
            "document markup language",
            "computation",
            "mathematical model",
            "query language",
            "model"
        ],
        "Software": "IMCE Ontological Modeling Framework"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "EarthKit provides a framework for collaboration among researchers in Earth science. It provides a set of software tools for sharing any user's research environment via the web and managing workflows that run in the cloud. By leveraging cloud computing services in this novel way, EarthKit can instantly replicate a reesarch computing environment (software, data, operating system environment and hardware).",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-49145-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-49145-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA"
        ],
        "Categories_NLP": [
            "data acquisition",
            "programming environment",
            "clouds (meteorology)",
            "information system",
            "distributed processing",
            "software development tool",
            "data system",
            "computation",
            "earth science",
            "computer systems design"
        ],
        "Software": "EarthKit"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Automates the deployment of nowcasting and forecasting hydrologic simulations and ingests satellite observations (through data assimilation). Allows coupling of other environmental models. Also facilitates delivery of data products to users via a GIS-enabled database.  users of project outputs through CCAFS network of partners. Our project objectives, and approach are integral with the goals of SERVIR.",
        "Public Code Repo": "https://github.com/nasa/RHEAS",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa/RHEAS",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "NASA"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "data integration",
            "assimilation",
            "data processing",
            "data system",
            "deployment",
            "satellite observation",
            "data reduction",
            "data base",
            "geographic information system"
        ],
        "Software": "Regional Hydrologic Extremes Assessment System (RHEAS) software framework"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The File Exchange Interface (FEI) service offers secure file transaction, store, transport, and management services. The latest distribution, FEI5 software code name Komodo, is a complete redesign from its predecessors by adopting the latest computing technologies and standards. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-47089-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-47089-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "data transmission",
            "interface",
            "standard",
            "transport aircraft",
            "data base management system",
            "human-computer interface",
            "management information system",
            "computer network",
            "file maintenance (computers)",
            "augmentation"
        ],
        "Software": "File Exchange Interface 5 - New enhancements to NTR 40075"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "Ndarts is designed as a general purpose dynamics library that can be used for the modeling of robotic platforms, space vehicles, molecular dynamics and such applications. All NASA space vehicles use such capabilities. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-47703-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-47703-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "library",
            "launch vehicle",
            "fluid dynamic",
            "model",
            "nasa program",
            "nasa space program",
            "aerospace vehicle",
            "computational fluid dynamic",
            "spacecraft",
            "molecular dynamic"
        ],
        "Software": "Ndarts"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "One of the big efforts of NASA is the observation of planet earth from space. Global climate change is a prime example. Extending Athena from the county level to the global level would give a simulation tool for examining how populations and countries might respond to global cllimate change and/or new policies related to controlling climate change. ",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-47857-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-47857-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "JPL",
            "NASA",
            "Business Systems and Project Management"
        ],
        "Categories_NLP": [
            "simulation",
            "man environment interaction",
            "earth (planet)",
            "climate change",
            "population",
            "nasa program",
            "nasa space program",
            "climatology",
            "earth observations (from space)",
            "policy"
        ],
        "Software": "Athena"
    },
    {
        "Update_Date": "2016-11-10",
        "Description": "The Physical Oceanography Distributed Active Archive Center (PO.DAAC) is the center for oceanographic data for the NASA Earth Science Data and Information System (ESDIS). The primary function of PO.DAAC is to ingest, validate, archive, and distribute oceanographic artifacts.",
        "Public Code Repo": "https://software.nasa.gov/software/NPO-47934-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://software.nasa.gov/software/NPO-47934-1",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "JPL",
            "NASA"
        ],
        "Categories_NLP": [
            "data base",
            "data management",
            "information system",
            "data processing",
            "data system",
            "nasa program",
            "earth science",
            "management information system",
            "information management",
            "oceanography"
        ],
        "Software": "Oceanographic Data Management And Archive System"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Written in Java and C++ and based on the Airborne Coordinated Conflict Detection and Resolution mathematical framework, CD3D and CR3D are prototype implementations of state-based conflict-detection and conflict-resolution algorithms for a 3D airspace.",
        "Public Code Repo": "https://shemesh.larc.nasa.gov/people/cam/ACCoRD/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://shemesh.larc.nasa.gov/people/cam/ACCoRD/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "detection",
            "java (programming language)",
            "state estimation",
            "steady state",
            "resolution",
            "c++ (programming language)",
            "prototype",
            "high resolution",
            "solid state device"
        ],
        "Software": "ACCoRDs Conflict-Detection (CD3D)/Conflict-Resolution (CR3D) Algorithms"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Conflict prevention information has been assembled into prevention bands that advise a crew on maneuvers that should not be taken, helping to ensure that an aircraft's path is free of conflicts with other aircraft.",
        "Public Code Repo": "https://shemesh.larc.nasa.gov/fm/fm-atm-codes.html",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://shemesh.larc.nasa.gov/fm/fm-atm-codes.html",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "aircraft control",
            "spacecrew",
            "flight path",
            "military aircraft",
            "prevention",
            "commercial aircraft",
            "collision avoidance",
            "aircraft equipment",
            "flight crew",
            "aircraft performance"
        ],
        "Software": "Conflict Prevention Bands"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Stratway modifies a four-dimensional (latitude, longitude, altitude, and time) flight plan to ensure a conflict-free trajectory. This type of resolution is strategic in that it resolves conflicts over long time horizons, perhaps over several hours.",
        "Public Code Repo": "https://software.nasa.gov/software/lar-17876-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/lar-17876-1",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "trajectory analysi",
            "flight altitude",
            "flight path",
            "flight plan",
            "high altitude",
            "trajectory",
            "time dependence",
            "latitude",
            "resolution",
            "high resolution"
        ],
        "Software": "Strategic Conflict Resolution (Stratway)"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "CFL3D is a structured-grid, cell-centered, upwind-biased, Reynolds-averaged Navier-Stokes (RANS) code. It can be run in parallel on multiple grid zones with point-matched, patched, overset, or embedded connectivities. Both multigrid and mesh sequencing are available in time-accurate or steady-state modes. ",
        "Public Code Repo": "https://github.com/nasa/CFL3D",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/CFL3D",
        "Contributors": [
            "c.l.rumsey@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "U.S. Release Only",
            "Design and Integration Tools",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "navier-stokes equation",
            "steady state",
            "reynolds number",
            "time dependence",
            "computational grid",
            "unstructured grids (mathematics)",
            "grid generation (mathematics)",
            "high reynolds number",
            "multigrid method",
            "computational fluid dynamic"
        ],
        "Software": "Computational Fluids Laboratory 3-Dimensional (CFL3D)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "The fUnit software provides a framework for unit-testing Fortran 90, 95, and 2003 code.",
        "Public Code Repo": "https://sourceforge.net/projects/fortranxunit/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://sourceforge.net/projects/fortranxunit/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "programming environment",
            "failure",
            "fortran",
            "software development tool",
            "systems engineering",
            "evaluation",
            "optimization",
            "program verification (computers)",
            "reliability",
            "computer program integrity"
        ],
        "Software": "Fortran Unit Testing Framework (fUnit v1.0)"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "ROBUS-2 is a time-division, multiple-access broadcast communication system that uses a time-indexed communication schedule for medium-access control. The technology provides guaranteed fault-tolerant services that include: message broadcast (Byzantine Agreement), dynamic communication schedule update, time reference (clock synchronization), and distributed diagnosis (group membership).",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/robus-2/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/robus-2/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "LaRC",
            "NASA",
            "Operations"
        ],
        "Categories_NLP": [
            "clock",
            "time measurement",
            "access control",
            "time division multiplexing",
            "synchronism",
            "broadcasting",
            "fault tolerance",
            "real time operation",
            "message processing",
            "message"
        ],
        "Software": "ROBUS-2 Fault-Tolerant Broadcast Communication System for Modular Avionics"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This sensitivity task employs the Monte Carlo method. Thousands of simulations are run with randomly varied input parameters, and then statistical correlations are computed to determine the sensitivity of output parameters to each input parameter.",
        "Public Code Repo": "https://github.com/kleb/nasarb/blob/master/uq4sim",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/kleb/nasarb/blob/master/uq4sim",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "LaRC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "domain",
            "monte carlo method",
            "parameter identification",
            "tolerances (mechanics)",
            "digital simulation",
            "sensitivity analysi",
            "correlation",
            "sensitivity",
            "simulation"
        ],
        "Software": "Tolerance Domain Specific Language"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This open-source Java software helps develop electronic standards (E-Standards) for mass properties engineering. An E-Standard is a highly descriptive dataset that includes standardizing functions for data manipulation, interrogation, and formatting. With this tool, any number of users can interface with the proposed E-Standard datasets and still seamlessly utilize their own software methods.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/e-standards-mass-properties-engineering/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/e-standards-mass-properties-engineering/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "LaRC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "standard",
            "software development tool",
            "data reduction"
        ],
        "Software": "Java Program to Promote an Open-Source E Standard for Mass Properties Engineering"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This Excel plugin written in VB.net allows rapid post-processing of thermal analysis data from text files or from SINDA-formatted SAV files. The software can be adapted to other data formats as well.",
        "Public Code Repo": "https://fileplottingtools.larc.nasa.gov/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://fileplottingtools.larc.nasa.gov/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "LaRC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data management",
            "format",
            "data processing equipment",
            "software development tool",
            "data processing",
            "data system",
            "systems analysi",
            "data reduction",
            "digital data"
        ],
        "Software": "FilePlottingTools"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "This software is a flight dynamics simulation of a transport aircraft. It implements general rigid body equations of motion for the vehicle dynamics and draws aerodynamic forces from a standard coefficient expansion implemented as table lookups. Dynamics of actuator servos and bandwidth of sensors are also included. The simulation is coded in Simulink, a model-based environment using a commercial simulation package from Mathworks, Inc. The software is not stand-alone; it must be run from inside this commercial environment, making use of numerical libraries for basic operations as well as the overall time-stepping and numerical integration routines.",
        "Public Code Repo": "https://github.com/nasa/GTM_DesignSim/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/GTM_DesignSim/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "aircraft control",
            "computerized simulation",
            "control simulation",
            "aircraft design",
            "transport aircraft",
            "control systems design",
            "dynamic model",
            "flight control",
            "simulation",
            "aircraft model"
        ],
        "Software": "Flight Dynamics Simulation of a Generic Transport Model"
    },
    {
        "Update_Date": "2016-09-20",
        "Description": "This toolbox generates shapefiles from the most recently acquired Landsat 8, Landsat 8 Surface Reflectance, and Sentinel-2 imagery over the Winam Gulf in Kenya depicting locations where water hyacinth in most likely present.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/SAVDT",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/SAVDT",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "LaRC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "detection",
            "vegetation",
            "surface propertie",
            "remote sensing",
            "reflectance",
            "position (location)",
            "earth surface",
            "water resource",
            "satellite imagery",
            "water"
        ],
        "Software": "Surface Aquatic Vegetation Detection Tool (SAVDT)"
    },
    {
        "Update_Date": "2016-10-12",
        "Description": "Modified Snowmelt Runoff Model for Forecasting Water Availability in Chile (M-SRM) models daily stream flow of snowmelt runoff as a function of temperature, elevation, snow-covered area, precipitation rate, and experimentally determined coefficients. Using MODIS and TRMM data, the software provides tools for synthesizing daily fractional snow cover and daily precipitation measurements. M-SRM provides daily stream flow estimates for three months beyond the start of the growing season.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/M-SRM",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/M-SRM",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "LaRC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "hydrology",
            "hydrometeorology",
            "hydrology model",
            "snow cover",
            "elevation",
            "water flow",
            "drainage",
            "forecasting",
            "snow",
            "precipitation (meteorology)"
        ],
        "Software": "Modified Snowmelt Runoff Model For Forecasting Water Availability in Chile"
    },
    {
        "Update_Date": "2014-04-15",
        "Description": "Created using the commercial math analysis software MATLAB, TASC enables the easy computation of nonlinear J-integral solutions for surface-cracked plates in tension by accessing and interpolating between the 600 nonlinear surface crack solutions documented in NASA/TP-2011-217480. The only required inputs to the program are the surface crack dimensions, plate cross-section dimensions, and material properties. TASC provides a convenient and easy-to-use interface for the solution set that allows a novice user to obtain a fast and reliable fracture toughness solution. ",
        "Public Code Repo": "https://sourceforge.net/projects/tascnasa/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://sourceforge.net/projects/tascnasa/",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Materials and Processes",
            "NASA",
            "MSFC"
        ],
        "Categories_NLP": [
            "yield point",
            "geometry",
            "structural analysi",
            "tensile stres",
            "crack geometry",
            "plates (structural members)",
            "stress analysi",
            "elastic propertie",
            "crack propagation",
            "crack"
        ],
        "Software": "Tool for Analysis of Surface Cracks (TASC)"
    },
    {
        "Update_Date": "2015-06-02",
        "Description": "A set of libraries used in the development of software applications.  libSPRITE was specifically designed for real-time systems that operate on a single computational node (but may be multi-core) to systematically address common coding errors, provide for multi-threaded programming to produce the exact same results regardless of the number of cores on the host compute node, and offer support for in-operation reconfigurability (parameter and control flow modifications). Components include engineering unit encoders, math functions, a task scheduler built on top of pthreads, a publish/subscribe data distribution system, and a Lua scripting language interface.",
        "Public Code Repo": "https://github.com/nasa/libSPRITE/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/libSPRITE/",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Data Servers Processing and Handling",
            "NASA",
            "MSFC"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "parameter identification",
            "error",
            "error analysi",
            "systems engineering",
            "scheduling",
            "c++ (programming language)",
            "flight simulation",
            "simulation",
            "systems simulation"
        ],
        "Software": "libSPRITE"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "ACCEPT is an open source machine learning code for model development to support both regression and detection modules, including fidelity analysis.",
        "Public Code Repo": "https://c3.nasa.gov/dashlink/static/media/algorithm/ACCEPT_osrelease_1.6.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://c3.nasa.gov/dashlink/static/media/algorithm/ACCEPT_osrelease_1.6.tar.gz",
        "Contributors": [
            "rodney.martin@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "detection",
            "model development",
            "machine learning",
            "regression",
            "NASA"
        ],
        "Categories_NLP": [
            "detection",
            "atmospheric model",
            "meteorology",
            "prediction",
            "module",
            "systems analysi",
            "mathematical model",
            "prediction analysis technique",
            "regression analysi",
            "simulation"
        ],
        "Software": "Adverse Condition & Critical Event Prediction Toolbox (ACCEPT)"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The IVHM Project in the Aviation Safety Program has funded research in electrical power system (EPS) health management. This problem domain contains both discrete and continuous behavior, and thus is directly relevant for the hybrid diagnostic tool HyDE. In FY2007 work was performed to expand the HyDE diagnosis model of the ADAPT system. The work completed resulted in a HyDE model with the capability to diagnose five times the number of ADAPT components than was previously tested. The expanded diagnosis model passed a corresponding set of new ADAPT fault injection scenario tests with no incorrect faults reported. The time required for the HyDE diagnostic system to isolate the fault varied widely between tests; this variance was reduced by tuning of the HyDE input parameters. These results and other diagnostic design tradeoffs are discussed. Finally, possible future improvements for both the HyDE diagnostic model and HyDE itself are presented.",
        "Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/Exp_BN.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/Exp_BN.tar.gz",
        "Contributors": [
            "jason.duley@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "diagnostics",
            "electrical power system",
            "prognostics",
            "ADAPT",
            "testbed",
            "NASA",
            "IVHM"
        ],
        "Categories_NLP": [
            "fault detection",
            "systems engineering",
            "diagnosi",
            "design analysi",
            "electric power supplie",
            "systems analysi",
            "mathematical model",
            "fault tolerance",
            "systems health monitoring",
            "real time operation"
        ],
        "Software": "Advanced Diagnostics and Prognostics Testbed (ADAPT)"
    },
    {
        "Update_Date": "2017-08-17",
        "Description": "An educational web application that visualizes the effects of climate change on agriculture using a large collection of global agriculture and weather station data.",
        "Public Code Repo": "https://github.com/NASAWorldWindResearch/AgroSphere",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWindResearch/AgroSphere",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "globe",
            "climate",
            "agriculture",
            "NASA",
            "weather-data",
            "atmosphere",
            "worldwind",
            "weather"
        ],
        "Categories_NLP": [
            "data acquisition",
            "meteorology",
            "weather",
            "climate change",
            "nasa program",
            "climatology",
            "environment effect",
            "climate",
            "agriculture",
            "world wide web"
        ],
        "Software": "NASA WorldWind Research: AgroSphere"
    },
    {
        "Update_Date": "2017-08-17",
        "Description": "WorldWind Earth application visualizes weather data and performs animation by extending the NASA WorldWind JAVA Client",
        "Public Code Repo": "https://github.com/NASAWorldWindResearch/WxOps-WorldWind",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWindResearch/WxOps-WorldWind",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "WorldWind",
            "NASA"
        ],
        "Categories_NLP": [
            "geomagnetism",
            "data acquisition",
            "java (programming language)",
            "meteorology",
            "nasa program",
            "satellite observation",
            "meteorological parameter",
            "precipitation (meteorology)",
            "earth observations (from space)",
            "weather"
        ],
        "Software": "NASA WorldWind Research: WxOps-WorldWind"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The Common Metadata Repository (CMR) is an earth science metadata repository for NASA EOSDIS data. The CMR Search API provides access to this metadata.",
        "Public Code Repo": "https://github.com/nasa/Common-Metadata-Repository",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/Common-Metadata-Repository",
        "Contributors": [
            "christopher.d.durbin@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "EOSDIS",
            "NASA",
            "CMR"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data management",
            "information retrieval",
            "earth observing system (eos)",
            "data system",
            "nasa program",
            "nasa space program",
            "earth science",
            "geology",
            "earth observations (from space)"
        ],
        "Software": "Common-Metadata-Repository"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "geocamUtilWeb is a set of utilities used by Django web apps in the GeoCam Share app collection.",
        "Public Code Repo": "https://github.com/nasa/georef_geocamutilweb",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/georef_geocamutilweb",
        "Contributors": [
            "tamar.e.cohen@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "ARC",
            "georef",
            "NASA",
            "GeoCam"
        ],
        "Categories_NLP": [],
        "Software": "georef_geocamutilweb"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "georef repository",
        "Public Code Repo": "https://github.com/nasa/georef",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/georef",
        "Contributors": [
            "tamar.e.cohen@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "ARC",
            "georef",
            "NASA",
            "GeoCam"
        ],
        "Categories_NLP": [],
        "Software": "georef"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "georef_deploy repository",
        "Public Code Repo": "https://github.com/nasa/georef_deploy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/georef_deploy",
        "Contributors": [
            "tamar.e.cohen@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "ARC",
            "georef",
            "NASA",
            "GeoCam"
        ],
        "Categories_NLP": [],
        "Software": "georef_deploy"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "georef_geocamtiepoint repository",
        "Public Code Repo": "https://github.com/nasa/georef_geocamtiepoint",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/georef_geocamtiepoint",
        "Contributors": [
            "tamar.e.cohen@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "ARC",
            "georef",
            "NASA",
            "GeoCam"
        ],
        "Categories_NLP": [],
        "Software": "georef_geocamtiepoint"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The Image Registration module is intended to help automate the process of registering images to the correct location on the ground. It consists of two main components: A - Fetching RGB satellite imagery of Earth to use for comparison. B - Searching for the correct image registration parameters.",
        "Public Code Repo": "https://github.com/nasa/georef_imageregistration",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/georef_imageregistration",
        "Contributors": [
            "tamar.e.cohen@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "georef",
            "GeoCam",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "position (location)",
            "remote sensing",
            "meteorological satellite",
            "satellite imagery",
            "satellite observation",
            "image analysi",
            "imagery",
            "image processing",
            "pattern registration",
            "earth observations (from space)"
        ],
        "Software": "georef_imageregistration"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "An interactive demo of the Open MCT mission control software",
        "Public Code Repo": "https://github.com/nasa/openmct-demo",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/openmct-demo",
        "Contributors": [
            "peter.l.richards@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "demo",
            "Open Source",
            "ARC",
            "MCT",
            "NASA",
            "Operations"
        ],
        "Categories_NLP": [],
        "Software": "Open Mission Control Demo (OpenMCT)"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "CMR-OpenSearch is a web application developed by NASA EOSDIS to enable data discovery, search, and access across the CMR Earth Science data holdings via the OpenSearch standard. ",
        "Public Code Repo": "https://github.com/nasa/cmr-opensearch",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/cmr-opensearch",
        "Contributors": [
            "calin.duma@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Earth Science",
            "EOSDIS",
            "OpenSearch",
            "NASA",
            "search",
            "CMR"
        ],
        "Categories_NLP": [
            "data acquisition",
            "standard",
            "information retrieval",
            "earth observing system (eos)",
            "data system",
            "nasa program",
            "nasa space program",
            "earth science",
            "geology",
            "earth observations (from space)"
        ],
        "Software": "cmr-opensearch"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "CMR-CSW is a web application developed by NASA EOSDIS to enable data discovery, search, and access across the CMR Earth Science data holdings via the OpenGIS Catalogue Service for the Web (CSW) standard.",
        "Public Code Repo": "https://github.com/nasa/cmr-csw",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/cmr-csw",
        "Contributors": [
            "calin.duma@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Earth Science",
            "EOSDIS",
            "OpenGIS",
            "CSW",
            "NASA",
            "search",
            "CMR"
        ],
        "Categories_NLP": [
            "data acquisition",
            "standard",
            "information retrieval",
            "catalogs (publications)",
            "earth observing system (eos)",
            "data system",
            "nasa program",
            "nasa space program",
            "earth science",
            "earth observations (from space)"
        ],
        "Software": "cmr-csw"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "A tutorial for OpenMCT that guides you through integrating historical and realtime telemetry.",
        "Public Code Repo": "https://github.com/nasa/openmct-tutorial",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/openmct-tutorial",
        "Contributors": [
            "peter.l.richards@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "tutorial",
            "ARC",
            "MCT",
            "NASA",
            "Operations"
        ],
        "Categories_NLP": [],
        "Software": "Open Mission Control Tutorial (OpenMCT)"
    },
    {
        "Update_Date": "2017-07-13",
        "Description": "Kepler Science Data Processing Pipeline",
        "Public Code Repo": "https://github.com/nasa/kepler-pipeline",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/kepler-pipeline",
        "Contributors": [
            "bill.wohler@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Kepler",
            "NASA"
        ],
        "Categories_NLP": [],
        "Software": "kepler-pipeline"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The Mesh Network Communication System is a peer-to-peer communication network architecture that enables communication between network nodes of various types. The initial primary goal of the system was to enable communication between small formations of cubesats or other small satellites, but the basic mesh architecture is applicable to data exchange between network assets of any type. The system has been flight tested on formations of small unmanned aerial systems (sUAS) and shown to provide low latency data throughput for dynamic flight environments.",
        "Public Code Repo": "https://github.com/nasa/meshNetwork",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/meshNetwork",
        "Contributors": [
            "christopher.m.becker@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "sUAS",
            "network communication",
            "cubesats",
            "NASA",
            "peer-to-peer",
            "satellites"
        ],
        "Categories_NLP": [
            "data transmission",
            "satellite network",
            "data link",
            "communication network",
            "small scientific satellite",
            "satellite communication",
            "spacecraft communication",
            "architecture (computers)"
        ],
        "Software": "meshNetwork"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The Core Flight Executive (cFE) provides software bus, time, event, executive, table, and file services, and it defines the application programming interface (API) for each set function. Applications subscribe to cFE services at runtime, making system modifications easy. Facilitating rapid prototyping, new applications can be compiled, linked, loaded, and started without requiring the entire system to be rebuilt.",
        "Public Code Repo": "https://github.com/nasa/cFE",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/cFE",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Vehicle Management (Space/Air/Ground)",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "response time (computers)",
            "avionic",
            "software development tool",
            "systems engineering",
            "airborne/spaceborne computer",
            "prototype",
            "real time operation",
            "operating systems (computers)",
            "channels (data transmission)"
        ],
        "Software": "cFE"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "Fprime flight software framework",
        "Public Code Repo": "https://github.com/nasa/fprime",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa/fprime",
        "Contributors": [
            "timothy.canham@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "flight software",
            "framework",
            "NASA",
            "JPL"
        ],
        "Categories_NLP": [],
        "Software": "fprime"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The knife library calculates the boolean subtraction of arbitrary watertight triangular polyhedra. The result of this subtraction is also watertight triangular polyhedra. The triangular faces of the resultant polyhedra are created with a Delaunay triangle mesher. These polyhedra are suitable for performing cut cell partial differential equation solutions (i.e., computational fluid flow simulations). ",
        "Public Code Repo": "https://github.com/nasa/knife",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/knife",
        "Contributors": [
            "MikePark.rb@GMail.com"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "library",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "flow equation",
            "computerized simulation",
            "simulation",
            "triangle",
            "numerical analysi",
            "fluid flow",
            "digital simulation",
            "steady flow",
            "computational fluid dynamic"
        ],
        "Software": "knife"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "A jQuery plugin implementing the ECHO Forms specification.",
        "Public Code Repo": "https://github.com/nasa/edsc-echoforms",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/edsc-echoforms",
        "Contributors": [
            "patrick.m.quinn@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "jquery",
            "NASA",
            "ECHO Forms"
        ],
        "Categories_NLP": [],
        "Software": "edsc-echoforms"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Scheduler Application",
        "Public Code Repo": "https://github.com/nasa/SCH",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/SCH",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "SCH"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The Software Bus Network application (SBN) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS.",
        "Public Code Repo": "https://github.com/nasa/SBN",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/SBN",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "CFE",
            "NASA"
        ],
        "Categories_NLP": [
            "network",
            "avionic",
            "software development tool",
            "flight control",
            "communication network",
            "systems engineering",
            "airborne/spaceborne computer",
            "network synthesi",
            "computer network",
            "channels (data transmission)"
        ],
        "Software": "SBN"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Stored Command Application",
        "Public Code Repo": "https://github.com/nasa/SC",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/SC",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "SC"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Memory Dwell Application",
        "Public Code Repo": "https://github.com/nasa/MD",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/MD",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "MD"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Housekeeping Application",
        "Public Code Repo": "https://github.com/nasa/HK",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/HK",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "HK"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Health Safety",
        "Public Code Repo": "https://github.com/nasa/HS",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/HS",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "HS"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Limit Checker Application",
        "Public Code Repo": "https://github.com/nasa/LC",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/LC",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "LC"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Data Storage Application",
        "Public Code Repo": "https://github.com/nasa/DS",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/DS",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "DS"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System Checksum Application",
        "Public Code Repo": "https://github.com/nasa/CS",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/CS",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "CS"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System File Transfer Application",
        "Public Code Repo": "https://github.com/nasa/CF",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/CF",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "CF"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "NASA core Flight System File Manager Application",
        "Public Code Repo": "https://github.com/nasa/FM",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/FM",
        "Contributors": [
            "james.marshall-1@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "CFS",
            "NASA",
            "CFE"
        ],
        "Categories_NLP": [],
        "Software": "FM"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "A jQuery plugin implementing a timeline view of data, allowing time range selection as well as keyboard and touch interaction For a basic usage example and a testbed for changes.",
        "Public Code Repo": "https://github.com/nasa/edsc-timeline",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/edsc-timeline",
        "Contributors": [
            "patrick.m.quinn@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "ECHO",
            "jquery",
            "NASA",
            "search"
        ],
        "Categories_NLP": [
            "test stand",
            "data acquisition",
            "tables (data)",
            "time measurement",
            "time dependence",
            "real time operation",
            "data reduction",
            "optimization",
            "time signal"
        ],
        "Software": "edsc-timeline"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "The General Mission Analysis Tool (GMAT) is the worlds only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.\r\n\r\nGMAT contains models of real world objects such as spacecraft and thrusters, and analysis \"objects\" such as propagators, plots, and reports. These objects are used in a mission sequence in which the user employs commands supported by the system to model mission events and perform estimation.\r\n\r\nFor a complete list of new features, compatibility changes, and bug fixes, see the Release Notes.  Below are just some of the new capabilities contained in this release. \r\nProduction quality orbit determination (Operational Certification expected in November, 2016)\r\nCode 500 ephemeris propagator\r\nSTK ephemeris file output\r\nWrite command to save GMAT configurations during execution\r\nInclude macro to load GMAT configurations from external sources during execution\r\nMany new built in math functions and parameters\r\n130 pages of new user documentation\r\n",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2016a/",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2016a/",
        "Contributors": [
            "steven.p.hughes@nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "space navigation",
            "parameter identification",
            "software development tool",
            "space mission",
            "systems engineering",
            "spacecraft design",
            "design analysi",
            "systems analysi",
            "parameterization"
        ],
        "Software": "General Mission Analysis Tool (GMAT) v.R2017a"
    },
    {
        "Update_Date": "2017-08-23",
        "Description": "This software retrieves a set of atmospheric/surface/instrument parameters from a simultaneous fit to spectra from multiple absorption bands. The software uses an iterative, non-linear retrieval technique (optimal estimation). After the retrieval process has converged, the software performs an error analysis. The products of the software include all quantities needed to understand the information content of the measurement, its uncertainty, and its dependence on interfering atmospheric properties. Spectra from ground-based or space-based measurement with arbitrary observation geometry can be analyzed. The retrieved parameters can be chosen from a large set of atmospheric (e.g., volume mixing ratio of gases or aerosol optical depth), surface (e.g., Lambertian reflection), and instrument (e.g., spectral shift or instrument line shape parameters) parameters. The software uses an accurate, state-of-the-art, multiple-scattering radiative transfer code combined with an efficient polarization approximation to simulate measured spectra. The software enables fast and highly accurate simulations of broad spectral ranges by an optional parallelization of the frequency processing in the radiative transfer model. The framework was written with flexibility in mind. New algorithms and instruments are added by creating additional classes that implement the defined interfaces. Bindings are available for both Python and Lua.",
        "Public Code Repo": "https://github.com/nasa/RtRetrievalFrameworkDoc",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa/RtRetrievalFrameworkDoc",
        "Contributors": [
            "james.mcduffie@jpl.nasa.gov"
        ],
        "Labor_Hours": 0,
        "Categories": [
            "Earth Science",
            "Forward Model",
            "Retrieval",
            "Radiative Transfer",
            "Python",
            "Atmosphere",
            "C++",
            "Framework",
            "Lua",
            "NASA"
        ],
        "Categories_NLP": [
            "spectrum analysi",
            "visible spectrum",
            "optical thicknes",
            "geometry",
            "aerosol",
            "radiative transfer",
            "spectral band",
            "absorption spectra",
            "algorithm",
            "surface propertie"
        ],
        "Software": "RtRetrievalFrameworkDoc"
    },
    {
        "Update_Date": "2017-07-07",
        "Description": "Astronomy Picture of the Day API service. A microservice written in Python which may be run on Google App Engine with the Flask micro framework.",
        "Public Code Repo": "https://github.com/nasa/apod-api",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "HQ",
        "External Link": "https://github.com/nasa/apod-api",
        "Contributors": [
            "jennifer.n.betancourt@nasa.gov"
        ],
        "Labor_Hours": 320,
        "Categories": [
            "NASA",
            "Images",
            "API"
        ],
        "Categories_NLP": [
            "engine design",
            "engine monitoring instrument",
            "failure",
            "engine test",
            "turbofan engine",
            "aircraft engine",
            "astronomy",
            "optimization",
            "gas turbine engine",
            "image"
        ],
        "Software": "APOD API"
    },
    {
        "Update_Date": "2011-12-02",
        "Description": "A software application that allows the interactive visualization of multivariate data using a variety of standard techniques, Viewpoints can be used with extremely large data sets.",
        "Public Code Repo": "https://app.assembla.com/spaces/viewpoints/documents",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://app.assembla.com/spaces/viewpoints/wiki/Home",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 21424,
        "Categories": [
            "Open Source",
            "visualization",
            "ARC",
            "NASA",
            "Data and Image Processing"
        ],
        "Categories_NLP": [
            "data sampling",
            "data management",
            "software development tool",
            "data processing",
            "data system",
            "multivariate statistical analysi",
            "scientific visualization",
            "data reduction",
            "flow visualization",
            "data structure"
        ],
        "Software": "Viewpoints: Software for Visualization of Multivariate Data"
    },
    {
        "Update_Date": "2016-09-07",
        "Description": "The MISR Toolkit is a simplified programming interface to access MISR L1B2, L2 conventional and ancillary data products. It is an interface built upon HDF-EOS that knows about MISR data products.",
        "Public Code Repo": "https://github.com/nasa/MISR-Toolkit",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://nasa.github.io/MISR-Toolkit/html/index.html",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 73536,
        "Categories": [
            "Earth Science",
            "JPL",
            "Visualization",
            "Toolkit",
            "Data and Image Processing",
            "NASA",
            "Analysis",
            "U.S. Government Purpose Release"
        ],
        "Categories_NLP": [
            "data sampling",
            "data acquisition",
            "interface",
            "data processing equipment",
            "data management",
            "data processing",
            "access control",
            "data system",
            "data flow analysi",
            "digital data"
        ],
        "Software": "MISR Toolkit"
    },
    {
        "Update_Date": "2016-10-03",
        "Description": "abaverify is a collection of Python scripts that is used for testing and verifying the behavior of user subroutines for the commercial finite element code Abaqus.",
        "Public Code Repo": "https://github.com/nasa/Abaverify",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-18938-1",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 1184,
        "Categories": [
            "Fortran",
            "Abaqus",
            "Open Source",
            "Materials and Processes",
            "FEA",
            "Unit Tests",
            "Integration Tests",
            "LaRC",
            "NASA",
            "User Subroutines"
        ],
        "Categories_NLP": [
            "subroutine",
            "finite element method",
            "program verification (computers)"
        ],
        "Software": "Abaqus User Subroutine Verification (abaverify)"
    },
    {
        "Update_Date": "2016-06-20",
        "Description": "The Committee on Earth Observation Satellites (CEOS) has long recognized a need for data processing infrastructure to support Earth science objectives in developing countries.  Forest preservation initiatives, carbon measurement initiatives, water management and agricultural monitoring are just few examples of causes that can benefit greatly from remote sensing data.  Currently, however, many developing nations lack the in-country expertise and computational infrastructure to utilize remote sensing data.\r\n\r\nThe CEOS Data Cube Platform provides a flexible model to address these needs.  The CEOS Data Cube Platform is a data processing platform for Earth science data, with a focus on remote-sensing data.  The platform provides a data ingestion framework that includes support for automated ingestion of a wide variety of remote sensing data products.  The data products are ingested into an N-dimensional data array that abstracts away management of distinct acquisitions.   The platform has a tiered API for data processing and a data/application platform layer for higher-level access.",
        "Public Code Repo": "https://github.com/ceos-seo/Data_Cube_v2",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/ceos-seo/Data_Cube_v2",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 1150160,
        "Categories": [
            "Open Source",
            "ceos-seo",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "LaRC",
            "NASA",
            "Data cube"
        ],
        "Categories_NLP": [
            "data acquisition",
            "remote sensing",
            "forest",
            "earth resource",
            "data processing",
            "satellite observation",
            "environmental monitoring",
            "earth science",
            "developing nation",
            "earth observations (from space)"
        ],
        "Software": "CEOS Data Cube Platform v.2 (CEOS2)"
    },
    {
        "Update_Date": "2015-09-21",
        "Description": "METRIC model software can be used to calculate evapotranspiration (ET) rates of agricultural fields by executing the Measuring Evapotranspiration at High Resolution with Internalized Calibration (METRIC) model in an ArcGIS Python script.  The model requires input data from Landsat 8 OLI/TIRS and local weather stations.  The creation of this software was motivated by the need to reduce irrigation costs for farmers and provide a means of drought monitoring for the agricultural industry.  This software has the potential to reduce the economic stress on the agricultural industry by enhancing crop productivity and irrigation efficiency.  ",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/METRIC",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/METRIC",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 1424,
        "Categories": [
            "NASA-DEVELOP",
            "Open Source",
            "evapotranspiration",
            "LaRC",
            "NASA",
            "Data and Image Processing",
            "landsat imagery"
        ],
        "Categories_NLP": [
            "remote sensing",
            "crop growth",
            "farm crop",
            "calibrating",
            "cost",
            "cost effectivenes",
            "high resolution",
            "mathematical model",
            "agriculture",
            "model"
        ],
        "Software": "Coastal Mid-Atlantic METRIC Model"
    },
    {
        "Update_Date": "2016-06-16",
        "Description": "The Drought Severity Assessment Tool (formerly Drought Severity Assessment - Decision Support Tool) will be used by Navajo Nation Department of Water Resource Managers for their monthly drought reports and other activities related to drought monitoring within the region. With small adjustments it is possible for the tool to be used in other locations given the user has already downloaded and processed the proper precipitation data.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/DSAT",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/DSAT",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 2544,
        "Categories": [
            "NASA-DEVELOP",
            "Drought",
            "application",
            "NASA",
            "resource management",
            "water resources",
            "R"
        ],
        "Categories_NLP": [
            "position (location)",
            "earth resource",
            "water resource",
            "decision making",
            "decision support system",
            "water flow",
            "region",
            "north america",
            "water",
            "precipitation (meteorology)"
        ],
        "Software": "Drought Severity Assessment Tool (DSAT)"
    },
    {
        "Update_Date": "2016-08-01",
        "Description": "Extreme heat causes and exacerbates a number of health problems, leading to hospitalization and death in some cases. The problem of severe heat is notably felt in Maricopa County, Arizona, where the socially disadvantaged and physically vulnerable are especially susceptible to the effects of extreme heat. Several organizations, including the Arizona Department of Health Services and the Phoenix Heat Relief Network, are working to create more effectively placed cooling centers and heat warning systems to aid those with the highest risk of exposure. This project created a Python tool using Aqua Moderate Resolution Imaging Spectrometer (MODIS) land surface temperature parameters to generate heat maps that reference demographics data on extreme heat days. ",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/LaSTMoV",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/LaSTMoV",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 144,
        "Categories": [
            "MODIS",
            "NASA-DEVELOP",
            "Open Source",
            "Visualization",
            "Land Surface Temperature",
            "LaRC",
            "NASA",
            "Data and Image Processing"
        ],
        "Categories_NLP": [
            "risk",
            "surface propertie",
            "public health",
            "temperature effect",
            "imaging spectrometer",
            "modis (radiometry)",
            "surface temperature"
        ],
        "Software": "Land Surface Temperature MODIS Visualization (LaSTMoV)"
    },
    {
        "Update_Date": "2016-06-24",
        "Description": "The DRIP-SLIP model automatically analyzes red band spectral information and soil moisture information derived from Landsat 8 and ASTER and SRTM data, at a fine to moderate resolutions, to determine areas that might be new landslides. This is important to help increase the temporal latency for landslide products that emergency managers, planners, and scientists are able to use in their work.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/DRIP-SLIP",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/NASA-DEVELOP/DRIP-SLIP",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 352,
        "Categories": [
            "NASA-DEVELOP",
            "precipitation monitoring",
            "Open Source",
            "LaRC",
            "NASA",
            "Data and Image Processing",
            "landslide",
            "LANDSAT"
        ],
        "Categories_NLP": [
            "detection",
            "remote sensing",
            "landsat satellite",
            "data reduction",
            "data processing",
            "emergency",
            "resolution",
            "high resolution",
            "moisture",
            "mathematical model"
        ],
        "Software": "DEVELOP DRIP and SLIP Landslide Detection Package (DRIP-SLIP)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Memory Manager application processes commands, generally from the ground, in order to dump the contents of a memory location, dump the contents of a range of memory locations, load a memory location with specified data, load a range of memory with specified data, or fill an area of memory with the specified fill pattern. Operations can be performed on non-volatile, volatile, and memory mapped I/O.",
        "Public Code Repo": "https://github.com/nasa/MM",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://software.nasa.gov/software/GSC-16011-1",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 24416,
        "Categories": [
            "CFS",
            "memory management",
            "Open Source",
            "CFE",
            "Vehicle Management (Space/Air/Ground)",
            "Core Flight System",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "position (location)",
            "data storage",
            "data processing equipment",
            "memory (computers)",
            "computer storage device"
        ],
        "Software": "Core Flight System (CFS) Memory Manager Application Version 2"
    },
    {
        "Update_Date": "2015-03-04",
        "Description": "This framework integrates a regional landslide susceptibility map and satellite-based rainfall estimates into a binary decision tree model, considering both daily and antecedent rainfall. Using a regionally distributed, percentile-based threshold approach, the model outputs a pixel-by-pixel nowcast in near real-time at a resolution of 30 arcseconds to identify areas of moderate and high landslide hazard. ",
        "Public Code Repo": "https://github.com/vightel/ojo-processing",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://ojo-streamer.herokuapp.com/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 1840,
        "Categories": [
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "earth sciences",
            "NASA",
            "GSFC",
            "landslides"
        ],
        "Categories_NLP": [
            "estimate",
            "map",
            "trees (mathematics)",
            "decision making",
            "pixel",
            "satellite imagery",
            "high resolution",
            "decision theory",
            "hazard",
            "rain"
        ],
        "Software": "Landslide Hazard Assessment for Situational Awareness (LHASA)"
    },
    {
        "Update_Date": "2010-09-27",
        "Description": "MCP is a high-performance file copy utility that achieves performance gains through parallelization. Multiple files and parts of single files are processed in parallel using multiple threads on multiple processors. The program employs the OpenMP and MPI programming models. ",
        "Public Code Repo": "https://github.com/pkolano/mutil",
        "License": [
            "NASA Open Source",
            "LGPL"
        ],
        "NASA Center": "ARC",
        "External Link": "https://pkolano.github.io/projects/mutil.html",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "Open Source",
            "system administration",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA",
            "file copying",
            "mutil"
        ],
        "Categories_NLP": [
            "performance test",
            "performance prediction",
            "parallel programming",
            "central processing unit",
            "mathematical model",
            "parallel processing (computers)",
            "linear programming",
            "computer component",
            "computation",
            "compiler"
        ],
        "Software": "Multi-threaded Copy Program (MCP)"
    },
    {
        "Update_Date": "2016-04-26",
        "Description": "RACE is a software architecture and framework for configurable, highly concurrent and distributed message based systems.  RACE can be used to rapidly build simulations that span several machines (including synchronized displays), interface existing hardware simulators and other live data feeds, and incorporate sophisticated visualization components such as NASAs WorldWind viewer. RACE is implemented as a distributed actor system that runs within Java virtual machines.",
        "Public Code Repo": "https://github.com/NASARace/race",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASARace/race/blob/master/README.md",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 23232,
        "Categories": [
            "Open Source",
            "Airspace Simulation",
            "Aeronautics",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "simulator",
            "java (programming language)",
            "display device",
            "virtual reality",
            "computer graphic",
            "scientific visualization",
            "architecture (computers)",
            "simulation",
            "systems simulation"
        ],
        "Software": "RACE - Runtime for Airspace Concept Evaluation"
    },
    {
        "Update_Date": "2017-02-15",
        "Description": "PRECiSA (Program Round-off Error Certifier via Static Analysis) is a fully automatic analyzer for the estimation of round-off errors of floating-point valued functional expressions. The input to PRECiSA is a program composed of floating-point valued functions.",
        "Public Code Repo": "https://github.com/nasa/PRECiSA",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "http://precisa.nianet.org",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 7120,
        "Categories": [
            "PVS",
            "Floating-point Round-off Errors",
            "Static Analysis",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "measure and integration",
            "spectrum analysi",
            "error",
            "error analysi",
            "systems analysi",
            "estimating",
            "floating point arithmetic",
            "numerical integration",
            "error function",
            "functions (mathematics)"
        ],
        "Software": "Program Round-Off Certifier via Static Analysis (PRECiSA) with Kodiak Integration"
    },
    {
        "Update_Date": "2016-08-19",
        "Description": "The communication module of ICAROUS enables data transfer between ICAROUS and other off board entities, e.g., ground stations, other air traffic, via the open source MAVLink protocol (http://qgroundcontrol.org/mavlink/start).  The decision making module of ICAROUS provides a framework to monitor incoming data from aircraft sensors and data links for conflicts, e.g., violations of keep-in/keep-out regions, collision hazards, weather hazards, and resolve these conflicts with the help of the core ICAROUS algorithms.\r\n",
        "Public Code Repo": "https://github.com/nasa/icarous",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://shemesh.larc.nasa.gov/fm/ICAROUS/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 299392,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "Detect and Avoid",
            "Geofencing",
            "LaRC",
            "NASA",
            "UAS"
        ],
        "Categories_NLP": [
            "data transmission",
            "air traffic control",
            "data link",
            "communication network",
            "aircraft communication",
            "protocol (computers)",
            "collision avoidance",
            "ground-air-ground communication",
            "flight hazard",
            "weather"
        ],
        "Software": "Independent Configurable Architecture for Reliable Operations of Unmanned Systems with Distributed On-board Services (ICAROUS-2)"
    },
    {
        "Update_Date": "2016-09-14",
        "Description": "PolyCARP is a package of algorithms, including both their formal models and software implementations, for computing containment, collision, resolution, and recovery information for polygons. The intended applications of PolyCARP are related, but not limited, to safety critical systems in air traffic management. One application is weather avoidance. A weather cell can be approximated by a polygon, and PolyCARP provides algorithms to detect whether a trajectory will intersect such a polygon in the near future and will provide maneuver guidance to avoid the polygon. If the trajectory is inside the polygon at the current time, PolyCARP provides algorithms for maneuver guidance to exit the polygon. Another application is ensuring that an aircraft stays inside a predetermined safety region, also known as assured containment, and PolyCARP provides algorithms that ensure that a point is inside or outside a particular polygonal region. Another application is obstacle avoidance by an aircraft. There are several functionalities provided by PolyCARP. There are algorithms to insure that a point is contained in or excluded from a polygon. There are also collision detection algorithms that determine if a moving point intersects a polygon, including the case where the polygon is moving or even warping over time, as well as where the polygon and the point are following piecewise linear trajectories. There are algorithms that resolve potential collisions between and point and a polygon by providing collision-free trajectories, and there are algorithms that compute new trajectories to regain separation from a polygon.",
        "Public Code Repo": "https://github.com/nasa/polycarp",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://shemesh.larc.nasa.gov/fm/PolyCARP",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 110528,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "Geofencing",
            "LaRC",
            "NASA",
            "UAV"
        ],
        "Categories_NLP": [
            "algorithm",
            "air traffic control",
            "detection",
            "warning system",
            "flight safety",
            "aircraft guidance",
            "collision avoidance",
            "automation",
            "real time operation",
            "aircraft safety"
        ],
        "Software": "PolyCARP: Algorithms and Software for Computations with Polygons"
    },
    {
        "Update_Date": "2014-04-23",
        "Description": "DAIDALUS is a reference implementation in Java and C++ of RTCA-228 detect and avoid concept for the integration of Unmanned Aircraft Systems into civil airspace. DAIDALUS consists of algorithms for determining the current well-clear status between two aircraft and for predicting a well-clear violation within a lookahead time, assuming non-maneuvering trajectories. In the case of a predicted well-clear violation, DAIDALUS also provides an algorithm that computes the time interval of well-clear violation. Furthermore, DAIDALUS implements algorithms for computing prevention bands, assuming a simple kinematic trajectory model. Prevention bands are ranges of track, ground speed, and vertical speed maneuvers that are predicted to be in well-clear violation within a given lookahead time.\r\n",
        "Public Code Repo": "https://github.com/nasa/wellclear",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://shemesh.larc.nasa.gov/fm/DAIDALUS/",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 207456,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "Well-Clear",
            "Detect and Avoid",
            "LaRC",
            "NASA",
            "UAS"
        ],
        "Categories_NLP": [
            "algorithm",
            "aircraft maneuver",
            "trajectory analysi",
            "air traffic control",
            "trajectory control",
            "measure and integration",
            "trajectory",
            "high speed",
            "real time operation"
        ],
        "Software": "Detect and Avoid Alerting Logic for Unmanned Systems (DAIDALUS) with Dynamic Well-Clear Separation Volumes"
    },
    {
        "Update_Date": "2016-08-18",
        "Description": "The Prognostics Algorithm Library is a suite of algorithms implemented in the MATLAB programming language for model-based prognostics (remaining life computation). It includes algorithms for state estimation and prediction, including uncertainty propagation. The algorithms take as inputs component models developed in Matlab, and perform estimation and prediction functions. The library allows the rapid development of prognostics solutions for given models of components and systems. Different algorithms can be easily swapped to do comparative studies and evaluations of different algorithms to select the best for the application at hand.",
        "Public Code Repo": "https://github.com/nasa/PrognosticsAlgorithmLibrary",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/PrognosticsAlgorithmLibrary/wiki",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 384,
        "Categories": [
            "Prognostics",
            "Open Source",
            "Autonomous Systems",
            "Toolbox",
            "Health Management",
            "PHM",
            "Framework",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "state estimation",
            "prediction",
            "mathematical model",
            "computation",
            "programming language",
            "systems analysi",
            "stochastic processe",
            "estimating",
            "prediction analysis technique",
            "algorithm"
        ],
        "Software": "Prognostics Algorithm Library"
    },
    {
        "Update_Date": "2016-08-18",
        "Description": "The Prognostics Model Library is a modeling framework focused on defining and building models for prognostics (computation of remaining useful life) of engineering systems, and provides a set of prognostics models for select components developed within this framework, suitable for use in prognostics applications for these components. The library currently includes models for valves, pumps, and batteries. The Prognostics Model Library is implemented in MATLAB. The implementation consists of a set of utilities for defining a model (specifying variables, parameters, and equations), simulating the model, and embedding it within common model-based prognostics algorithms. A user can use existing models within the library or construct new models with the provided framework.",
        "Public Code Repo": "https://github.com/nasa/PrognosticsModelLibrary",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/PrognosticsModelLibrary/wiki",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 656,
        "Categories": [
            "Prognostics",
            "Open Source",
            "Autonomous Systems",
            "Toolbox",
            "Health Management",
            "PHM",
            "Framework",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "dynamic model",
            "mathematical model",
            "computation",
            "electric battery",
            "independent variable",
            "systems analysi",
            "pump",
            "model",
            "control valf",
            "life (durability)"
        ],
        "Software": "Prognostics Model Library"
    },
    {
        "Update_Date": "2016-04-18",
        "Description": "The QuIP interpreter, a software environment for QUick image processing, uses an interactive scripting language designed to facilitate use by non-expert users, through features such as context-sensitive automatic response completion and integrated documentation.  The package includes a number of script packages that implement high-, medium-, and low-level functions (e.g., analysis of eye images for human gaze tracking, feature tracking, and image filtering). The environment also includes facilities for displaying images on screen, drawing and overlaying graphics, and constructing graphical user interfaces using the scripting language.  Currently supported platforms are *NIX (tested on Mac OS X and Linux), and Apple iOS.",
        "Public Code Repo": "https://github.com/nasa/QuIP",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/QuIP/wiki",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 157216,
        "Categories": [
            "Image Processing",
            "Visualization",
            "Open Source",
            "Psychophysics",
            "Simulation",
            "Mobile",
            "Graphics",
            "Toolkit",
            "Data and Image Processing",
            "Analysis",
            "ARC",
            "Framework",
            "NASA"
        ],
        "Categories_NLP": [
            "unix (operating system)",
            "human-computer interface",
            "high level language",
            "computer graphic",
            "image analysi",
            "image processing",
            "software development tool",
            "data processing",
            "eye (anatomy)",
            "graphical user interface"
        ],
        "Software": "Portable Environment for Quick Image Processing (QuIP)"
    },
    {
        "Update_Date": "2016-02-29",
        "Description": "This repository contains the configuration used by Worldview on the Earthdata site. See the Worldview repository for more information. This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
        "Public Code Repo": "https://github.com/nasa-gibs/worldview-options-eosdis",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa-gibs/worldview-options-eosdis",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 21152,
        "Categories": [
            "global imagery browse services",
            "branding",
            "earth data science",
            "gibs",
            "worldview",
            "eosdis",
            "NASA",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "data base",
            "information system",
            "systems engineering",
            "aerospace science",
            "data system",
            "nasa program",
            "earth science",
            "nasa space program",
            "space flight"
        ],
        "Software": "Worldview Options Eosdis"
    },
    {
        "Update_Date": "2016-01-28",
        "Description": "This repository contains the wireframes and designs for NASA Worldview. This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
        "Public Code Repo": "https://github.com/nasa-gibs/worldview-design",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa-gibs/worldview-design",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 6896,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "gibs",
            "worldview",
            "eosdis",
            "NASA",
            "design",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "data base",
            "information system",
            "systems engineering",
            "aerospace science",
            "data system",
            "nasa program",
            "nasa space program",
            "space flight",
            "earth science"
        ],
        "Software": "Worldview Design"
    },
    {
        "Update_Date": "2015-05-05",
        "Description": "This repository contains the generic branding with basic configuration for NASA Worldview.This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
        "Public Code Repo": "https://github.com/nasa-gibs/worldview-options-template",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa-gibs/worldview-options-template",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 176,
        "Categories": [
            "global imagery browse services",
            "branding",
            "earth data science",
            "gibs",
            "worldview",
            "eosdis",
            "NASA",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "data base",
            "information system",
            "systems engineering",
            "aerospace science",
            "data system",
            "nasa program",
            "nasa space program",
            "earth science",
            "space flight"
        ],
        "Software": "Worldview Options Template"
    },
    {
        "Update_Date": "2016-01-22",
        "Description": "The WinASSIST program uses a rule-oriented language to automatically generate input files for the SURE/WinSURE program. The user describes the failure behavior and recovery behavior of a fault-tolerant computer system in an abstract language. The WinASSIST program then automatically generates a corresponding semi-Markov model. The abstract language allows efficient description of large, complex systems. A one-page WinASSIST-language description may result in a semi-Markov model with thousands of states and transitions. The WinASSIST program also provides model-reduction techniques to facilitate efficient modeling of large systems.",
        "Public Code Repo": "https://github.com/nasa/WinASSIST",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/WinASSIST",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 14528,
        "Categories": [
            "Reliability Analysis",
            "Open Source",
            "Fault Tolerance",
            "Design and Integration Tools",
            "LaRC",
            "NASA",
            "Markov Model Generation"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "failure analysi",
            "programming language",
            "computer aided design",
            "systems analysi",
            "fault tolerance",
            "mathematical model",
            "markov processe",
            "computer systems performance",
            "computer systems design"
        ],
        "Software": "WinASSIST: (Windows Abstract Semi-Markov Specification Interface To The SURE Tool)"
    },
    {
        "Update_Date": "2016-01-22",
        "Description": "This package is used by aerospace flight software developers to predict the reliability of flight-critical computer processes.",
        "Public Code Repo": "https://github.com/nasa/WinSURE",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/WinSURE",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 24544,
        "Categories": [
            "Reliability Analysis",
            "Open Source",
            "Fault Tolerance",
            "Design and Integration Tools",
            "LaRC",
            "NASA",
            "Markov Model Generation"
        ],
        "Categories_NLP": [
            "reliability engineering",
            "aerospace engineering",
            "software development tool",
            "computer design",
            "flight control",
            "airborne/spaceborne computer",
            "reliability analysi",
            "reliability",
            "computer systems design",
            "computer program integrity"
        ],
        "Software": "Windows Semi-Markov Range Evaluator (WinSURE)"
    },
    {
        "Update_Date": "2011-09-13",
        "Description": "AXCS enables smartphones and other mobile devices to be utilized as a ground-based test bed for operations in extreme environments. For NASA, the technology is currently being used to evaluate hardware for balloon launches. The software's tool kits provide environmental and situational measurements, command and data handing (CD&H) functions, events timing, data logging, and communications with external devices. ",
        "Public Code Repo": "https://github.com/cboshuizen/AXCS",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/cboshuizen/AXCS",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 5392,
        "Categories": [
            "operations",
            "Open Source",
            "mobile devices",
            "ARC",
            "NASA",
            "Operations"
        ],
        "Categories_NLP": [
            "data acquisition",
            "communication equipment",
            "remote control",
            "command and control",
            "ground based control",
            "data system",
            "ground test",
            "balloon",
            "test stand",
            "ground operational support system"
        ],
        "Software": "Autonomous eXplorer Control System (AXCS)"
    },
    {
        "Update_Date": "2015-01-08",
        "Description": "Savors is a tool for security event monitoring, analysis, and response. The technology scales to real-world environments and uses high-end computing resources on-demand to compile behavior profiles that point to anomalous behavior. Auralization allows both monitoring and analysis to be performed in parallel and draws attention to critical events in one tool when utilizing another. Remote data access and response capabilities across distributed resources are enabled using grid computing that provides a secure, single sign-on environment.",
        "Public Code Repo": "https://github.com/pkolano/savors",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://pkolano.github.io/projects/savors.html",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 2816,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "adult",
            "computer information security",
            "distributed processing",
            "access control",
            "computational grid",
            "scientific visualization",
            "security",
            "parallel processing (computers)",
            "computation",
            "computer network"
        ],
        "Software": "Savors: A Scalable Aural-Visual Environment for Security Event Monitoring, Analysis, And Response"
    },
    {
        "Update_Date": "2013-04-26",
        "Description": "This innovation will query using a suite of operators in the Netmark/XDB query language to retrieve elements based on the absolute value of tags in the XML source. In an earlier version of the software, element retrieval was based solely on \"full-text\" term searches of the tags and their values. ",
        "Public Code Repo": "https://sourceforge.net/projects/darcxdb3",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://sourceforge.net/projects/darcxdb3",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 96848,
        "Categories": [
            "Data Warehousing",
            "Open Source",
            "Front-Ends",
            "Data Servers Processing and Handling",
            "ARC",
            "NASA",
            "XML"
        ],
        "Categories_NLP": [
            "data retrieval",
            "data base management system",
            "information retrieval",
            "software development tool",
            "information management",
            "linguistic",
            "indexes (documentation)",
            "data base",
            "query language",
            "data structure"
        ],
        "Software": "Netmark eXtensible DataBase, Data Access and Retrieval Composition (XDB3-DARC)"
    },
    {
        "Update_Date": "2016-01-11",
        "Description": "The libnfg software library describes how humans interact with their environment and with other humans. The tool provides a Monte Carlo analysis of user-specified \"network-form games,\" which are flexible modeling methodologies that combine Bayes nets and game theory to model complex systems.",
        "Public Code Repo": "http://ritchielee.net/wp-content/uploads/2015/11/libnfg-snap-1.0.zip",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://ritchielee.net/software/libnfg-snap-1-0/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 72544,
        "Categories": [
            "Open Source",
            "Crew and Life Support",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "monte carlo method",
            "library",
            "network analysi",
            "complex system",
            "software development tool",
            "systems analysi",
            "game theory",
            "bayes theorem",
            "petri net",
            "mathematical model"
        ],
        "Software": "Network-Form Game Software Library (libnfg)"
    },
    {
        "Update_Date": "2011-07-20",
        "Description": "AutoBayes uses extended Bayesian networks, a powerful symbolic system, and algorithm schemas to automatically generate efficient and customized programs for data analysis. It generates a standardized design document containing a graphical representation of the Bayesian network and of the details regarding the code's generation.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/autobayes",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/autobayes/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 26928,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "network analysi",
            "electric network",
            "data processing",
            "systems engineering",
            "systems analysi",
            "bayes theorem",
            "computer network",
            "computer aided design",
            "data reduction"
        ],
        "Software": "AutoBayes: Automatic Design of Customized Analysis Algorithms and Programs"
    },
    {
        "Update_Date": "2010-09-10",
        "Description": "MPD is a powerful and effective iterative algorithm for signal decomposition and feature extraction. The technology decomposes any signal into linear combinations of its dictionary elements, or \"atoms.\" ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mpd",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://c3.nasa.gov/dashlink/resources/125/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 400,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "decomposition",
            "pattern recognition",
            "pursuit tracking",
            "signal transmission",
            "signal analysi",
            "computation",
            "signal processing",
            "extraction"
        ],
        "Software": "Highly Scalable Matching Pursuit Signal Decomposition Algorithm (MPD)"
    },
    {
        "Update_Date": "2013-03-28",
        "Description": "The Hypatheon suite of software tools provide a searchable database capability for the specialized domain of formalized mathematics. The technology is designed to be a companion to a specific tool called PVS, which supports an emerging type of advanced software verification intended for safety-critical systems. Hypatheon aims to enhance PVS users' productivity by first indexing the mathematical theories rendered in the PVS specification language, then making their contents searchable by an interactive software tool.",
        "Public Code Repo": "https://github.com/nasa/pvslib/tree/master/Hypatheon-1.2",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-18232-1",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 7296,
        "Categories": [
            "Open Source",
            "LaRC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "domain",
            "proving",
            "data base management system",
            "software development tool",
            "productivity",
            "natural language (computers)",
            "linguistic",
            "program verification (computers)",
            "specification",
            "data base"
        ],
        "Software": "Hypatheon-Searchable Database Capability for Formalized Mathematics"
    },
    {
        "Update_Date": "2016-01-11",
        "Description": "This software allows the user to specify a time series over multiple variables to search within massive datasets. The tool will return a listing of events (a time series) from the database that spans multiple variables and is within a threshold distance from the query. Experiments on numerous real aviation datasets have demonstrated the algorithm's capability to uncover potential aircraft safety events (as validated by multiple aviation safety experts and airlines). ",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mts-search",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mts-search/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 240,
        "Categories": [
            "Open Source",
            "ARC",
            "Data and Image Processing",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "searching",
            "software development tool",
            "multivariate statistical analysi",
            "time series analysi",
            "safety",
            "real time operation",
            "data base",
            "query language",
            "aircraft safety"
        ],
        "Software": "Multivariate Time Series Search Capability to Identify Complex Patterns in Large Datasets"
    },
    {
        "Update_Date": "2012-03-31",
        "Description": "Providing a toolbox of functionality for MATLAB, this NASA-developed software detects precursor wiring faults (e.g., chafing) in shielded impedance-controlled cabling using measurements from off-the-shelf, time-domain reflectometry or vector-network analyzer hardware. The technology combines high-fidelity analytical physics models for signal propagation with fast Bayesian inference algorithms for intrinsic cable and fault-parameter retrieval.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/project/wiring",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/project/wiring/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 7504,
        "Categories": [
            "Open Source",
            "ARC",
            "NASA",
            "Electronics and Electrical Power"
        ],
        "Categories_NLP": [
            "algorithm",
            "detection",
            "reflectometer",
            "fault detection",
            "electric network",
            "optical measurement",
            "inference",
            "bayes theorem",
            "real time operation",
            "neural net"
        ],
        "Software": "Physics-Model-Based Wiring Fault Detection Toolbox for MATLAB"
    },
    {
        "Update_Date": "2016-07-26",
        "Description": "Desktop Exploration of Remote Terrain (DERT) is a software tool for exploring large Digital Terrain Models (DTMs) in 3D. It aids in understanding topography and spatial relationships of terrain features, as well as performing simple analysis tasks relevant to the planetary science community.",
        "Public Code Repo": "https://github.com/nasa/DERT",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/DERT",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 31696,
        "Categories": [
            "Space",
            "Open Source",
            "Air",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "ARC",
            "Environmental Science",
            "NASA",
            "Earth",
            "Exoplanet"
        ],
        "Categories_NLP": [
            "task complexity",
            "lunar topography",
            "software development tool",
            "terrain",
            "topography",
            "terrain analysi",
            "task"
        ],
        "Software": "Desktop Exploration of Remote Terrain (DERT)"
    },
    {
        "Update_Date": "2012-04-05",
        "Description": "GeoCam is a geospatial system for disaster response that consists of (1) low-cost consumer hardware (i.e., a digital camera or cell phone, position/orientation sensors, and an optional embedded controller) and (2) a Web-based workflow that enables images and other geo-referenced data to be shared and viewed in a variety of ways. GeoCam includes software that computes image location and provides for geo-rectification, KML-formatted geospatial data generation, image management, and geo-referenced data sharing.",
        "Public Code Repo": "https://github.com/geocam/geocamShare",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/geocam/geocamShare",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 272,
        "Categories": [
            "Earth",
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Space",
            "Air",
            "Exoplanet",
            "ARC",
            "NASA",
            "Environmental Science"
        ],
        "Categories_NLP": [
            "measuring instrument",
            "sensor",
            "cost effectivenes",
            "controller",
            "image analysi",
            "camera",
            "management system",
            "image processing",
            "low cost",
            "position (location)"
        ],
        "Software": "GeoCam, Version 2"
    },
    {
        "Update_Date": "2015-12-16",
        "Description": "The Kepler archive contains time-series data calibrated and reduced from detector pixels. The pipelined reduction includes the removal of time-series trends systematic to a spacecraft and its environment.",
        "Public Code Repo": "https://github.com/KeplerGO/PyKE/",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://keplerscience.arc.nasa.gov/software.html#pyke",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 11104,
        "Categories": [
            "Environmental Science",
            "Earth",
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Space",
            "Air",
            "Exoplanet",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "data reduction",
            "data acquisition",
            "data management",
            "data system",
            "time series analysi",
            "real time operation",
            "data processing",
            "trend",
            "data base"
        ],
        "Software": "Kepler Community Data Analysis Tools (PyKE)"
    },
    {
        "Update_Date": "2011-03-30",
        "Description": "EUROPA is a general-purpose, reusable, artificial intelligence software system. The tool generates plans for performing complex activities in parallel. Functionality includes the capability of verifying that a plan satisfies all constraints. ",
        "Public Code Repo": "https://github.com/nasa/europa",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/europa",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 122064,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "planning",
            "management planning",
            "software development tool",
            "project planning",
            "systems engineering",
            "artificial intelligence",
            "scheduling",
            "mission planning",
            "architecture (computers)",
            "europa 3 launch vehicle"
        ],
        "Software": "Extendable Uniform Remote Operations Planning Architecture (EUROPA) 2.1"
    },
    {
        "Update_Date": "2015-01-09",
        "Description": "The NASA Tensegrity Robotics Toolkit (NTRT) is a collection of C++  and MATLAB software modules for the modeling, simulation, and control of Tensegrity Robots.  Tensegrity Robots are a biologically inspired approach to building robots based on the tension networks of tensegrity structures, which have no rigid connections between elements.  The NTRT was created to enable: the rapid co-exploration of structures and controls in a physics based simulation environment; the development of tensegrity robotics algorithms such as structural analysis, kinematics, and motion planning; and the validation of the algorithms and controls on hardware prototypes of the tensegrity robots.\r\n\r\n",
        "Public Code Repo": "https://github.com/NASA-Tensegrity-Robotics-Toolkit/NTRTsim",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASA-Tensegrity-Robotics-Toolkit/NTRTsim",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 59904,
        "Categories": [
            "Open Source",
            "Autonomous Systems",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "algorithm",
            "computerized simulation",
            "robot dynamic",
            "simulation",
            "robotic",
            "kinematic",
            "structural analysi",
            "prototype",
            "robot",
            "robot control"
        ],
        "Software": "NASA Tensegrity Robotics Toolkit (NTRT) v1"
    },
    {
        "Update_Date": "2015-02-28",
        "Description": "This implementation of the Dantzig-Wolfe decomposition is built upon the GNU Linear Programming Kit. The technology provides a command-line tool for solving properly decomposed linear programs.",
        "Public Code Repo": "https://github.com/alotau/dwsolver",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasajoey/dwsolver",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 66784,
        "Categories": [
            "Open Source",
            "Aeronautics",
            "ARC",
            "Optimization",
            "NASA",
            "Linear Programming"
        ],
        "Categories_NLP": [
            "programming environment",
            "machine tool",
            "command and control",
            "systems engineering",
            "linear programming",
            "optimization"
        ],
        "Software": "Parallel Dantzig-Wolfe Decomposition"
    },
    {
        "Update_Date": "2015-12-03",
        "Description": "NASTRAN is a finite element analysis program that was originally developed for NASA in the late 1960s under U.S. government funding for the aerospace industry. The software suite provides engineers a comprehensive simulation solution for insight into structural behavior. NASTRAN source code is integrated in a number of different software packages, which are distributed by a range of companies.",
        "Public Code Repo": "https://github.com/nasa/NASTRAN-95",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/NASTRAN-95",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 235200,
        "Categories": [
            "Structural Analysis",
            "Open Source",
            "Design and Integration Tools",
            "FEA",
            "LaRC",
            "NASA",
            "NASTRAN",
            "CAD"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "finite element method",
            "aerospace engineering",
            "software development tool",
            "aerospace industry",
            "structural analysi",
            "nasa program",
            "government/industry relation",
            "industry",
            "simulation"
        ],
        "Software": "NASA STRuctrual ANalysis (NASTRAN)"
    },
    {
        "Update_Date": "2015-10-12",
        "Description": "VICAR, which stands for Video Image Communication And Retrieval, is a general purpose image processing software system that has been developed since 1966 to digitally process multi-dimensional imaging data. VICAR was developed primarily to process images from the Jet Propulsion Laboratory's unmanned planetary spacecraft. It is now used for a variety of other applications including biomedical image processing, cartography, earth resources, astronomy, and geological exploration. ",
        "Public Code Repo": "https://github.com/nasa/VICAR",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "http://www-mipl.jpl.nasa.gov/vicar_open.html",
        "Contributors": [
            "jpl_ott@jpl.nasa.gov"
        ],
        "Labor_Hours": 690832,
        "Categories": [
            "Image Processing",
            "Visualization",
            "Open Source",
            "Graphics",
            "Toolkit",
            "Data and Image Processing",
            "Analysis",
            "JPL",
            "NASA",
            "VICAR"
        ],
        "Categories_NLP": [
            "earth resource",
            "imaging technique",
            "data retrieval",
            "space exploration",
            "image analysi",
            "earth resources program",
            "image processing",
            "video data",
            "data processing",
            "spacecraft communication"
        ],
        "Software": "VICAR - Video Image Communication And Retrieval"
    },
    {
        "Update_Date": "2015-09-08",
        "Description": "IPv6 Extension module for Python that allows a user to enable IPv6 features not yet available for any Python versions.  Currently, it allows for IPv6 flow labels to be enabled for a given Python socket object.",
        "Public Code Repo": "https://github.com/nasa/ipv6_python",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/ipv6_python/wiki",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 368,
        "Categories": [
            "Flow Labels",
            "IPv6",
            "GRC",
            "Open Source",
            "Python",
            "Networking",
            "Sockets",
            "Data and Image Processing",
            "Network",
            "NASA",
            "IP"
        ],
        "Categories_NLP": [
            "three dimensional bodie",
            "computation",
            "human-computer interface",
            "user requirement",
            "systems analysi",
            "object-oriented programming",
            "image",
            "electronic module",
            "module",
            "simulation"
        ],
        "Software": "IPv6 Python Extension Module"
    },
    {
        "Update_Date": "2016-04-28",
        "Description": "The Channel  Emulator (CE) is a  software-based network testing  tool.  Its primary functions are providing data framing services, acting  as  a flexible  protocol gateway, and providing network emulation capabilities. \r\n\r\nThe software caneasily accept one protocol, optionally extract the payload, send out as different protocol, or encapsulate one in another.  It can also introduce delays up to deep space levels, and introduce bit errors and other link degradations.",
        "Public Code Repo": "https://github.com/nasa/channel-emulator",
        "License": [
            "NASA Open Source",
            "GPLv2"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/channel-emulator/wiki",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 27584,
        "Categories": [
            "System Testing",
            "Error",
            "GRC",
            "Open Source",
            "Delay",
            "Framing",
            "AOS",
            "Emulation",
            "Network",
            "Channel",
            "TM",
            "NASA",
            "IP"
        ],
        "Categories_NLP": [
            "data link",
            "error detection code",
            "data transmission",
            "telecommunication",
            "communication network",
            "error analysi",
            "protocol (computers)",
            "software development tool",
            "computer network",
            "channels (data transmission)"
        ],
        "Software": "Channel Emulator"
    },
    {
        "Update_Date": "2017-06-29",
        "Description": "The network-traffic-analysis-tools directory contains a collection of applications written in C to help both analyze and visualize MPTCP packet traces.",
        "Public Code Repo": "https://github.com/nasa/multipath-tcp-tools",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/multipath-tcp-tools",
        "Contributors": [
            "jishac@nasa.gov"
        ],
        "Labor_Hours": 3040,
        "Categories": [
            "Multipath",
            "MPTCP",
            "Plot",
            "Transmission Control Protocol",
            "Communication",
            "Analysis",
            "Network",
            "Plotting",
            "TCP",
            "network traffic analysis",
            "NASA",
            "IP"
        ],
        "Categories_NLP": [
            "network",
            "packets (communication)",
            "telecommunication",
            "multipath transmission",
            "packet switching",
            "protocol (computers)",
            "network analysi",
            "traffic"
        ],
        "Software": "Multipath TCP (MPTCP) Tools, Analytics, and Configurations"
    },
    {
        "Update_Date": "2015-09-03",
        "Description": "Earthdata Search is a web application developed by NASA EOSDIS to enable data discovery, search, comparison, visualization, and access across EOSDIS' Earth Science data holdings",
        "Public Code Repo": "https://github.com/nasa/earthdata-search",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://search.earthdata.nasa.gov",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 159792,
        "Categories": [
            "Earth Science",
            "Data Discovery",
            "Open Source",
            "OPeNDAP",
            "Remote Sensing",
            "Data Visualization",
            "Data Servers Processing and Handling",
            "GIBS",
            "EOSDIS",
            "NASA",
            "GSFC",
            "Data Filtering"
        ],
        "Categories_NLP": [
            "nasa program",
            "data acquisition",
            "information retrieval",
            "data mining",
            "earth observing system (eos)",
            "data system",
            "scientific visualization",
            "earth science",
            "geology",
            "earth observations (from space)"
        ],
        "Software": "Earthdata Search Web Application"
    },
    {
        "Update_Date": "2015-07-07",
        "Description": "This Python package will calculate beam blockage in polarimetric weather radar data using the specific differential phase (KDP) and fully self-consistent (FSC) methods of Timothy J. Lang et al. (2009; J. Atmos. Oceanic Technol.). This information can be used to correct the radar data when the radar beams intersect objects like trees, buildings, and mountains.",
        "Public Code Repo": "https://github.com/nasa/PyBlock",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/PyBlock/wiki",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 1984,
        "Categories": [
            "Earth Science",
            "Precipitation",
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Toolkit",
            "NASA",
            "MSFC",
            "Radar",
            "Meteorology",
            "GPM"
        ],
        "Categories_NLP": [
            "meteorological radar",
            "polarimetry",
            "radar data"
        ],
        "Software": "Python Polarimetric Radar Beam Blockage Calculation (PyBlock)"
    },
    {
        "Update_Date": "2015-07-07",
        "Description": "This is an object-oriented Python module that facilitates precipitation retrievals (e.g., hydrometeor type, precipitation rate, precipitation mass, particle size distribution information) from polarimetric radar data. It leverages existing open source radar software packages to perform all-in-one retrievals that are then easily visualized or saved using existing software.",
        "Public Code Repo": "https://github.com/nasa/DualPol",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/DualPol/wiki",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 592,
        "Categories": [
            "Earth Science",
            "Precipitation",
            "MSFC",
            "Radar",
            "Open Source",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Meteorology",
            "GPM",
            "Toolkit",
            "NASA"
        ],
        "Categories_NLP": [
            "hydrometeorology",
            "information retrieval",
            "particle size distribution",
            "radar data",
            "radar detection",
            "information system",
            "software development tool",
            "module",
            "precipitation particle measurement",
            "precipitation (meteorology)"
        ],
        "Software": "Python Interface to Dual-Pol Radar Algorithms (DualPol)"
    },
    {
        "Update_Date": "2015-07-07",
        "Description": "SingleDop is a software module, written in the Python programming language, that will retrieve two-dimensional low-level winds from either real or simulated Doppler radar data.",
        "Public Code Repo": "https://github.com/nasa/SingleDop",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/SingleDop/wiki",
        "Contributors": [
            "timothy.j.lang@nasa.gov"
        ],
        "Labor_Hours": 912,
        "Categories": [
            "Winds",
            "Earth Science",
            "Doppler",
            "toolkit",
            "Toolkit",
            "NASA",
            "Radar",
            "Meteorology"
        ],
        "Categories_NLP": [
            "wind (meteorology)",
            "radar data",
            "electronic module",
            "software development tool",
            "module",
            "programming language",
            "wind measurement",
            "wind velocity measurement",
            "wind profile",
            "doppler radar"
        ],
        "Software": "Single Doppler Retrieval Toolkit (SingleDop)"
    },
    {
        "Update_Date": "2015-04-13",
        "Description": "The product of this work is a communication protocol which allows microcontrollers to talk with eachother in a structured fashion. As such, it is embodied in C++ code that runs on the microcontroller. The software is not mission certified and is being used for demonstration and testing purposes only. The current goal of this project is to realease the software open source to enable community participation. We have external companies requesting that we release this software.",
        "Public Code Repo": "https://github.com/nasa/EADINLite",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/EADINLite/wiki",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 320,
        "Categories": [
            "Open Source",
            "Microcontroller",
            "GRC",
            "Communication",
            "NASA",
            "Propulsion",
            "Protocol"
        ],
        "Categories_NLP": [
            "interprocessor communication",
            "communication equipment",
            "communication network",
            "software development tool",
            "protocol (computers)",
            "evaluation",
            "c++ (programming language)",
            "program verification (computers)",
            "communication",
            "spacecraft communication"
        ],
        "Software": "EADIN Communication Protocol"
    },
    {
        "Update_Date": "2014-08-20",
        "Description": "The Open Scheduling and Planning Interface for Exploration (OpenSPIFe) is an integrated planning and scheduling toolkit based on hundreds of hours of expert observation, use, and refinement of state-of-the-art planning and scheduling technology for several applications within NASA. It was designed from the ground up with the needs of the operational user in mind, and it presents unique solutions to a number of problems common in other commercial and homegrown systems.\r\n\r\n",
        "Public Code Repo": "https://github.com/nasa/OpenSPIFe",
        "License": [
            "NASA Open Source",
            "ALv2",
            "EPL",
            "MPLv2",
            "LGPL"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/OpenSPIFe",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 254192,
        "Categories": [
            "scheduling",
            "Open Source",
            "Design and Integration Tools",
            "ARC",
            "NASA",
            "tool",
            "Planning"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "planning",
            "technology assessment",
            "user requirement",
            "technology utilization",
            "planetary surface",
            "artificial intelligence",
            "scheduling",
            "problem solving",
            "technology transfer"
        ],
        "Software": "Open Scheduling and Planning Interface for Exploration (OpenSPIFe)"
    },
    {
        "Update_Date": "2014-08-26",
        "Description": "T-MATS is open source software code. The Toolbox for the Modeling and Analysis of Thermodynamic Systems (T-MATS) is a Simulink toolbox intended for use in the modeling and simulation of thermodynamic systems and their controls. T-MATS contains generic thermodynamic and controls components that may be combined with a variable input iterative solver and optimization algorithm to create complex systems to meet the needs of a developer. Developement of this tool was completed on behalf of the NASA Aviation Safety Program's Vehicle Systems Safety Technologies (VSST) project located at the Glenn Research Center in Cleveland, OH. ",
        "Public Code Repo": "https://github.com/nasa/T-MATS",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/T-MATS",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 17600,
        "Categories": [
            "Newton-Raphson",
            "Aeronautics",
            "Jacobian Calculation",
            "Nozzle",
            "GRC",
            "numerical methods",
            "Open Source",
            "Jet",
            "control system",
            "TMATS",
            "tool",
            "Turbojet",
            "Aircraft Engine",
            "Turbofan",
            "Propulsion",
            "thermodynamics",
            "Compressor",
            "open source",
            "analysis",
            "Turbine",
            "NASA",
            "modeling",
            "Inlet"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "aircraft safety",
            "systems analysi",
            "automatic control",
            "systems simulation",
            "nonlinearity",
            "algorithm",
            "software development tool",
            "complex system",
            "simulation"
        ],
        "Software": "Toolbox for the Modeling and Analysis of Thermodynamic Systems (T-MATS)"
    },
    {
        "Update_Date": "2016-03-29",
        "Description": "This technology contributes several core modules to support safety case models and offers a service-based application programming interface that enables new model-processing capabilities to be plugged into the workbench.",
        "Public Code Repo": "https://github.com/nasa/CertWare",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/CertWare",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 1141072,
        "Categories": [
            "planning",
            "CertWare",
            "safety cases",
            "Open Source",
            "metrics",
            "Data and Image Processing",
            "project management",
            "LaRC",
            "NASA"
        ],
        "Categories_NLP": [
            "interface",
            "mathematical model",
            "human-computer interface",
            "computer systems design",
            "programming environment",
            "technology utilization",
            "electronic module",
            "software development tool",
            "module",
            "data processing"
        ],
        "Software": "CertWare Safety Case Workbench Software"
    },
    {
        "Update_Date": "2014-05-13",
        "Description": "The EEPROM File System (EEFS) is a simple, reliable file system for embedded systems. The primary purpose of the EEFS is to provide a file system abstraction for EEPROM or PROM memories that is simple, efficient, and can be proven to be reliable.  The EEFS can be used on embedded systems where a file system is needed to access data from EEPROM, PROM, or RAM memory, but otherwise might not have the resources to deploy a full file system such as the MSDOS file system. The EEPROM file system can also be used in systems where the ability to dump, patch, and diagnose files is required. ",
        "Public Code Repo": "https://github.com/nasa/eefs",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/eefs/",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 3552,
        "Categories": [
            "file system",
            "Open Source",
            "eefs",
            "EEPROM File System Project",
            "Data Servers Processing and Handling",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data storage",
            "data processing equipment",
            "earth resource",
            "memory (computers)",
            "computer storage device",
            "systems engineering",
            "data system",
            "memory",
            "file maintenance (computers)"
        ],
        "Software": "EEPROM File System"
    },
    {
        "Update_Date": "2014-05-05",
        "Description": "The OSAL library isolates embedded application software from a Real-Time Operating System (RTOS). The technology provides a well-defined, generic interface to RTOS services; a generic interface to hardware services; and an implementation for several current RTO systems. By using the library, an embedded application can remain portable among multiple operating systems on multiple platforms. Please visit the following URL for additional information: http://opensource.gsfc.nasa.gov/projects/osal/",
        "Public Code Repo": "https://github.com/nasa/osal",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/osal",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 27296,
        "Categories": [
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "operating system abstraction layer library",
            "application",
            "NASA",
            "GSFC",
            "flight software systems"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "response time (computers)",
            "interface",
            "library",
            "information system",
            "distributed processing",
            "information retrieval",
            "real time operation",
            "hardware",
            "operating systems (computers)"
        ],
        "Software": "Operating System Abstraction Layer (OSAL)"
    },
    {
        "Update_Date": "2013-09-28",
        "Description": "39A is the software used to power the 2013 International Space Apps Challenge, a global hackathon focusing on space technology and issues.",
        "Public Code Repo": "https://github.com/nasa/39A",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "KSC",
        "External Link": "https://github.com/nasa/39A",
        "Contributors": [
            "jason.duley@nasa.gov"
        ],
        "Labor_Hours": 24496,
        "Categories": [
            "operations",
            "2013",
            "International Space Apps Challenge",
            "NASA",
            "Hackathon",
            "software"
        ],
        "Categories_NLP": [
            "space program",
            "technology",
            "aerospace engineering",
            "international cooperation",
            "software development tool",
            "systems engineering",
            "aerospace technology transfer",
            "aerospace science",
            "conference"
        ],
        "Software": "39A"
    },
    {
        "Update_Date": "2013-01-13",
        "Description": "The Vehicle Sketch Pad (VSP) is an aircraft geometry tool for rapid evaluation of advanced design concepts. Fast and accurate geometry modeling allows the designer to use more complex analysis methods earlier in the design process and reduces reliance on empiricism in conceptual design. VSP includes tools to model and export the internal structural layout.",
        "Public Code Repo": "https://github.com/nasa/OpenVSP",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/OpenVSP",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 87968,
        "Categories": [
            "Open Source",
            "open source",
            "Design and Integration Tools",
            "LaRC",
            "NASA",
            "tool",
            "repository",
            "3D model"
        ],
        "Categories_NLP": [
            "aircraft design",
            "layout",
            "structural design",
            "systems engineering",
            "design analysi",
            "structural analysi",
            "systems analysi",
            "evaluation",
            "parameterization",
            "computer aided design"
        ],
        "Software": "Vehicle Sketch Pad (VSP)"
    },
    {
        "Update_Date": "2011-12-28",
        "Description": "OpenMDAO version 0.1 is the initial version of the next generation Multidisciplinary Design Analysis and Optimization (MDAO) open source framework.   OpenMDAO is the open source framework developed by NASA that will be accessible via an open source website to reach the entire broad based MDAO community to facilitate advancing the science of MDAO.  MDAO covers a vast set of capabilities, including a flexible framework and state of the art discipline codes.  This innovation relates specifically to the framework.  OpenMDAO provides the core software infrastructure to integrate multidisciplinary variable fidelity tools and enable design, analysis, and optimization of complex systems.  Currently, the OpenMDAO version 0.1 functionalities include component linking, data passing, driver interface, and lazy evaluation.  This initial basic capability of the framework is sufficient for users to run and optimize their analysis after they integrate their specific component codes.  As OpenMDAO evolves, the following capabilities will be included in the framework:  interprocess communications, error handling, user interfaces, geometry application program interfaces (APIs), plug-in interfaces, utilities to wrap tools, versioning, and parallel processing support.  To be clear, the framework will enable the integration of, but will not include: optimizers, solvers, visualization tools, custom data types, script components, and discipline codes.  AEROSPACE:  To meet the present and future economic and environmental challenges facing air transportation, aviation design must expand its focus from today's conventional \"wing-body-tail\" aircraft to more advanced vehicles.   The ability to design revolutionary aircraft to improve mobility and air transport efficiency is of paramount importance to the national economy, along with reducing our environmental impact and supporting national defense.   Technologies such as the one disclosed here incorporate progressively more sophisticated computational models and methods, enabling future aircraft designs today.",
        "Public Code Repo": "https://github.com/nasa/OpenMDAO-Framework",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/OpenMDAO-Framework",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 102336,
        "Categories": [
            "Open Source",
            "open source",
            "Vehicle Management (Space/Air/Ground)",
            "analytics",
            "NASA",
            "GRC",
            "code"
        ],
        "Categories_NLP": [
            "aircraft design",
            "systems integration",
            "technology assessment",
            "software development tool",
            "complex system",
            "technology utilization",
            "design analysi",
            "systems analysi",
            "multidisciplinary design optimization",
            "model"
        ],
        "Software": "Open MDAO Version 0.1: The Next Generation Multidisciplinary Design Analysis and Optimization (MDAO) Open Source Framework"
    },
    {
        "Update_Date": "2011-12-23",
        "Description": "NASA World Wind is an intuitive software application supporting the interactive exploration of a variety of data presented within a geospatial context. The technology offers a 3D graphics user experience with seamless, integrated access to a variety of online data sources via open-standards protocols. ",
        "Public Code Repo": "https://github.com/nasa/World-Wind-Java",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/World-Wind-Java",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 944864,
        "Categories": [
            "3D",
            "Open Source",
            "imagery",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "ARC",
            "NASA",
            "SDK"
        ],
        "Categories_NLP": [
            "data transmission",
            "data acquisition",
            "java (programming language)",
            "standard",
            "access control",
            "protocol (computers)",
            "technology utilization",
            "computer graphic",
            "virtual reality",
            "nasa program"
        ],
        "Software": "Java World Wind"
    },
    {
        "Update_Date": "2011-11-29",
        "Description": "Vision Workbench (VW) is a modular, extensible computer vision framework that supports a range of tasks, including automated science and engineering analysis, large satellite image processing, and 2D/3D environment reconstruction. The framework provides a rapid C++ development environment as well as a flexible, multi-platform system to deploy computer vision applications. The module interface allows new capabilities to be rapidly integrated, and the dataflow architecture allows image-processing pipelines to be quickly developed and reconfigured. ",
        "Public Code Repo": "https://github.com/nasa/visionworkbench",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/visionworkbench",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 93856,
        "Categories": [
            "Open Source",
            "computer vision library",
            "imagery",
            "image processing",
            "ARC",
            "NASA",
            "Data and Image Processing"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "data processing",
            "systems engineering",
            "image analysi",
            "parallel processing (computers)",
            "computer component",
            "architecture (computers)",
            "image processing",
            "computer systems design",
            "computer vision"
        ],
        "Software": "NASA Vision Workbench (VW), Version 3"
    },
    {
        "Update_Date": "2018-02-04",
        "Description": "Apache OODT is NASA's first project to be stewarded at the open source Apache Software Foundation. OODT is middleware for information integration and for science data processing and retrieval. It provides components including file management, workflow management, resource management, and automated remote data acquisition, file crawling and ingestion, and science algorithm wrapping and integration.",
        "Public Code Repo": "http://oodt.apache.org/",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "http://oodt.apache.org",
        "Contributors": [
            "chris.a.mattmann@jpl.nasa.gov"
        ],
        "Labor_Hours": 124368,
        "Categories": [
            "science",
            "management",
            "integration",
            "algorithm",
            "workflow",
            "ingestion",
            "file",
            "remote data",
            "automated",
            "acquisition",
            "resource",
            "crawling",
            "NASA",
            "wrapping"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data management",
            "information retrieval",
            "data base management system",
            "resources management",
            "algorithm",
            "information system",
            "data processing",
            "file maintenance (computers)",
            "information management"
        ],
        "Software": "Apache OODT"
    },
    {
        "Update_Date": "2010-11-19",
        "Description": "Save is a high-availability framework that manages IP addresses shared between multiple servers. It also monitors the health of those servers to determine which one should be actively servicing requests at any given time. Synchronization mechanisms allow configuration files to be kept consistent between systems and also allow commands to be executed across all servers of a particular type. Archival mechanisms provide automatic version control of configuration files to aid in recovery in case of errant configuration.",
        "Public Code Repo": "https://sourceforge.net/projects/save-ha",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://save-ha.sourceforge.net",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 224,
        "Categories": [
            "validation",
            "Open Source",
            "high availability",
            "systems",
            "archive",
            "administration",
            "Data Servers Processing and Handling",
            "framework",
            "health",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "command and control",
            "time optimal control",
            "synchronism",
            "systems analysi",
            "real time operation",
            "control systems design",
            "time dependence",
            "file maintenance (computers)"
        ],
        "Software": "Synchronization, Archival, Validation, and IP Exchange (Save)"
    },
    {
        "Update_Date": "2014-11-18",
        "Description": "An update to software originally named DAVEtools 0.5, this software-based technology is used for manipulating standard Dynamic Aerospace Vehicle Exchange Markup Language (DAVE-ML) models. The improved technology embeds the necessary initialization data into a data structure to keep the MATLAB workspace uncluttered and creates Simulink models from a generated MATLAB script.",
        "Public Code Repo": "https://github.com/nasa/DAVEtools",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/DAVEtools/wiki",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 19024,
        "Categories": [
            "Open Source",
            "Standards",
            "Simulation",
            "LaRC",
            "NASA",
            "Data and Image Processing",
            "Modeling"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "software development tool",
            "aerospace engineering",
            "dynamic model",
            "document markup language",
            "data system",
            "aerospace vehicle",
            "mathematical model",
            "aircraft model",
            "aerospace system"
        ],
        "Software": "Java-Based Software Tool for Dynamic Aerospace Vehicle Exchange Markup Files"
    },
    {
        "Update_Date": "2015-02-10",
        "Description": "The Trick Simulation environment is a generic simulation toolkit used for constructing and running simulations.  The Trick 13 Interface Code Generator (ICG), a utility that provides math model class and structure layout data, has been rewritten and is based off of the open source clang/llvm project.  The Trick numerical integrators have been replaced with a common set of integrators.  Several core components are enhanced from previous Trick versions.  Trick 13 is now Open Source software and can be downloaded at http://code.nasa.gov/#/",
        "Public Code Repo": "https://github.com/nasa/Trick",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/Trick/wiki",
        "Contributors": [
            "jsc-ttco-software-request@mail.nasa.gov"
        ],
        "Labor_Hours": 143904,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "Simulation",
            "Framework",
            "NASA",
            "JSC"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "environment model",
            "astronomical model",
            "programming environment",
            "environment simulation",
            "software development tool",
            "mathematical model",
            "systems simulation",
            "object-oriented programming",
            "simulation"
        ],
        "Software": "Trick 13 Simulation Environment"
    },
    {
        "Update_Date": "2017-02-20",
        "Description": "This software supports FMI based model exchange with Trick based simulations. The Functional Mockup Interface (FMI) standard was developed in partnership with governmental, academic and commercial entities in the European Union. This standard is used to support the exchange of component models for complex system simulations throughout Europe and the United States. Trick simulations are used all across NASA for simulations that support human spaceflight activities. However, until now, there were no means to use FMI based models in a Trick based simulation or a method for providing Trick based models that were FMI compliant. This software provides implementation software to do both. There are two principal components to the software: A C based software implementation for wrapping Trick based C models that provide an FMI compliant interface; A collection of C++ classes that can be used in a Trick based simulation to use an FMI compliant model (FMU).",
        "Public Code Repo": "https://github.com/nasa/TrickFMI",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/TrickFMI/wiki",
        "Contributors": [
            "edwin.z.crues@nasa.gov"
        ],
        "Labor_Hours": 3728,
        "Categories": [
            "Model Exchange",
            "Simulation",
            "Framework",
            "NASA",
            "JSC"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "europe",
            "standard",
            "international cooperation",
            "software development tool",
            "c (programming language)",
            "c++ (programming language)",
            "systems simulation",
            "mathematical model",
            "simulation"
        ],
        "Software": "TrickFMI"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "MMM-Py reads, analyzes, and displays three-dimensional national mosaicked reflectivity data produced by NOAA's National Severe Storms Laboratory (NSSL). MMM-Py can read MRMS mosaics from either their unique binary format or their converted NetCDF format; it can also read and properly interpret the current mosaic design (4 regional tiles) as well as mosaics produced prior to late July 2013 (8 tiles). The technology can easily stitch multiple tiles together to provide a larger regional or national picture of precipitating weather systems. Composites, horizontal/vertical cross-sections, and combinations thereof are easily displayed using as little as one line of code.",
        "Public Code Repo": "https://github.com/nasa/MMM-Py",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/MMM-Py",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 2048,
        "Categories": [
            "MRMS",
            "Open Source",
            "NMQ",
            "Visualization",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Toolkit",
            "NASA",
            "MSFC",
            "Radar",
            "Analysis"
        ],
        "Categories_NLP": [
            "mosaic",
            "format",
            "systems engineering",
            "cross section",
            "design analysi"
        ],
        "Software": "Marshall MRMS Mosaic Python Toolkit (MMM-Py)"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "This toolkit will read geolocated brightness temperature data (in ASCII format) from any flight of the AMPR airborne instrument.  A python script will pull out timing, brightness temperatures, and other information  from each channel/geolocation and store them as attributes using the appropriate type of numpy array. The approach consists of ingesting the entire file as a text string and then parsing and converting as necessary. The file is read and the data are populated when the class is instantiated with the full path and name of an AMPR file. Numerous visualization methods are provided, including track plots, strip charts, and Google Earth KMZs. In addition, polarization deconvolution is available.",
        "Public Code Repo": "https://github.com/nasa/PyAMPR",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/PyAMPR",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 2288,
        "Categories": [
            "Precipitation",
            "Visualization",
            "MSFC",
            "Open Source",
            "Radiometer",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Toolkit",
            "Analysis",
            "Airborne",
            "NASA",
            "AMPR"
        ],
        "Categories_NLP": [
            "atmospheric temperature",
            "microwave radiometer",
            "brightness temperature",
            "format",
            "remote sensor",
            "data processing",
            "microwave",
            "scientific visualization",
            "radiometer",
            "precipitation (meteorology)"
        ],
        "Software": "Python Advanced Microwave Precipitation Radiometer Data Toolkit (PyAMPR)"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "PyTDA, an MSFC-based implementation of the National Center for Atmospheric Research (NCAR) Turbulence Detection Algorithm (NTDA), can be used for convective-scale analysis, situational awareness, and forensic meteorology. The software provides Python functions that will estimate turbulence from Doppler radar data.   It is written in the Python programming language.",
        "Public Code Repo": "https://github.com/nasa/PyTDA",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/PyTDA",
        "Contributors": [
            "msfc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 1648,
        "Categories": [
            "MSFC",
            "Radar",
            "Open Source",
            "Doppler",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "Turbulence",
            "Toolkit",
            "Analysis",
            "NASA"
        ],
        "Categories_NLP": [
            "detection",
            "meteorology",
            "radar data",
            "meteorological radar",
            "radar detection",
            "doppler radar",
            "algorithm",
            "atmospheric turbulence",
            "data processing",
            "clear air turbulence"
        ],
        "Software": "Python Turbulence Detection Algorithm (PyTDA)"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "A collection of utility programs and reusable subroutine libraries supports computational fluid dynamics, particularly on multiblock structured grids. The technology is applicable to all flight regimes-subsonic, transonic, supersonic, and hypersonic. ",
        "Public Code Repo": "https://sourceforge.net/projects/cfdutilities/files/latest/download",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://sourceforge.net/projects/cfdutilities/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 1504,
        "Categories": [
            "optimization",
            "Open Source",
            "data",
            "library",
            "CFD",
            "Design and Integration Tools",
            "interpolation",
            "ARC",
            "application",
            "NASA"
        ],
        "Categories_NLP": [
            "library",
            "subroutine",
            "grid generation (mathematics)",
            "grid",
            "unstructured grids (mathematics)",
            "aerodynamic",
            "computational fluid dynamic",
            "software development tool",
            "fluid dynamic",
            "computational grid"
        ],
        "Software": "Computational Fluid Dynamics (CFD) Utility Software Library"
    },
    {
        "Update_Date": "2015-05-04",
        "Description": "The Crisis Mapping Toolkit (CMT) is a collection of tools for processing geospatial data (images, satellite data, etc.) into cartographic products that improve understanding of large-scale crises, such as natural disasters. The cartographic products produced by CMT include flood inundation maps, maps of damaged or destroyed structures, forest fire maps, population density estimates, etc. CMT is designed to rapidly process large-scale data using Google Earth Engine and other geospatial data systems. ",
        "Public Code Repo": "https://github.com/nasa/CrisisMappingToolkit",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/CrisisMappingToolkit",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 9392,
        "Categories": [
            "data processing",
            "map",
            "Open Source",
            "geospatial data systems",
            "Environmental Science (Earth, Air, Space, Exoplanet)",
            "CMT",
            "crisis mapping toolkit",
            "Google Earth",
            "ARC",
            "NASA"
        ],
        "Categories_NLP": [
            "disaster",
            "remote sensing",
            "thematic mapping",
            "mapping",
            "photomapping",
            "forest",
            "population",
            "topography",
            "flood",
            "satellite observation"
        ],
        "Software": "Crisis Mapping Toolkit (CMT) v1"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "In offline mode, MKAD performs automated anomaly detection on large heterogeneous data sets that contain both discrete symbols and continuous data streams.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/mkad",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mkad/",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 9648,
        "Categories": [
            "MKAD",
            "System Testing",
            "Open Source",
            "multiple kernel anomaly detection",
            "algorithm",
            "one class support vector machine",
            "FOQA",
            "ARC",
            "OCSVM",
            "NASA"
        ],
        "Categories_NLP": [
            "detection",
            "data reduction",
            "kernel function",
            "symbol",
            "digital data",
            "data structure",
            "algorithm",
            "data processing",
            "data flow analysi",
            "anomaly"
        ],
        "Software": "Multiple Kernel Anomaly Detection (MKAD) Algorithm"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "IRC provides robust interactive and distributed control/monitoring of remote instruments. The IRC architecture combines the processing capabilities of Java with the power of XML to express hierarchical data in a human-readable, platform-independent format. For additional information, please visit: http://opensource.gsfc.nasa.gov/projects/IRC/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/IRC/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/IRC/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 92736,
        "Categories": [
            "framework",
            "Open Source",
            "IRC",
            "control",
            "monitoring",
            "NASA",
            "GSFC",
            "Operations"
        ],
        "Categories_NLP": [
            "data acquisition",
            "java (programming language)",
            "format",
            "remote control",
            "data processing equipment",
            "engine monitoring instrument",
            "data processing",
            "flight instrument",
            "architecture (computers)",
            "monitor"
        ],
        "Software": "Interoperable Remote Component (IRC)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Java Astrodynamics Toolkit (JAT) is a collection of Java components that aid flight dynamics engineers in performing space mission design; trajectory optimization; and spacecraft navigation, attitude-determination, and control systems analysis. Current capabilities include orbit propagation, orbit determination, maneuver planning, spacecraft attitude simulation, and 3D orbit and attitude visualization.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/JAT/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/JAT/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 43872,
        "Categories": [
            "space mission design",
            "JAT",
            "Operations",
            "simulation",
            "Open Source",
            "astrodynamics",
            "navigation",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "spacecraft maneuver",
            "trajectory analysi",
            "spacecraft control",
            "space navigation",
            "space flight",
            "spacecraft",
            "interplanetary flight",
            "trajectory optimization",
            "spacecraft trajectory",
            "mission planning"
        ],
        "Software": "Java Astrodynamics Toolkit (JAT)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Metadata Check is a command-line tool to check Earth Observing System (EOS) metadata with a metadata descriptor. For more information, please visit: http://opensource.gsfc.nasa.gov/projects/metacheck/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/metacheck/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/metacheck/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 4928,
        "Categories": [
            "Open Source",
            "metadata",
            "Data Servers Processing and Handling",
            "data validation",
            "NASA",
            "GSFC",
            "EOS"
        ],
        "Categories_NLP": [
            "information system",
            "on-line programming",
            "data management",
            "command and control",
            "earth (planet)",
            "earth observing system (eos)",
            "systems analysi",
            "line spectra",
            "information management",
            "on-line system"
        ],
        "Software": "Metadata Check"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "MYSTRAN is a Finite Element Analysis (FEA) processor.   MYSTRAN takes NASTRAN data decks as input and processes them to generate results files based on the inputs.   NASTRAN was originally developed at NASA GSFC in the 1960's.   The input files describe the mechanical nature of some piece of hardware and the loads or driving inputs that cause some reaction.   With this input MYSTRAN computes the responses to the driving inputs.  The theory and research for FEA analysis has been developed over decades.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/mystran/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/mystran/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 126144,
        "Categories": [
            "computer aided engineering",
            "Open Source",
            "model analysis",
            "FEA",
            "Finite Element Analysis",
            "NASA",
            "Data and Image Processing",
            "GSFC"
        ],
        "Categories_NLP": [
            "finite element method",
            "dynamic structural analysi",
            "nastran",
            "loads (forces)",
            "structural analysi",
            "human reaction",
            "aerodynamic load"
        ],
        "Software": "MYSTRAN"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "RETRO offers methods and techniques for information retrieval (IR), including vector retrieval and probabilistic retrieval. The technology can be downloaded at: http://opensource.gsfc.nasa.gov/projects/RETRO/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/RETRO/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/RETRO/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 12736,
        "Categories": [
            "requirements tracing",
            "Open Source",
            "RETRO",
            "information retrieval",
            "Data and Image Processing",
            "NASA",
            "GSFC",
            "software development"
        ],
        "Categories_NLP": [
            "infrared radiation",
            "vectors (mathematics)",
            "information system",
            "information retrieval",
            "target acquisition",
            "target recognition",
            "target",
            "information management",
            "infrared imagery",
            "vector analysi"
        ],
        "Software": "Requirements Tracing On Target (RETRO)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Worldview is a software tool designed for interactively browsing and downloading imagery from NASA's Earth observing satellites.  Building upon a set of open source mapping and user interface libraries, it provides an environment to visually discover interesting phenomena as observed by NASA satellites, then download the data for further analysis.  It was originally designed to address the needs of the near real time applications community to provide relevant information for time-critical scenarios such as wildfire and flood management.  As such, satellite imagery is available to be viewed in Worldview within four hours of observation, the imagery can be viewed in its highest, or native, resolution, and the imagery can be panned and zoomed rapidly through space and time to find the most relevant/cloud-free/etc information available.",
        "Public Code Repo": "https://github.com/nasa-gibs/worldview",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/worldview/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 86144,
        "Categories": [
            "Open Source",
            "imagery",
            "satellite",
            "data visualization",
            "NASA",
            "Data and Image Processing",
            "GSFC"
        ],
        "Categories_NLP": [
            "remote sensing",
            "software development tool",
            "earth observing system (eos)",
            "mapping",
            "satellite imagery",
            "satellite observation",
            "graphical user interface",
            "data reduction",
            "temporal resolution",
            "earth observations (from space)"
        ],
        "Software": "Worldview satellite imagery browsing and downloading tool"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Architecture Adaptive Computing Environment (ACE) is a parallel computing language, compiler, and runtime library. The purpose of ACE is to allow a programmer to more easily write parallel programs for a wide variety of parallel computer architectures.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ace/#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ace/aCe_Distro_Notes.txt",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 113456,
        "Categories": [
            "Open Source",
            "Design and Integration Tools",
            "Parallel Programming",
            "ANS C",
            "NASA",
            "C",
            "GSFC"
        ],
        "Categories_NLP": [
            "library",
            "subroutine",
            "fortran",
            "digital computer",
            "high level language",
            "computation",
            "compiler",
            "architecture (computers)",
            "parallel processing (computers)",
            "parallel computer"
        ],
        "Software": "Architecture Adaptive Computing Environment (ACE)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Core Flight Executive (cFE) provides software bus, time, event, executive, table, and file services, and it defines the application programming interface (API) for each set function. Applications subscribe to cFE services at runtime, making system modifications easy. Facilitating rapid prototyping, new applications can be compiled, linked, loaded, and started without requiring the entire system to be rebuilt.",
        "Public Code Repo": "https://sourceforge.net/projects/coreflightexec",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/cfe/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 235312,
        "Categories": [
            "environment",
            "Open Source",
            "Vehicle Management (Space/Air/Ground)",
            "application",
            "programming",
            "NASA",
            "GSFC",
            "core flight"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "response time (computers)",
            "avionic",
            "software development tool",
            "systems engineering",
            "airborne/spaceborne computer",
            "real time operation",
            "prototype",
            "operating systems (computers)",
            "channels (data transmission)"
        ],
        "Software": "Core Flight Executive (cFE)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "EMTG is a global trajectory optimization tool intended for interplanetary mission design. The technology automatically searches for the optimal sequence of planetary flybys and propulsive maneuvers for maximizing payload delivery at a destination. Designed for minimal user oversight, EMTG requires only start location, destination, allowable launch-date range, allowable flight time, and minimal spacecraft hardware information.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/emtg/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/emtg/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 18000,
        "Categories": [
            "trajectory design",
            "Open Source",
            "space science",
            "Aeronautics",
            "interplanetary space",
            "NASA",
            "GSFC"
        ],
        "Categories_NLP": [
            "position (location)",
            "trajectory optimization",
            "space mission",
            "payload",
            "trajectory",
            "spacecraft maneuver",
            "spacecraft trajectory",
            "mission planning",
            "optimization",
            "launching"
        ],
        "Software": "Evolutionary Mission Trajectory Generator (EMTG)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "This software library provides uniform access to HDF-EOS2 and HDF-EOS5 files through one set of application program interface (API) calls. Without the library, programs would have to be written twice to cover both HDF-EOS2 and HDF-EOS5 files. http://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php#software",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 3328,
        "Categories": [
            "HDF-EOS5",
            "HDF-EOS2",
            "Open Source",
            "Data Servers Processing and Handling",
            "EOSDIS",
            "validator",
            "NASA",
            "GSFC",
            "EOS"
        ],
        "Categories_NLP": [
            "interface",
            "library",
            "human-computer interface",
            "operating systems (computers)",
            "computer storage device",
            "compatibility",
            "fortran",
            "software development tool",
            "access control",
            "file maintenance (computers)"
        ],
        "Software": "HDF-EOS2 and HDF-EOS5 Compatibility Library"
    },
    {
        "Update_Date": "2016-02-01",
        "Description": "This software retrieves a set of atmospheric/surface/instrument parameters from a simultaneous fit to spectra from multiple absorption bands. The software uses an iterative, non-linear retrieval technique (optimal estimation). After the retrieval process has converged, the software performs an error analysis. The products of the software include all quantities needed to understand the information content of the measurement, its uncertainty, and its dependence on interfering atmospheric properties. Spectra from ground-based or space-based measurement with arbitrary observation geometry can be analyzed. The retrieved parameters can be chosen from a large set of atmospheric (e.g., volume mixing ratio of gases or aerosol optical depth), surface (e.g., Lambertian reflection), and instrument (e.g., spectral shift or instrument line shape parameters) parameters. The software uses an accurate, state-of-the-art, multiple-scattering radiative transfer code combined with an efficient polarization approximation to simulate measured spectra. The software enables fast and highly accurate simulations of broad spectral ranges by an optional parallelization of the frequency processing in the radiative transfer model. The framework was written with flexibility in mind. New algorithms and instruments are added by creating additional classes that implement the defined interfaces. Bindings are available for both Python and Lua.",
        "Public Code Repo": "https://github.com/nasa/RtRetrievalFramework",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa/RtRetrievalFramework",
        "Contributors": [
            "james.mcduffie@jpl.nasa.gov"
        ],
        "Labor_Hours": 1764272,
        "Categories": [
            "Earth Science",
            "Forward Model",
            "Retrieval",
            "Radiative Transfer",
            "Python",
            "Atmosphere",
            "C++",
            "Framework",
            "Lua",
            "NASA"
        ],
        "Categories_NLP": [
            "spectrum analysi",
            "visible spectrum",
            "optical thicknes",
            "geometry",
            "aerosol",
            "radiative transfer",
            "spectral band",
            "absorption spectra",
            "algorithm",
            "surface propertie"
        ],
        "Software": "RT Retrieval Framework"
    },
    {
        "Update_Date": "2016-02-05",
        "Description": "This is a flexible LaTeX document template designed to separate content from styling and remove all of the grunt work associated with creating professional documents. Can be used for technical reports as well as public documents such as research papers and conference papers.",
        "Public Code Repo": "https://github.com/nasa/nasa-latex-docs",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/nasa-latex-docs/wiki",
        "Contributors": [
            "wahab.alshahin@nasa.gov"
        ],
        "Labor_Hours": 944,
        "Categories": [
            "LaTeX",
            "Papers",
            "Documents",
            "NASA",
            "Reports",
            "TeX"
        ],
        "Categories_NLP": [
            "document",
            "nasa program",
            "conference"
        ],
        "Software": "NASA LaTeX Docs"
    },
    {
        "Update_Date": "2016-04-05",
        "Description": "This web application allows inventories of assets to be managed. Assets along with their specifications are added to the system and then used by users via a check-in/check-out function. The inventory can be browsed by category or using search. Users are given various roles within the system to allow them to perform certain functions such as view-only, check-in/check-out, modify, and full-control. Inventory managers can add and track detailed information on all inventory assets including manufacturer, storage location, custom attributes, and relationships with other assets. Assets can be found by browsing by category, search, location, or current user. Assets are checked out to specified locations by users.",
        "Public Code Repo": "https://github.com/nasa/isle",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/isle",
        "Contributors": [
            "bruffridge@nasa.gov"
        ],
        "Labor_Hours": 25968,
        "Categories": [
            "Inventory",
            "NASA",
            "PHP",
            "Web",
            "MySQL"
        ],
        "Categories_NLP": [
            "position (location)",
            "information system",
            "information retrieval",
            "inventory",
            "user requirement",
            "systems engineering",
            "automatic control",
            "management information system",
            "information management",
            "inventory control"
        ],
        "Software": "Inventory System for Lab Equipment (ISLE)"
    },
    {
        "Update_Date": "2016-06-16",
        "Description": "Framework for mapping physical input devices (joysticks, gaming controllers, custom control panels, etc) to application-specific virtual controller interfaces. Pattern for writing device-independent code.",
        "Public Code Repo": "https://github.com/nasa/idf",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/idf",
        "Contributors": [
            "jsc-ttco-software-request@mail.nasa.gov"
        ],
        "Labor_Hours": 7664,
        "Categories": [
            "Open Source",
            "Framework",
            "NASA",
            "Operations",
            "JSC"
        ],
        "Categories_NLP": [
            "symbol",
            "interface",
            "control systems design",
            "control equipment",
            "controller",
            "systems analysi",
            "dynamic control",
            "human-computer interface",
            "optimal control",
            "numerical control"
        ],
        "Software": "Input Device Framework (IDF)"
    },
    {
        "Update_Date": "2016-07-13",
        "Description": "The Composite Damage (CompDam) Progressive Damage Analysis software is developed for the prediction of damage onset, damage progression and structural collapse of structures manufactured of fiber-reinforced plastic laminates. The emphasis has been on development of an analysis capability for application at the structural level. Hence, modeling of damage progression is undertaken at the meso-scale, where each ply of a laminate is represented as a homogenous orthotropic continuum. All of the composite damage mechanisms (matrix cracking, fiber breaking and kinking, and delamination) and their interactions are represented. The CompDam software is implemented as user written subroutines for use with the Abaqus commercial finite element code.  Input for CompDam includes ply-level material properties, and interface properties obtained from standard material characterization tests.  The output from CompDam includes damage variables associated with each damage mode. These damage variables describe the evolution of damage and are used to generate updated structural constitutive matrices and load redistribution as damage evolves. ",
        "Public Code Repo": "https://github.com/nasa/CompDam_DGD",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/CompDam_DGD",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 4752,
        "Categories": [
            "FEA",
            "Open Source",
            "Fortran",
            "Continuum Mechanics",
            "Materials and Processes",
            "Abaqus",
            "LaRC",
            "NASA",
            "Composite Materials",
            "Progressive Damage"
        ],
        "Categories_NLP": [
            "finite element method",
            "micromechanic",
            "damage assessment",
            "delaminating",
            "damage",
            "cracking (fracturing)",
            "fiber composite",
            "composite structure",
            "laminate",
            "composite material"
        ],
        "Software": "Composite Damage (CompDam) Progressive Damage Analysis Software"
    },
    {
        "Update_Date": "2016-02-11",
        "Description": "The Kalman Filter Code Augmentation release is a modification of Kalman Filter Toolbox, written by Kevin Murphy, 1998. It extends the existing open source software's capabilities and functionality by bookkeeping more detailed information on internal data structures, as well as ensuring the consistency of mathematical conventions used by subroutines that are part of a third-party tool called ASOS as part of the modification. Additional convergence criteria have also been included, as well as the possibility for establishing additional constraints and modelling paradigms.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/kalman",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/kalman",
        "Contributors": [
            "rodney.martin@nasa.gov"
        ],
        "Labor_Hours": 176,
        "Categories": [
            "code augmentation",
            "model development",
            "NASA"
        ],
        "Categories_NLP": [
            "kalman filter",
            "convergence",
            "subroutine",
            "information system",
            "software development tool",
            "data processing",
            "symbol",
            "information theory",
            "data structure",
            "augmentation"
        ],
        "Software": "Kalman Filter Code Augmentation"
    },
    {
        "Update_Date": "2016-02-11",
        "Description": "ROC (Receiver Operating Characteristic) curve Code Augmentation is a modification of ROC Curve code originally authored by G.C. Cawley that provides additional functionality. The inclusion of more detailed bookkeeping of new and existing internal data structures that provide more visibility into various performance measures is one of the new features.",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/roc",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/roc",
        "Contributors": [
            "rodney.martin@nasa.gov"
        ],
        "Labor_Hours": 32,
        "Categories": [
            "code augmentation",
            "model development",
            "NASA"
        ],
        "Categories_NLP": [
            "curve fitting",
            "performance test",
            "performance",
            "performance prediction",
            "symbol",
            "radio receiver",
            "operating systems (computers)",
            "receiver",
            "visibility",
            "data structure"
        ],
        "Software": "ROC Curve Code Augmentation"
    },
    {
        "Update_Date": "2019-02-27",
        "Description": "Podaacpy is a python utility library for interacting with NASA JPL\u2019s PO.DAAC.",
        "Public Code Repo": "https://github.com/nasa/podaacpy",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "http://podaacpy.readthedocs.io/en/latest/",
        "Contributors": [
            "lewis.j.mcgibbney@nasa.gov"
        ],
        "Labor_Hours": 720,
        "Categories": [
            "Dataset Search",
            "Subsetting",
            "Framework",
            "Toolkit",
            "NASA",
            "Web",
            "Python"
        ],
        "Categories_NLP": [],
        "Software": "Podaacpy"
    },
    {
        "Update_Date": "2016-09-21",
        "Description": "3D visualization of earthquakes using their actual depth below the surface.",
        "Public Code Repo": "https://github.com/NASAWorldWindResearch/Quake-Hunter",
        "License": [
            "NASA Open Source",
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWindResearch/Quake-Hunter/archive/master.zip",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 1632,
        "Categories": [
            "visual simulation",
            "WorldWind",
            "earthquakes",
            "satellite",
            "application",
            "orbital dynamics",
            "NASA",
            "earthquake-visualization",
            "usgs",
            "earthquake-events",
            "worldwind"
        ],
        "Categories_NLP": [],
        "Software": "NASA WorldWind Research: Quake-Hunter"
    },
    {
        "Update_Date": "2016-09-09",
        "Description": "A geo-browser app framework based on NASA Web World Wind",
        "Public Code Repo": "https://github.com/NASAWorldWindResearch/WorldWindExplorer",
        "License": [
            "NASA Open Source",
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWindResearch/WorldWindExplorer/archive/master.zip",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 110032,
        "Categories": [
            "visual simulation",
            "WorldWind",
            "HTML5",
            "Javascript",
            "satellite",
            "geo-browser",
            "climate",
            "application",
            "geospatial data",
            "NASA",
            "geo",
            "worldwind",
            "weather"
        ],
        "Categories_NLP": [],
        "Software": "NASA WorldWind Research: WorldWindExplorer"
    },
    {
        "Update_Date": "2013-12-02",
        "Description": "PyCycle is a novel software library written in the Python Programming language. It allows a user to perform standard engine cycle analysis, while also  providing analytic derivative (sensitivity) calculations to the end user. This allows Pycycle to be very efficiently used by (or incorporated within) external software programs performing broader simulation, analysis, and optimization.",
        "Public Code Repo": "https://github.com/JustinSGray/pyCycle",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/JustinSGray/pyCycle/archive/master.zip",
        "Contributors": [
            "grc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 3952,
        "Categories": [
            "plugin",
            "GRC",
            "Open Source",
            "openmdao",
            "python",
            "Design and Integration Tools",
            "mdao",
            "NASA",
            "modeling"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "engine design",
            "programming language",
            "digital simulation",
            "design analysi",
            "optimization",
            "software development tool",
            "numerical analysi",
            "computer aided design",
            "simulation"
        ],
        "Software": "PyCycle - An Cycle Modeling Tool For Design With Gradient Based Optimization"
    },
    {
        "Update_Date": "2017-01-20",
        "Description": "The Generic Software Architecture for Prognostics (GSAP) is a framework for applying prognostics. It makes applying prognostics easier by implementing many of the common elements across prognostic applications. The standard interface enables reuse of prognostic algorithms and models across using the GSAP framework.",
        "Public Code Repo": "https://github.com/nasa/GSAP",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/GSAP/archive/master.zip",
        "Contributors": [
            "christopher.a.teubert@nasa.gov"
        ],
        "Labor_Hours": 7952,
        "Categories": [
            "Prognostics",
            "c++",
            "library",
            "Health Management",
            "PHM",
            "framework",
            "C++",
            "ARC",
            "NASA",
            "Health Monitoring"
        ],
        "Categories_NLP": [
            "interface",
            "finite element method",
            "mathematical model",
            "parallel processing (computers)",
            "human-computer interface",
            "programming environment",
            "software reuse",
            "algorithm",
            "software development tool",
            "architecture (computers)"
        ],
        "Software": "GSAP: General Software Architecture for Prognostics"
    },
    {
        "Update_Date": "2017-03-07",
        "Description": "Sitepod; A Sitemap Generator written in PHP. Sitepod is build using the Fat-Free Framework, a powerful yet easy-to-use PHP micro-framework designed to build dynamic and robust web applications.",
        "Public Code Repo": "https://github.com/nasa/sitepod/",
        "License": [
            "NASA Open Source",
            "GPLv3"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa/sitepod/",
        "Contributors": [
            "lewis.j.mcgibbney@nasa.gov"
        ],
        "Labor_Hours": 1632,
        "Categories": [
            "sitemap",
            "WebCrawler",
            "PHP",
            "Sitemap",
            "sitemap-generator",
            "sitemap-xml",
            "sitemap-builder",
            "JPL",
            "search-engine",
            "NASA",
            "Web",
            "php"
        ],
        "Categories_NLP": [
            "electric generator",
            "reliability",
            "response time (computers)",
            "systems engineering",
            "vibration",
            "java (programming language)",
            "missile",
            "optimization",
            "scattering function",
            "radioactive isotope"
        ],
        "Software": "Sitepod"
    },
    {
        "Update_Date": "2017-08-16",
        "Description": "Python client library that abstracts CMR API calls for search, ingest, update, and deletion of collections and granules.",
        "Public Code Repo": "https://github.com/nasa/pyCMR",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/cmr/wiki",
        "Contributors": [
            "lewis.j.mcgibbney@nasa.gov"
        ],
        "Labor_Hours": 1056,
        "Categories": [
            "client",
            "APL Client Library",
            "NASA",
            "Client SDK",
            "CMR",
            "Python",
            "API"
        ],
        "Categories_NLP": [
            "library",
            "searching",
            "circuit",
            "boundary layer",
            "stability",
            "radiation",
            "environment",
            "reliability"
        ],
        "Software": "pyCMR"
    },
    {
        "Update_Date": "2017-03-31",
        "Description": "The Metadata Management Tool is a web application to assist users in managing metadata on various Nasa.gov applications.",
        "Public Code Repo": "https://github.com/nasa/mmt",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/mmt",
        "Contributors": [
            "catalino.cuadrado@nasa.gov"
        ],
        "Labor_Hours": 266128,
        "Categories": [
            "Ruby",
            "application",
            "NASA",
            "CMR"
        ],
        "Categories_NLP": [
            "response time (computers)",
            "management method",
            "data management",
            "management planning",
            "data base management system",
            "information retrieval",
            "user requirement",
            "management information system",
            "human-computer interface",
            "information management"
        ],
        "Software": "Metadata Management Tool (MMT)"
    },
    {
        "Update_Date": "2017-05-01",
        "Description": "The Core Flight System (CFS) Command and Data Dictionary (CDD) utility, or CCDD, is a software tool for managing the data structures for CFS and CFS applications, including telemetry data structures, command information, and other data pertinent to a CFS project.",
        "Public Code Repo": "https://github.com/nasa/CCDD",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/CCDD",
        "Contributors": [
            "r.k.mccluney@nasa.gov"
        ],
        "Labor_Hours": 512576,
        "Categories": [
            "CFS",
            "java",
            "NASA",
            "SQL"
        ],
        "Categories_NLP": [
            "data acquisition",
            "biotelemetry",
            "telemetry",
            "data management",
            "software development tool",
            "data processing",
            "data system",
            "data reduction",
            "data base",
            "data structure"
        ],
        "Software": "CFS Command and Data Dictionary Tool (CCDDT)"
    },
    {
        "Update_Date": "2017-03-03",
        "Description": "Modeling, Analysis, and Visualization (MAV) of ATM concepts",
        "Public Code Repo": "https://github.com/nasa/MAV",
        "License": [
            "NASA Open Source",
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/MAV",
        "Contributors": [
            "jason.duley@nasa.gov"
        ],
        "Labor_Hours": 86736,
        "Categories": [
            "Analysis",
            "NASA",
            "Toolkit",
            "Visualization"
        ],
        "Categories_NLP": [],
        "Software": "MAV"
    },
    {
        "Update_Date": "2017-02-27",
        "Description": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI) takes in raw Landsat 8 surface reflectance products and produces two maps to be opened in ArcMap that can be used to identify chlorophyll hotspots. It also creates a true color image.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/CBCHI",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/CBCHI",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 64,
        "Categories": [
            "imagery",
            "Landsat",
            "application",
            "NASA"
        ],
        "Categories_NLP": [
            "surface propertie",
            "landsat satellite",
            "chlorophyll",
            "thematic mapping",
            "satellite imagery",
            "photomapping",
            "image analysi",
            "reflectance",
            "image processing",
            "color"
        ],
        "Software": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI)"
    },
    {
        "Update_Date": "2017-04-25",
        "Description": "Visualization of CALIPSO (VOCAL). A CALIPSO Cross Cutting tool for visualizing data.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/VOCAL",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/VOCAL",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 3600,
        "Categories": [
            "application",
            "python",
            "NASA",
            "visualization"
        ],
        "Categories_NLP": [],
        "Software": "Visualization of CALIPSO (VOCAL)"
    },
    {
        "Update_Date": "2017-03-21",
        "Description": "This code removes clouds, cloud shadow, water, and snow pixels from Landsat scenes using the cloud mask layer that is provided with Landsat data.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/MASC",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/MASC",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "mask layer",
            "Landsat",
            "application",
            "NASA"
        ],
        "Categories_NLP": [
            "landsat satellite",
            "clouds (meteorology)",
            "snow cover",
            "pixel",
            "scene analysi",
            "cloud cover",
            "snow",
            "cloud physic",
            "water",
            "digital data"
        ],
        "Software": "Move Away Superfluous Clouds (MASC)"
    },
    {
        "Update_Date": "2017-05-05",
        "Description": "This Google Earth Engine software quantifies the decreasing water surface area in Lake Mead and the lower Grand Canyon and assesses the resulting changes in land cover \u2013specifically, riparian vegetation and riparian sediment. The software provides images, statistics, and graphs to understand the drought-induced changes.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/GC-ReDI",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/GC-ReDI",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 928,
        "Categories": [
            "visualization",
            "imagery",
            "application",
            "NASA"
        ],
        "Categories_NLP": [
            "earth surface",
            "vegetation",
            "lake",
            "remote sensing",
            "surface propertie",
            "satellite imagery",
            "change detection",
            "water",
            "surface water",
            "earth observations (from space)"
        ],
        "Software": "GC-ReDI"
    },
    {
        "Update_Date": "2017-05-31",
        "Description": "MultiDop is a Python-based interface between the C-based DDA code developed at University of Oklahoma and the Python Atmospheric Radiation Measurement Radar Toolkit (Py-ART) software developed at Argonne National Lab. Use this software to perform 3D wind analyses using 2-3 independent Doppler radars.",
        "Public Code Repo": "https://github.com/nasa/MultiDop",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/MultiDop/wiki",
        "Contributors": [
            "timothy.j.lang@nasa.gov"
        ],
        "Labor_Hours": 3536,
        "Categories": [
            "Earth Science",
            "Doppler",
            "Toolkit",
            "NASA",
            "Winds",
            "Meteorology",
            "Radar"
        ],
        "Categories_NLP": [
            "radar measurement",
            "meteorological radar",
            "wind (meteorology)",
            "doppler effect",
            "atmospheric radiation",
            "radar",
            "wind measurement",
            "wind velocity measurement",
            "radiation measurement",
            "doppler radar"
        ],
        "Software": "Multiple-Doppler Radar Analysis Toolkit (MultiDop)"
    },
    {
        "Update_Date": "2017-07-13",
        "Description": "Illustrate using the Flux-Level Transit Injection (FLTI) Tests of the Kepler pipeline for Data Release 25.  This code generates the figures in the documentation of FLTI, Burke, C.J. and Catanzarite, J. 2017, Planet Detection Metrics: Per-Target Flux-Level Transit Injection Tests of TPS for Data Release 25, KSCI-19109-001",
        "Public Code Repo": "https://github.com/nasa/Kepler-FLTI",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/Kepler-FLTI",
        "Contributors": [
            "christopher.j.burke@nasa.gov"
        ],
        "Labor_Hours": 112,
        "Categories": [
            "Kepler",
            "NASA"
        ],
        "Categories_NLP": [
            "flux (rate)",
            "detection",
            "extrasolar planet",
            "error detection code",
            "planet",
            "target acquisition",
            "target",
            "pipeline",
            "transit time",
            "injection"
        ],
        "Software": "Kepler-FLTI"
    },
    {
        "Update_Date": "2017-07-13",
        "Description": "Illustrate making use of numerous Kepler Planet Occurrence Rate Data Products for Data Release 25 and SOC 9.3 Kepler Pipeline version.  This code generates a detection contour according to the documentation Burke, C.J. and Catanzarite, J. 2017, Planet Detection Metrics: Per-Target Detection Contours for Data Release 25, KSCI-19111-001",
        "Public Code Repo": "https://github.com/nasa/KeplerPORTs",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/KeplerPORTs",
        "Contributors": [
            "christopher.j.burke@nasa.gov"
        ],
        "Labor_Hours": 224,
        "Categories": [
            "Kepler",
            "NASA"
        ],
        "Categories_NLP": [
            "detection",
            "binary code",
            "target acquisition",
            "contour",
            "planet",
            "target recognition",
            "target",
            "symbol",
            "pipeline",
            "rates (per time)"
        ],
        "Software": "KeplerPORTs"
    },
    {
        "Update_Date": "2017-06-12",
        "Description": "The Kepler DR25 Robovetter code. The Robovetter dispositions Kepler Threshold Crossing Events (TCEs) into Planet Candidates (PCs) and False Positives (FPs) using sophisticated vetting metrics and decision-tree logic.",
        "Public Code Repo": "https://github.com/nasa/kepler-robovetter",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/kepler-robovetter",
        "Contributors": [
            "jeffrey.l.coughlin@nasa.gov"
        ],
        "Labor_Hours": 464,
        "Categories": [
            "Kepler",
            "NASA",
            "Transits",
            "Vetting",
            "DR25"
        ],
        "Categories_NLP": [
            "statistical decision theory",
            "logical element",
            "binary code",
            "trees (mathematics)",
            "planet",
            "thresholds (perception)",
            "binary data",
            "reliability",
            "decision theory",
            "circuit"
        ],
        "Software": "Kepler DR25 Robovetter"
    },
    {
        "Update_Date": "2016-06-19",
        "Description": "NASA World Wind in Java for HTML5",
        "Public Code Repo": "https://github.com/NASAWorldWind/WebWorldWind",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWind/WebWorldWind",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 79696,
        "Categories": [
            "visual simulation",
            "WorldWind",
            "satellite",
            "orbital dynamics",
            "NASA",
            "web application"
        ],
        "Categories_NLP": [],
        "Software": "WebWorldWind"
    },
    {
        "Update_Date": "2016-06-19",
        "Description": "NASA World Wind organization website",
        "Public Code Repo": "https://github.com/NASAWorldWind/NASAWorldWind.github.io",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWind/NASAWorldWind.github.io",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 80,
        "Categories": [
            "visual simulation",
            "WorldWind",
            "satellite",
            "orbital dynamics",
            "github",
            "NASA"
        ],
        "Categories_NLP": [],
        "Software": "NASAWorldWind.github.io"
    },
    {
        "Update_Date": "2016-06-19",
        "Description": "NASA World Wind in Java for Android",
        "Public Code Repo": "https://github.com/NASAWorldWind/WorldWindAndroid",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWind/WorldWindAndroid",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 39104,
        "Categories": [
            "visual simulation",
            "WorldWind",
            "satellite",
            "application",
            "orbital dynamics",
            "NASA",
            "android"
        ],
        "Categories_NLP": [],
        "Software": "WorldWindAndroid"
    },
    {
        "Update_Date": "2016-06-19",
        "Description": "The NASA WorldWind Server Kit (WWSK) is an open source Java project that assembles GeoServer for easy distribution and implementation.",
        "Public Code Repo": "https://github.com/NASAWorldWind/WorldWindServerKit",
        "License": [
            "NASA Open Source",
            "GPLv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWind/WorldWindServerKit",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 178336,
        "Categories": [
            "WorldWind",
            "server kit",
            "java",
            "visual simulation",
            "GeoServer",
            "satellite",
            "orbital dynamics",
            "NASA",
            "web application"
        ],
        "Categories_NLP": [
            "statistical distribution",
            "nasa program",
            "reliability",
            "failure",
            "radiation source",
            "systems engineering",
            "java (programming language)",
            "project management",
            "optimization",
            "nasa space program"
        ],
        "Software": "WorldWindServerKit"
    },
    {
        "Update_Date": "2016-06-19",
        "Description": "The NASA WorldWind Java SDK (WWJ) is for building cross-platform 3D geospatial desktop applications in Java.",
        "Public Code Repo": "https://github.com/NASAWorldWind/WorldWindJava",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/NASAWorldWind/WorldWindJava",
        "Contributors": [
            "patrick.hogan@nasa.gov"
        ],
        "Labor_Hours": 316160,
        "Categories": [
            "visual simulation",
            "geospatial",
            "WorldWind",
            "maps",
            "globe",
            "terrain",
            "imagery",
            "satellite",
            "sdk",
            "java",
            "graphics",
            "earth",
            "orbital dynamics",
            "NASA",
            "3d",
            "web application",
            "worldwind",
            "opengl"
        ],
        "Categories_NLP": [],
        "Software": "WorldWindJava"
    },
    {
        "Update_Date": "2016-06-22",
        "Description": "Geographic Applications for Transitioning Everglades Regions (GATER). Meant for running within the Google Earth Engine API, this JavaScript code provides an algorithm for cloud removal from Landsat scenes, and runs a classification scheme which classifies mangrove extent within Everglades National Park.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/GATER",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/GATER",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 15376,
        "Categories": [
            "Geographic Applications for Transitioning Everglades Regions",
            "classification scheme",
            "algorithm",
            "Everglades National Park",
            "Google Earth API",
            "JavaScript",
            "Landsat scenes",
            "NASA",
            "cloud removal"
        ],
        "Categories_NLP": [
            "landsat satellite",
            "cloud",
            "image classification",
            "earth surface",
            "scene analysi",
            "classification",
            "earth (planet)",
            "cloud cover",
            "algorithm",
            "earth atmosphere"
        ],
        "Software": "GATER"
    },
    {
        "Update_Date": "2016-06-22",
        "Description": "This tool allows users to identify surface water from the most current imagery available, or to monitor temporal changes of surface water in their management area.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/SWIM",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19013-1",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 3456,
        "Categories": [
            "current imagery",
            "surface water",
            "NASA",
            "temporal changes"
        ],
        "Categories_NLP": [
            "surface propertie",
            "data management",
            "water resource",
            "user requirement",
            "change detection",
            "water management",
            "earth resources program",
            "imagery",
            "water",
            "surface water"
        ],
        "Software": "SWIM"
    },
    {
        "Update_Date": "2016-06-23",
        "Description": "Elkhorn Slough Vegetation Imagery Assessment (ESVIA). This suite of Google Earth Engine Javascript code analyzes vegetation change in a historical time-series using Landsat, as well as current-day vegetation productivity using Sentinel 2A imagery. Included in the scripts are operations such as image acquisition, image processing, and application.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/ESVIA",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19012-1",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 144,
        "Categories": [
            "Sentinel 2A imagery",
            "java",
            "vegetation change",
            "Google Earth",
            "NASA",
            "vegetation imagery",
            "landsat",
            "vegetation"
        ],
        "Categories_NLP": [
            "vegetation",
            "remote sensing",
            "landsat satellite",
            "imagery",
            "vegetation growth",
            "satellite imagery",
            "time series analysi",
            "image processing",
            "real time operation",
            "earth observations (from space)"
        ],
        "Software": "ESVIA"
    },
    {
        "Update_Date": "2016-06-23",
        "Description": "Pixelwise Correlation-Based Landscape Classification (PiCo). PiCo, an R script, automates and regionalizes the Climate Landscape Response (CLaRe) metrics developed by Wallace et al 2016. This script performs a pixel-wise regression analysis to produce rasters whose correlation values can be evaluated to target buffelgrass.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/PiCo",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19015-1",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "correlation-based",
            "pixel-wise",
            "buffelgrass",
            "landscape",
            "climate",
            "pixel-wise regression analysis",
            "NASA",
            "R"
        ],
        "Categories_NLP": [
            "statistical correlation",
            "correlation coefficient",
            "classification",
            "pixel",
            "data correlation",
            "topography",
            "correlation",
            "correlation detection",
            "climate",
            "regression analysi"
        ],
        "Software": "PiCo"
    },
    {
        "Update_Date": "2016-06-23",
        "Description": "Palm Oil Plantation Predictor (POPP). This Python software automates the process of downloading, atmospherically correcting, and processing raster data in order to identify potential palm oil plantations.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/POPP",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-18862-1",
        "Contributors": [
            "jeffry.w.ely@nasa.gov"
        ],
        "Labor_Hours": 32,
        "Categories": [
            "plantation",
            "raster",
            "NASA",
            "palm oil",
            "atmospherically",
            "python"
        ],
        "Categories_NLP": [
            "data processing equipment",
            "prediction",
            "image processing",
            "software development tool",
            "data processing",
            "data system",
            "computation",
            "digital data",
            "radar data",
            "oil slick"
        ],
        "Software": "POPP"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "DON-Federate-HLA2MPC repository",
        "Public Code Repo": "https://github.com/nasa/DON-Federate-HLA2MPC",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "KSC",
        "External Link": "https://software.nasa.gov/software/KSC-14109",
        "Contributors": [
            "mike.conroy@nasa.gov"
        ],
        "Labor_Hours": 9232,
        "Categories": [
            "Architecture",
            "Level",
            "High",
            "NASA",
            "KSC",
            "HLA"
        ],
        "Categories_NLP": [],
        "Software": "DON-Federate-HLA2MPC"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "Kodiak is an implementation of a software library for verifying expressions involving nonlinear real arithmetic. The current innovation discloses the implementation of a generic branch and bound algorithm for rigorous computations and prototype implementation of algorithms for solving global optimization problems.",
        "Public Code Repo": "https://github.com/nasa/kodiak",
        "License": [
            "NASA Open Source",
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://shemesh.larc.nasa.gov/fm/Kodiak/0",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 5344,
        "Categories": [
            "checker",
            "optimizer",
            "non-linear",
            "approximation",
            "Open Source",
            "interface",
            "algorithm",
            "arithmetic",
            "Non-linear Arithmetic",
            "Rigurous Polynomial Approximations",
            "inequalities",
            "bound",
            "expression",
            "Data and Image Processing",
            "boolean",
            "branch",
            "Global Optimization",
            "application",
            "LaRC",
            "programming",
            "NASA",
            "Interval Arithmetic",
            "real",
            "API"
        ],
        "Categories_NLP": [
            "computation",
            "combinatorial analysi",
            "prototype",
            "problem solving",
            "boolean function",
            "optimization",
            "algorithm",
            "boolean algebra",
            "software development tool",
            "module"
        ],
        "Software": "Kodiak's Boolean Checker Software Module"
    },
    {
        "Update_Date": "2017-10-10",
        "Description": "VirtualADAPT is a high-fidelity, Matlab Simulink-based simulation testbed that emulates the Advanced Diagnostic and Prognostic Testbed (ADAPT) electrical power system hardware for running offline health management experiments. This simulation testbed models all components of the ADAPT hardware within the power storage and power distribution subsystems. The physical components of the testbed, i.e., the batteries, relays, and the loads, are replaced by simulation modules that generate the same dynamic behaviors as the hardware test bed.",
        "Public Code Repo": "https://github.com/nasa/VirtualADAPT",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/VirtualADAPT",
        "Contributors": [
            "arc-sra-team@mail.nasa.gov"
        ],
        "Labor_Hours": 2512,
        "Categories": [
            "Electrical Power System",
            "Simulation"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "electric battery",
            "diagnosi",
            "electric power supplie",
            "spacecraft power supplie",
            "test stand",
            "systems health monitoring",
            "systems management",
            "simulation",
            "systems simulation"
        ],
        "Software": "Virtual ADAPT"
    },
    {
        "Update_Date": "2015-12-12",
        "Description": "Formerly known as PyTransit. This python package contains routines to create and/or fit a transiting planet model. The underlying model is a Fortran implementation of the Mandel & Agol (2002) limb darkened transit model. The code will calculate a full orbital model and eccentricity can be allowed to vary.",
        "Public Code Repo": "https://github.com/mrtommyb/ktransit",
        "License": [
            "GPLv3"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/mrtommyb/ktransit",
        "Contributors": [
            "thomas.barclay@nasa.gov"
        ],
        "Labor_Hours": 1184,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "extrasolar planet",
            "fortran",
            "subroutine",
            "dynamic model",
            "eccentricity",
            "planet",
            "solar limb",
            "mathematical model",
            "transit time"
        ],
        "Software": "ktransit"
    },
    {
        "Update_Date": "2015-05-26",
        "Description": "kplr provides a lightweight Pythonic interface to the catalogs and data. Below, I'll describe the features provided by kplr but to get things started, let\u2019s see an example of how you would go about finding the published parameters of a KOI and download the light curve data.",
        "Public Code Repo": "http://dfm.io/kplr/",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "http://dan.iel.fm/kplr/",
        "Contributors": [
            "jason.duley@nasa.gov"
        ],
        "Labor_Hours": 528,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [
            "interface",
            "load distribution (forces)",
            "liquid-solid interface",
            "mechanical property",
            "interface stability",
            "solid",
            "interfacial tension",
            "bonding",
            "solid-solid interface",
            "stress"
        ],
        "Software": "kplr"
    },
    {
        "Update_Date": "2015-05-26",
        "Description": "The search for transiting exoplanets in K2 data.",
        "Public Code Repo": "https://github.com/dfm/ketu",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/dfm/ketu",
        "Contributors": [
            "jason.duley@nasa.gov"
        ],
        "Labor_Hours": 2432,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [],
        "Software": "ketu"
    },
    {
        "Update_Date": "2016-06-10",
        "Description": "Oxford K2 planet search pipeline. Searches for transit-like signals from the k2sc-detrended light curves.",
        "Public Code Repo": "https://github.com/hpparvi/k2ps",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/hpparvi/k2ps",
        "Contributors": [
            "hpparvi@gmail.com"
        ],
        "Labor_Hours": 352,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [],
        "Software": "k2ps"
    },
    {
        "Update_Date": "2015-11-24",
        "Description": "EPIC Variability Extraction and Removal for Exoplanet Science Targets: A pipeline for de-trending K2 light curves with pixel level decorrelation and Gaussian processes. Here you'll find the Python code used to generate the EVEREST catalog, as well as tools for accessing and interacting with the de-trended light curves.",
        "Public Code Repo": "https://github.com/rodluger/everest",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://rodluger.github.io/everest/",
        "Contributors": [
            "nicholas.k.saunders@nasa.gov"
        ],
        "Labor_Hours": 5568,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [
            "light (visible radiation)",
            "variability",
            "extrasolar planet",
            "catalogs (publications)",
            "target",
            "normal density function",
            "pipeline",
            "extraction"
        ],
        "Software": "everest"
    },
    {
        "Update_Date": "2015-11-24",
        "Description": "K2mosaic is a command-line tool that makes it easy to combine CCD pixel data obtained by NASA's Kepler space telescope into wide-field images. The need for this tool arises from the fact that the two-wheeled extended Kepler mission, K2, observed large clusters and moving targets (e.g. planets, comets, and asteroids). ",
        "Public Code Repo": "https://github.com/barentsen/k2mosaic",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/barentsen/k2mosaic",
        "Contributors": [
            "geert.barentsen@nasa.gov"
        ],
        "Labor_Hours": 352,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [
            "asteroid",
            "charge coupled device",
            "space mission",
            "pixel",
            "comet",
            "imaging technique",
            "planet",
            "target",
            "telescope",
            "solar system"
        ],
        "Software": "K2mosaic"
    },
    {
        "Update_Date": "2015-11-24",
        "Description": "Converts raw cadence target data from the Kepler space telescope into astronomer-friendly FITS files.",
        "Public Code Repo": "https://github.com/KeplerGO/kadenza",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/KeplerGO/kadenza",
        "Contributors": [
            "jessie.dotson@nasa.gov"
        ],
        "Labor_Hours": 736,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [],
        "Software": "kadenza"
    },
    {
        "Update_Date": "2015-11-24",
        "Description": "Command-line tool to check whether a Solar System body is (or was) observable by NASA's K2 mission",
        "Public Code Repo": "https://github.com/KeplerGO/K2ephem",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://keplerscience.arc.nasa.gov/software.html#k2ephem",
        "Contributors": [
            "jessie.dotson@nasa.gov"
        ],
        "Labor_Hours": 80,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [],
        "Software": "K2ephem"
    },
    {
        "Update_Date": "2014-02-07",
        "Description": "The K2fov Python package allows users to check whether a target is in the field of view of K2. In particular, the package adds the K2onSilicon and K2findCampaigns tools to the command line, which allow the visibility of targets to be checked during one (K2onSilicon) or all (K2findCampaigns) campaigns, respectively.",
        "Public Code Repo": "https://github.com/KeplerGO/K2fov",
        "License": [
            "MIT"
        ],
        "NASA Center": "ARC",
        "External Link": "https://keplerscience.arc.nasa.gov/software.html#k2fov",
        "Contributors": [
            "jessie.dotson@nasa.gov"
        ],
        "Labor_Hours": 8112,
        "Categories": [
            "Kepler"
        ],
        "Categories_NLP": [
            "on-line programming",
            "software development tool",
            "user requirement",
            "target acquisition",
            "target recognition",
            "visibility",
            "target",
            "field of view",
            "electronic packaging",
            "on-line system"
        ],
        "Software": "K2fov"
    },
    {
        "Update_Date": "2015-01-15",
        "Description": "DEVELOP National Program Python package for use with NASA data and GIS. dnppy is a collection of functions and classes for download, format, and analysis of NASA satelite data and anciliary NOAA datasets",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/dnppy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://nasa-develop.github.io/dnppy/",
        "Contributors": [
            "Jwely"
        ],
        "Labor_Hours": 5888,
        "Categories": [
            "satellite DATA",
            "GIS",
            "NOAA"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data management",
            "format",
            "data processing",
            "nasa program",
            "systems analysi",
            "data reduction",
            "geographic information system",
            "user manuals (computer programs)",
            "functions (mathematics)"
        ],
        "Software": "dnppy"
    },
    {
        "Update_Date": "2014-09-05",
        "Description": "Data collected in the CAVE effort are meant for use in validation studies of Clouds & The Earths Radiant Energy System (CERES) instruments operating on the Suomi NPP and Earth Observing Systems(EOS)Terra & Aqua & Tropical Rainfall Measurement Mission (TRMM) satellites.",
        "Public Code Repo": "http://www-cave.larc.nasa.gov/LFLcode/Ed4_LaRC_FuLiou201501.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "http://www-cave.larc.nasa.gov/index.html",
        "Contributors": [
            "Seiji.Kato@NASA.gov"
        ],
        "Labor_Hours": 45552,
        "Categories": [
            "CERES",
            "validation",
            "ARM"
        ],
        "Categories_NLP": [
            "remote sensing",
            "satellite instrument",
            "earth (planet)",
            "earth observing system (eos)",
            "satellite observation",
            "mission planning",
            "satellite-borne instrument",
            "trmm satellite",
            "earth observations (from space)",
            "rain"
        ],
        "Software": "CERES/ARM Validation Experiment (CAVE)"
    },
    {
        "Update_Date": "2015-03-04",
        "Description": "This is a prototype data processor/publisher for NASA.",
        "Public Code Repo": "https://github.com/vightel/ojo-bot",
        "License": [
            "ALv2"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/vightel/ojo-bot",
        "Contributors": [
            "dalia.b.kirschbaum@nasa.gov"
        ],
        "Labor_Hours": 93280,
        "Categories": [
            "earth sciences",
            "landslides"
        ],
        "Categories_NLP": [],
        "Software": "OJO Bot"
    },
    {
        "Update_Date": "2015-09-17",
        "Description": "jpf-psyco generates symbolic interfaces for software components using concolic execution.",
        "Public Code Repo": "https://github.com/psycopaths/psyco",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/m/groups/rse/papers/Giannakopoulou-CAV12.pdf",
        "Contributors": [
            "dimitra.giannakopoulou@nasa.gov"
        ],
        "Labor_Hours": 5664,
        "Categories": [
            "temporal interfaces",
            "component methods",
            "symbolic learning"
        ],
        "Categories_NLP": [],
        "Software": "PSYCO: A Predicate-based Symbolic Compositional Reasoning environment"
    },
    {
        "Update_Date": "2014-01-28",
        "Description": "Retools is a set of modifications to the commonly used open source utilities bzip2, gzip, rsync, and tar that automatically selects the Lustre stripe count for created and/or extracted files according to the sizes of the files involved. By striping large files over a higher number of physical disks and small files over a lower number, aggregate I/O bandwidth for large files is maximized and the impact to the file system due to small files is minimized. These tools support the typical workflow in high performance computing environments where users compress large files and/or aggregate multiple small files into a single archive during remote transfers. Once uncompressed/unarchived into their original form, these files will be optimally striped for subsequent operations.",
        "Public Code Repo": "https://github.com/pkolano/retools",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://pkolano.github.io/projects/retools.html",
        "Contributors": [
            "Paul.Kolano@nasa.gov"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "disk striping",
            "Lustre file systems",
            "utility"
        ],
        "Categories_NLP": [
            "bandwidth",
            "magnetic disk",
            "performance prediction",
            "systems analysi",
            "data transfer (computers)",
            "file maintenance (computers)"
        ],
        "Software": "Restriping Tools for Lustre (Retools)"
    },
    {
        "Update_Date": "2012-05-11",
        "Description": "The NASA Ames Stereo Pipeline (ASP) is a suite of free and open source automated geodesy and stereogrammetry tools designed for processing stereo imagery captured from satellites (around Earth and other planets), robotic rovers, aerial cameras, and historical imagery, with and without accurate camera pose information. It produces cartographic products, including digital elevation models (DEMs), ortho-projected imagery, 3D models, and bundle-adjusted networks of cameras. ASP's data products are suitable for science analysis, mission planning, and public outreach.",
        "Public Code Repo": "https://github.com/neogeographytoolkit/stereopipeline",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/tech/asr/intelligent-robotics/ngt/stereo/",
        "Contributors": [
            "stereo-pipeline@lists.nasa.gov"
        ],
        "Labor_Hours": 104608,
        "Categories": [
            "geodesy",
            "stereogrammetry",
            "tools",
            "satellites imagery"
        ],
        "Categories_NLP": [
            "elevation",
            "earth (planet)",
            "roving vehicle",
            "satellite observation",
            "geodesy",
            "earth science",
            "mission planning",
            "photogrammetry",
            "geodetic satellite",
            "stereophotography"
        ],
        "Software": "Neo-Geography Toolkit (NGT)"
    },
    {
        "Update_Date": "2011-09-16",
        "Description": "VERVE (Visual Environment for Remote Virtual Exploration) is a collection of software components for visualizing, monitoring, and commanding robots in remote environments. VERVE is developed by the Intelligent Robotics Group at NASA Ames Research Center and is part of the NASA Ensemble software ecosystem.",
        "Public Code Repo": "https://sourceforge.net/projects/irg-verve/files/latest/download",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://sourceforge.net/p/irg-verve/wiki/VERVE%20Wiki%20Home/",
        "Contributors": [
            "maria.bualat@nasa.gov"
        ],
        "Labor_Hours": 271488,
        "Categories": [
            "robots",
            "virtual environment"
        ],
        "Categories_NLP": [
            "autonomy",
            "robot control",
            "programming environment",
            "robot dynamic",
            "remote control",
            "remote manipulator system",
            "robotic",
            "virtual reality",
            "ecosystem",
            "robot"
        ],
        "Software": "Visual Environment for Remote Virtual Exploration (VERVE)"
    },
    {
        "Update_Date": "2009-11-06",
        "Description": "One-class nu-Support Vector machine (SVMs) learning technique maps the input data into a much higher dimensional space and then uses a small portion of the training data (support vectors) to parametrize the decision surface that can linearly separate nu fraction of training points (labeled as anomalies) from the rest.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/nu-anomica/nu-anomica.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/nu-anomica/",
        "Contributors": [
            "peter.c.mehlitz@nasa.gov"
        ],
        "Labor_Hours": 272,
        "Categories": [
            "SVM",
            "Support Vector Machine"
        ],
        "Categories_NLP": [
            "vectors (mathematics)",
            "surface propertie",
            "machine learning",
            "decision making",
            "support system",
            "surface geometry",
            "education",
            "decision theory",
            "anomaly",
            "vector analysi"
        ],
        "Software": "nu-Anomica"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The MDP toolbox for Python by Sam Cordwell provides classes and functions for the resolution of descrete-time Markov Decision Processes. The list of algorithms that have been implemented includes backwards induction, linear programming, policy iteration, q-learning and value iteration along with several variations.",
        "Public Code Repo": "https://github.com/nasa/pymdptoolbox",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/pymdptoolbox",
        "Contributors": [
            "michael.bloem@nasa.gov"
        ],
        "Labor_Hours": 1456,
        "Categories": [
            "Decision Making",
            "MDP",
            "IRL",
            "Markov Decision Process"
        ],
        "Categories_NLP": [
            "algorithm",
            "machine learning",
            "decision making",
            "iteration",
            "stochastic processe",
            "linear programming",
            "markov processe",
            "iterative solution",
            "dynamic programming",
            "decision theory"
        ],
        "Software": "Inverse Reinforcement Learning (IRL) Augmentation for PyMDPToolbox"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "xGDS (Exploration Ground Data Systems) synthesizes real world data (from sensors, robots, ROVs, mobile devices, etc) and human observations into rich, digital maps and displays for analysis, decision making, and collaboration. xGDS evolved from our work developing tools to control, monitor and collect data from autonomous rovers supporting NASA's terrestrial field science research. xGDS is a highly collaborative, interactive suite of web software.",
        "Public Code Repo": "https://github.com/xgds",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/tech/asr/groups/intelligent-robotics/xgds/",
        "Contributors": [
            "terry.fong@nasa.gov"
        ],
        "Labor_Hours": 666480,
        "Categories": [
            "Decision Making",
            "Maps",
            "Ground Data Systems"
        ],
        "Categories_NLP": [
            "data acquisition",
            "autonomy",
            "display device",
            "decision making",
            "robotic",
            "data system",
            "sensor",
            "scientific visualization",
            "robot",
            "temperature measuring instrument"
        ],
        "Software": "xGDS"
    },
    {
        "Update_Date": "2016-02-05",
        "Description": "The source code contains the Meta Raster Format (MRF) specification and plugin for GDAL, which is a part of the OnEarth software package. OnEarth consists of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The Meta Raster Format and OnEarth software were originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool, the Lunar Mapping and Modeling Project (LMMP), and GIBS.",
        "Public Code Repo": "https://github.com/nasa-gibs/mrf",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-gibs/mrf",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 864,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "mrf",
            "worldview",
            "gibs",
            "eosdis",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "imaging technique",
            "software development tool",
            "module",
            "mapping",
            "deployment",
            "scientific visualization",
            "image analysi",
            "high resolution",
            "imagery",
            "image processing"
        ],
        "Software": "Meta Raster Format (mrf)"
    },
    {
        "Update_Date": "2015-08-31",
        "Description": "NASA's Data Curtains from Space is a Google Summer of Code 2015 Project for the Cesium Community developed by Abhishek Potnis under the guidance of Mike McGann and Ryan Boller at NASA. Data Curtains from Space uses Cesium to better visualize data from the CALIPSO satellite, which is used to study clouds and aerosols in the atmosphere.",
        "Public Code Repo": "https://github.com/nasa-gibs/data-curtains",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-gibs/data-curtains",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 53584,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "worldview",
            "gibs",
            "eosdis",
            "data visualization",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "atmospheric radiation",
            "clouds (meteorology)",
            "earth atmosphere",
            "meteorological satellite",
            "satellite observation",
            "nasa program",
            "aerosol",
            "cloud",
            "cloud cover",
            "atmospheric composition"
        ],
        "Software": "Data Curtains"
    },
    {
        "Update_Date": "2016-02-12",
        "Description": "OnEarth is a software package consisting of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The software was originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool, the Lunar Mapping and Modeling Project (LMMP), and Worldview.",
        "Public Code Repo": "https://github.com/nasa-gibs/onearth",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-gibs/onearth",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 28816,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "worldview",
            "gibs",
            "eosdis",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "imaging technique",
            "software development tool",
            "module",
            "deployment",
            "support system",
            "scientific visualization",
            "image analysi",
            "high resolution",
            "imagery",
            "image processing"
        ],
        "Software": "OnEarth"
    },
    {
        "Update_Date": "2016-02-12",
        "Description": "OnEarth-Boxes is a system that creates VM images for use in running, testing, and experimenting with the OnEarth and MRF tools. It uses Packer to produce a variety of pre-built VMs in different formats. OnEarth-Boxes comes pre-configured with NASA Blue Marble and MODIS Aerosol imagery layers, in 4 separate projections. There are OpenLayers endpoints for testing with WMTS, as well as TWMS/KML and Mapserver endpoints.",
        "Public Code Repo": "https://github.com/nasa-gibs/onearth-boxes",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-gibs/onearth-boxes",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 160,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "worldview",
            "gibs",
            "eosdis",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "imagery",
            "format",
            "satellite imagery",
            "infrared imagery",
            "photograph",
            "aerosol",
            "imaging technique",
            "image analysi",
            "image processing",
            "image"
        ],
        "Software": "OnEarth Boxes"
    },
    {
        "Update_Date": "2015-05-20",
        "Description": "This project shows how to use GIBS as a tile source for OpenLayers, Leaflet, Cesium, Bing, and Google Maps.",
        "Public Code Repo": "https://github.com/nasa-gibs/gibs-web-examples",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-gibs/gibs-web-examples",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 13104,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "worldview",
            "gibs",
            "eosdis",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [
            "cesium plasma",
            "cesium vapor",
            "light source",
            "cesium",
            "radiation source",
            "boundary layer",
            "heat source",
            "reliability",
            "point source",
            "circuit"
        ],
        "Software": "GIBS Web Examples"
    },
    {
        "Update_Date": "2015-04-03",
        "Description": "This repository contains changes to OpenLayers 3 used by Worldview.",
        "Public Code Repo": "https://github.com/nasa-gibs/ol3",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa-gibs/ol3",
        "Contributors": [
            "support@earthdata.nasa.gov"
        ],
        "Labor_Hours": 64640,
        "Categories": [
            "global imagery browse services",
            "earth data science",
            "worldview",
            "gibs",
            "eosdis",
            "onearth",
            "Tiled WMS"
        ],
        "Categories_NLP": [],
        "Software": "Open Layers 3"
    },
    {
        "Update_Date": "2012-05-22",
        "Description": "GMAT is a software system for mission analysis and trajectory optimization, estimation, and prediction. The technology can be used to design spacecraft trajectories, optimize maneuvers, perform orbit determination, visualize and communicate mission parameters, and understand a mission's trade space.",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/gmat/",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 2140848,
        "Categories": [
            "Design and Integration Tools"
        ],
        "Categories_NLP": [
            "trajectory analysi",
            "orbit determination",
            "trajectory optimization",
            "orbital maneuver",
            "trajectory",
            "orbit calculation",
            "spacecraft trajectory",
            "mission planning",
            "spacecraft maneuver",
            "interplanetary trajectorie"
        ],
        "Software": "General Mission Analysis Tool (GMAT), Revision 2012a"
    },
    {
        "Update_Date": "2015-03-12",
        "Description": "The CCSDS File Delivery Protocol (CFDP) application (CF) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFDP application provides the capability to transmit and receive files to/from the ground. Tables are used to allow flexibility in specifying directory priorities and configurations.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-cfdp/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-cfdp",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 41120,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "flexibility",
            "flight control",
            "systems engineering",
            "protocol (computers)",
            "ground test",
            "file maintenance (computers)"
        ],
        "Software": "Core Flight System (CFS) CCSDS File Delivery Protocol (CFDP)"
    },
    {
        "Update_Date": "2015-03-13",
        "Description": "The Checksum application (CS) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. Checksum (CS) is one of the reusable applications that make up the Core Flight System (CFS). The technology performs memory integrity management by verifying the contents of critical flight memory regions. Unexpected changes in memory (i.e., due to an SEU) are reported to ground operators.",
        "Public Code Repo": "https://sourceforge.net/projects/cfs-cs/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/cs",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 37984,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "magnetic core",
            "memory (computers)",
            "computer storage device",
            "technology utilization"
        ],
        "Software": "Core Flight System (CFS) Checksum Application"
    },
    {
        "Update_Date": "2015-08-04",
        "Description": "The Data Storage application (DS) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The DS application provides the ability to store data (i.e., messages) into files. Tables are used to provide the flexibility for specifying messages.",
        "Public Code Repo": "https://github.com/nasa/ds",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-ds",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 24704,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "tables (data)",
            "data storage",
            "data processing equipment",
            "data management",
            "data processing",
            "data system",
            "message processing",
            "data base",
            "file maintenance (computers)",
            "message"
        ],
        "Software": "Core Flight System (CFS) Data Storage (DS) Application"
    },
    {
        "Update_Date": "2015-03-20",
        "Description": "FM provides the user commands to perform the following operations: copy file, move file, rename file, delete file(s), close file, concatenate file, decompress file, delete directory contents, create directory, remove directory, obtain file information, obtain open file listing, and obtain directory listings.",
        "Public Code Repo": "https://github.com/nasa/fm",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-fm",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 37872,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "information system",
            "command and control",
            "information retrieval",
            "user requirement",
            "systems engineering",
            "information",
            "management information system",
            "information management",
            "systems management",
            "user manuals (computer programs)"
        ],
        "Software": "Core Flight System (CFS) File Manager (FM) Application"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "The plug-and-play CFS Health and Safety application is compatible with the Core Flight Executive (cFE) and uses the Operating System Abstraction Layer (OSAL), both of which were developed by Goddard Space Flight Center in order to provide a reusable, platform-independent, mission-independent, layered architecture for hosting applications. The technology can be used for any government or commercial spacecraft.",
        "Public Code Repo": "https://github.com/nasa/hs",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-hs",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 20752,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "space mission",
            "manned space flight",
            "aerospace engineering",
            "technology utilization",
            "systems engineering",
            "spacecraft control",
            "onboard data processing",
            "space flight",
            "architecture (computers)",
            "systems health monitoring"
        ],
        "Software": "Core Flight System (CFS) Health and Safety Application"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "The Housekeeping application (HK) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFS Housekeeping application provides the ability to organize data from various packets into new packets in order to best utilize the telemetry bandwidth available for a mission.",
        "Public Code Repo": "https://github.com/nasa/hk",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-hk",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 12624,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "radio telemetry",
            "biotelemetry",
            "packets (communication)",
            "bandwidth",
            "telemetry",
            "space mission"
        ],
        "Software": "Core Flight System (CFS) Housekeeping (HK) Application"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "The Limit Checker application (LC) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The Limit Checker (LC) application is responsible for monitoring telemetry values.",
        "Public Code Repo": "https://github.com/nasa/lc",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-lc",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 43168,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "biotelemetry",
            "telemetry",
            "systems engineering",
            "systems analysi"
        ],
        "Software": "Core Flight System (CFS) Limit Checker (LC) Application"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "The Memory Dwell application telemeters the contents of table-defined addresses at a table-defined dwell rate. Addresses can be processed using symbols if the target processor/operating system includes symbols.",
        "Public Code Repo": "https://github.com/md",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-md",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 18528,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "magnetic storage",
            "data storage",
            "data processing equipment",
            "memory (computers)",
            "computer storage device",
            "target acquisition",
            "central processing unit",
            "computer component",
            "symbol",
            "operating systems (computers)"
        ],
        "Software": "Core Flight System (CFS) Memory Dwell Application"
    },
    {
        "Update_Date": "2015-05-31",
        "Description": "The Scheduler application (SCH) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The Scheduler application uses a one-second major timeframe, which is divided into a designer-determined collection of equally divided minor timeframes. The technology is configurable and table-driven to provide greater flexibility.",
        "Public Code Repo": "https://github.com/nasa/sch",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-sch",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 20752,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "data acquisition",
            "flexibility",
            "avionic",
            "flight control",
            "technology utilization",
            "systems engineering",
            "technology assessment"
        ],
        "Software": "Core Flight System (CFS) Scheduler Application"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "The Software Bus Network application (SBN) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The SBN serves as a plug-in to the cFE framework to transfer messages across process/processor interfaces. The technology has three primary functions: to establish and maintain a connection to each peer over available process/processor interfaces; to distribute and maintain a subscription message database for each peer; and to distribute messages to peers that have subscribed to message identifiers.",
        "Public Code Repo": "https://github.com/nasa/sbn",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-sbn",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 2768,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "interface",
            "distributed processing",
            "avionic",
            "network",
            "systems engineering",
            "network synthesi",
            "computer component",
            "computer network",
            "data base",
            "channels (data transmission)"
        ],
        "Software": "Core Flight System (CFS) Software Bus Network (SBN) Application"
    },
    {
        "Update_Date": "2015-03-17",
        "Description": "The Stored Command application (SC) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFS SC application provides the ability to execute onboard absolute-time and relative-time command sequences. The technology offers a generic implementation that can be configured by a user to fit the needs of a specific mission.",
        "Public Code Repo": "https://github.com/nasa/sc",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/cfs-sc",
        "Contributors": [
            "gsfc-softwarerelease@mail.nasa.gov"
        ],
        "Labor_Hours": 18528,
        "Categories": [
            "vehicle management (space/air/ground)"
        ],
        "Categories_NLP": [
            "sequencing",
            "space mission",
            "command and control",
            "user requirement",
            "technology utilization",
            "systems engineering",
            "mission planning",
            "human-computer interface",
            "real time operation"
        ],
        "Software": "Core Flight System (CFS) Stored Command (SC) Application"
    },
    {
        "Update_Date": "2008-06-16",
        "Description": "A home for NASA's open source Ruby software.  funit (Fortran unit testing framework.) fortran (Fortran utilities.) watch-paths (Poor man's file monitoring.) namelists (Generates webpage for creating namelists found in Fortran programs.) uq4sim (Uncertainty quantification for simulation.)",
        "Public Code Repo": "https://github.com/kleb/nasarb",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/kleb/nasarb",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 4080,
        "Categories": [
            "Data and Image Processing"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "fortran",
            "software development tool",
            "nasa program",
            "simulation"
        ],
        "Software": "NASA Ruby"
    },
    {
        "Update_Date": "2017-07-12",
        "Description": "This repository contains the collection of OpenAPI specification APIs within the NASA's research version of the UTM System.",
        "Public Code Repo": "https://github.com/nasa/utm-apis",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/utm-apis",
        "Contributors": [
            "Joseph Rios"
        ],
        "Labor_Hours": 5696,
        "Categories": [
            "Aeronautics",
            "Optimization",
            "Linear Programming"
        ],
        "Categories_NLP": [
            "data acquisition",
            "systems engineering",
            "nasa program",
            "specification",
            "equipment specification"
        ],
        "Software": "utm-apis"
    },
    {
        "Update_Date": "2015-12-02",
        "Description": "The GTM_DesignSim is a Matlab/Simulink simulation intended for design and analysis of flight control laws. It models the dynamics of a 5.5% scale model of a generic transport aircraft. The simulation was developed to allow fault accommodating control algorithms to be developed and refined in simulation before being tested on an experimental subscale model.",
        "Public Code Repo": "https://github.com/nasa/GTM_DesignSim",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/GTM_DesignSim/wiki",
        "Contributors": [
            "davidecox"
        ],
        "Labor_Hours": 560,
        "Categories": [
            "Flight Control",
            "Framework",
            "Simulation",
            "Toolkit",
            "Web"
        ],
        "Categories_NLP": [
            "aircraft control",
            "computerized simulation",
            "control simulation",
            "aircraft design",
            "transport aircraft",
            "control systems design",
            "dynamic model",
            "flight control",
            "simulation",
            "aircraft model"
        ],
        "Software": "Flight Dynamics Simulation of a Generic Transport Model"
    },
    {
        "Update_Date": "2015-12-02",
        "Description": "NASTRAN is the NASA Structural Analysis System, a finite element analysis program (FEA) completed in the early 1970's. It was the first of its kind and opened the door to computer-aided engineering. Subsections of a design can be modeled and then larger groupings of these elements can again be modeled. NASTRAN can handle elastic stability analysis, complex eigenvalues for vibration and dynamic stability analysis, dynamic response for transient and steady state loads, and random excitation, and static response to concentrated and distributed loads, thermal expansion, and enforced deformations.",
        "Public Code Repo": "https://github.com/nasa/NASTRAN-93",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/NASTRAN-93",
        "Contributors": [
            "jason.duley@nasa.gov"
        ],
        "Labor_Hours": 229792,
        "Categories": [
            "Structural Analysis",
            "FEA",
            "NASTRAN",
            "CAD"
        ],
        "Categories_NLP": [
            "finite element method",
            "dynamic response",
            "dynamic structural analysi",
            "computer aided design",
            "structural vibration",
            "nastran",
            "structural analysi",
            "random vibration",
            "structural stability",
            "structural engineering"
        ],
        "Software": "NASTRAN 93"
    },
    {
        "Update_Date": "2015-06-15",
        "Description": "Open MCT is an open source and web-based mission control framework for visualization of data on desktop and mobile devices. Open MCT is designed for analysis, visualization, operation, and support of spacecraft missions. Open MCT provides an extensible plugin system allowing it to be integrated with existing ground systems, and adapted to support multiple missions as well as non-space applications.",
        "Public Code Repo": "https://github.com/nasa/openmctweb",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/openmctweb",
        "Contributors": [
            "VWoeltjen"
        ],
        "Labor_Hours": 16000,
        "Categories": [
            "operations",
            "Framework",
            "Platform",
            "Web"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "space mission",
            "ground support system",
            "ground based control",
            "spacecraft control",
            "data system",
            "scientific visualization",
            "mission planning",
            "optic",
            "ground operational support system"
        ],
        "Software": "Open MCT"
    },
    {
        "Update_Date": "2015-03-16",
        "Description": "Apache Open Climate Workbench provides a Climate Science library and a suite of tools built on top of it to facilitate multi-model and multi-observation comparisons and visualizations for Climate Scientists.",
        "Public Code Repo": "https://github.com/apache/climate",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://climate.apache.org/",
        "Contributors": [
            "Mr. Michael Joyce"
        ],
        "Labor_Hours": 15792,
        "Categories": [
            "Climate",
            "Visualization",
            "Climate Science",
            "Toolkit",
            "Web",
            "Analysis"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "library",
            "climate model",
            "dynamic model",
            "mathematical model",
            "scientific visualization",
            "climate",
            "comparison"
        ],
        "Software": "Apache Open Climate Workbench"
    },
    {
        "Update_Date": "2014-11-13",
        "Description": "libSPRITE is a set of libraries that have been used on several past projects including flight, technology demonstration, and simulation projects.\n\nlibSPRITE provides a diverse set of functions to attempt to simplify coding and reduce code errors. For example, libSPRITE defines engineering units as types (i.e., Meters or Radians instead of double or int). It includes an engineering unit aware math library.\n\nlibSPRITE includes a task scheduling system that abstracts pthreads and includes a publish subscribe data system for data routing.\n\nIn addition, libSPRITE includes an optional binding to the Lua scripting language for configuring the program, setting parameters, running Lua scripts within C++ tasks and even interacting with the application during runtime.",
        "Public Code Repo": "https://github.com/nasa/libSPRITE",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/libSPRITE/wiki",
        "Contributors": [
            "dheater"
        ],
        "Labor_Hours": 87072,
        "Categories": [
            "framework",
            "library",
            "middleware"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "parameter identification",
            "error",
            "error analysi",
            "systems engineering",
            "scheduling",
            "c++ (programming language)",
            "flight simulation",
            "simulation",
            "systems simulation"
        ],
        "Software": "libSPRITE"
    },
    {
        "Update_Date": "2014-10-22",
        "Description": "The X-Plane Communications Toolbox (XPC) is an open source research tool used to interact with the commercial flight simulator software X-Plane. XPC allows users to control aircraft and receive state information from aircraft simulated in X-Plane using functions written in C or MATLAB in real time over the network. This research tool has been used to visualize flight paths, test control algorithms, simulate an active airspace, or generate out-the-window visuals for in-house flight simulation software.",
        "Public Code Repo": "https://github.com/nasa/XPlaneConnect",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/XPlaneConnect/wiki",
        "Contributors": [
            "teubert"
        ],
        "Labor_Hours": 7888,
        "Categories": [
            "Research Tools",
            "Flight Simulation"
        ],
        "Categories_NLP": [
            "algorithm",
            "computerized simulation",
            "control simulation",
            "simulator",
            "flight path",
            "flight control",
            "real time operation",
            "flight simulation",
            "simulation",
            "flight simulator"
        ],
        "Software": "X-Plane Communication Toolbox (XPC)"
    },
    {
        "Update_Date": "2014-08-26",
        "Description": "This plug-in allows users to create satellites in MCT and track their orbits, in real-time, through various views: Satellite Orbits in 3D via the Earth View plug-in. Real-time locations on a 2D Mercator Projection (A new to MCT; created within this plug-in). All of the views that come standard with the core-MCT distribution (i.e.: MultiColumn View, Plots over time, Alpha, etc.).",
        "Public Code Repo": "https://github.com/nasa/MCT-Plugins",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/MCT-Plugins/wiki",
        "Contributors": [
            "VWoeltjen"
        ],
        "Labor_Hours": 11888,
        "Categories": [
            "Mission Critical Technologies",
            "tracking",
            "telemetry",
            "satellite",
            "imagery",
            "MCT",
            "plug-in"
        ],
        "Categories_NLP": [
            "position (location)",
            "circular orbit",
            "earth (planet)",
            "user requirement",
            "time signal",
            "satellite observation",
            "satellite transmission",
            "real time operation",
            "earth orbit",
            "satellite orbit"
        ],
        "Software": "MCT-Plugins"
    },
    {
        "Update_Date": "2014-07-10",
        "Description": "Mission Control Technologies is a real-time monitoring and visualization platform.",
        "Public Code Repo": "https://github.com/nasa/mct",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/mct/wiki",
        "Contributors": [
            "VWoeltjen"
        ],
        "Labor_Hours": 99248,
        "Categories": [
            "visualization",
            "spacelfight",
            "MCT",
            "application",
            "control",
            "monitoring",
            "mission"
        ],
        "Categories_NLP": [],
        "Software": "mct"
    },
    {
        "Update_Date": "2014-07-30",
        "Description": "The SCRD is a flexible system that can be easily updated or modified for ongoing legislative mandates and is able to provide robust accounting tools for posting and adjusting payments.",
        "Public Code Repo": "https://github.com/nasa/SCRD",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "COE",
        "External Link": "https://github.com/nasa/SCRD",
        "Contributors": [
            "rsial2"
        ],
        "Labor_Hours": 197552,
        "Categories": [
            "tracking",
            "deposits",
            "re-deposits",
            "repository",
            "payment"
        ],
        "Categories_NLP": [
            "systems engineering",
            "optimization",
            "reliability"
        ],
        "Software": "SCRD"
    },
    {
        "Update_Date": "2014-09-17",
        "Description": "Machine-readable schema for NASA's response to the president's digital strategy.",
        "Public Code Repo": "https://github.com/nasa/digital-strategy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/digital-strategy",
        "Contributors": [
            "jasonduley"
        ],
        "Labor_Hours": 1168,
        "Categories": [
            "citizen",
            "repository",
            "digital strategy",
            "developer"
        ],
        "Categories_NLP": [],
        "Software": "Digital-Strategy"
    },
    {
        "Update_Date": "2014-04-07",
        "Description": "Code from the Healthcare Fraud Prevention Partnership (HFPP) through United States Centers for Medicare & Medicaid Services (CMS) challenge in collaboration with NASA's Center of Excellence for Collaboration (CoECI), Harvard, and TopCoder developed software that supports a data exchange network that enables healthcare insurance-paying entities in both the public and private sector to safely and securely share information for purposes of prevention and detection of fraud, waste and abuse across partners.",
        "Public Code Repo": "https://github.com/nasa/CoECI-CMS-Healthcare-Fraud-Prevention",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "COE",
        "External Link": "https://github.com/nasa/CoECI-CMS-Healthcare-Fraud-Prevention",
        "Contributors": [
            "nasarader"
        ],
        "Labor_Hours": 47280,
        "Categories": [
            "fraud prevention",
            "Medicare & Medicaid Services",
            "HFPP"
        ],
        "Categories_NLP": [
            "detection",
            "information system",
            "network",
            "information flow",
            "prevention",
            "data system",
            "nasa program",
            "information dissemination",
            "information transfer",
            "computer network"
        ],
        "Software": "CoECI-CMS-Healthcare-Fraud-Prevention"
    },
    {
        "Update_Date": "2014-01-14",
        "Description": "This is the Medicaid Provider Enrollment Screening Portal Project multi-state, multi-program provider screening application capable of risk scoring, credentialing validation, identify authentication, and sanction checks, that lowered the burden on providers and reduced administrative and infrastructure expenses for states and federal programs.",
        "Public Code Repo": "https://github.com/nasa/coeci-cms-mpsp",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "COE",
        "External Link": "https://github.com/nasa/coeci-cms-mpsp",
        "Contributors": [
            "cyberjag"
        ],
        "Labor_Hours": 335984,
        "Categories": [
            "medicaid",
            "screening",
            "enrollment"
        ],
        "Categories_NLP": [
            "risk",
            "proving",
            "project management",
            "assessment",
            "selection",
            "project planning",
            "systems engineering",
            "solid state"
        ],
        "Software": "coeci-cms-mpsp"
    },
    {
        "Update_Date": "2013-12-31",
        "Description": "Cassini Structured Homepages uses LDAP authorization to provide a security layer to webpage content.",
        "Public Code Repo": "https://github.com/nasa/cash",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "COE",
        "External Link": "https://github.com/nasa/cash",
        "Contributors": [
            "dlconner"
        ],
        "Labor_Hours": 944,
        "Categories": [
            "Cassini",
            "security"
        ],
        "Categories_NLP": [],
        "Software": "cash"
    },
    {
        "Update_Date": "2013-12-31",
        "Description": "The Automatic Documentation software creates Microsoft Documents automatically using Text and Template files.",
        "Public Code Repo": "https://github.com/nasa/autodoc",
        "License": [
            "ASL"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/autodoc",
        "Contributors": [
            "dlconner"
        ],
        "Labor_Hours": 640,
        "Categories": [
            "application",
            "automation",
            "document",
            "templates"
        ],
        "Categories_NLP": [],
        "Software": "autodoc"
    },
    {
        "Update_Date": "2013-12-03",
        "Description": "Code from the United States Agency for International Development (USAID) and Humanity United (HU) challenge for Atrocity Prevention Modeling in collaboration with NASA's Center of Excellence for Collaboration (CoECI). This package contains the top 5 solutions submitted for the 'Tech Challenge for Atrocity Prevention' competition.",
        "Public Code Repo": "https://github.com/NASA-Tournament-Lab/CoECI-USAID-Atrocity-Prevention-Model",
        "License": [
            "ALv2"
        ],
        "NASA Center": "COE",
        "External Link": "https://community.topcoder.com/longcontest/?module=ViewProblemStatement&rd=15761&pm=12634",
        "Contributors": [
            "rsial2"
        ],
        "Labor_Hours": 2944,
        "Categories": [
            "prediction",
            "Analytics",
            "algorithm",
            "data mining"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "international cooperation",
            "systems engineering",
            "prevention",
            "competition",
            "nasa program",
            "mathematical model",
            "computational fluid dynamic",
            "aircraft model",
            "model"
        ],
        "Software": "COECI-USAID-Atrocity-Prevention-Model"
    },
    {
        "Update_Date": "2013-11-06",
        "Description": "Code from the United States Centers for Medicare & Medicaid Services (CMS) challenge in collaboration with NASA's Center of Excellence for Collaboration (CoECI), Harvard, and TopCoder developed an iPhone app and reporting web application used to track and compile transfers of value (e.g. gift, meal, speaking fee) from industry manufacturers (e.g. pharmaceutical companies) to physicians.",
        "Public Code Repo": "https://github.com/NASA-Tournament-Lab/coeci-cms-mpsp",
        "License": [
            "ALv2"
        ],
        "NASA Center": "COE",
        "External Link": "https://github.com/nasa/CoECI-CMS-Open-Payment",
        "Contributors": [
            "nasarader"
        ],
        "Labor_Hours": 335984,
        "Categories": [
            "Analytics",
            "tracking",
            "application",
            "reporting"
        ],
        "Categories_NLP": [
            "aircraft industry",
            "technology utilization",
            "aerospace industry",
            "manufacturing",
            "nasa program",
            "government/industry relation",
            "marketing",
            "aerospace technology transfer",
            "industry",
            "technology transfer"
        ],
        "Software": "CoECI-CMS-Open-Payment"
    },
    {
        "Update_Date": "2013-09-03",
        "Description": "This repository consists of the various scripts required to make our VADER system work. The variable emissivity radiator aerogel insulation blanket dual zone thermal control experiment suite for responsive space (STP-H3-VADER) investigation tests a variable emissivity radiator and a new form of multilayer insulation that uses Aerogel as the thermal isolator in order to protect the spacecraft from the harsh extremes of the space environment. The Aerogel material provides a more durable, lighter and cheaper alternative to traditional spacecraft thermal blankets. The use of this material could reduce the costs related to spaceflight by reducing the required spacecraft mass and increasing design efficiency.",
        "Public Code Repo": "https://github.com/nasa/VADER",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/VADER/wiki",
        "Contributors": [
            "pmosbach"
        ],
        "Labor_Hours": 43184,
        "Categories": [
            "operations",
            "software",
            "VADER"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "thermal insulation",
            "temperature control",
            "control systems design",
            "spacecraft construction material",
            "emissivity",
            "spacecraft design",
            "spaceborne experiment",
            "aerospace environment",
            "space flight"
        ],
        "Software": "VADER"
    },
    {
        "Update_Date": "2013-06-14",
        "Description": "This is the source code for the WordPress theme that powers data.nasa.gov. Data.nasa.gov is NASA's flagship platform for sharing information about the vast data we collect and store over 100 years of U.S. aeronautics and space data. Developers, technologists, entrepreneurs, citizen scientists, and many others can contribute directly to the exploration of space and Earth by helping to create new ways of looking at this data.",
        "Public Code Repo": "https://github.com/nasa/data.nasa.gov",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "HQ",
        "External Link": "https://github.com/nasa/data.nasa.gov",
        "Contributors": [
            "seanherron"
        ],
        "Labor_Hours": 5584,
        "Categories": [
            "operations",
            "open source",
            "datasets",
            "NASA",
            "software"
        ],
        "Categories_NLP": [
            "geomagnetism",
            "data acquisition",
            "information system",
            "space program",
            "space exploration",
            "data system",
            "nasa program",
            "nasa space program",
            "spacecraft power supplie",
            "earth science"
        ],
        "Software": "data.nasa.gov"
    },
    {
        "Update_Date": "2016-07-28",
        "Description": "This is the source code for the WordPress theme that powers code.nasa.gov. Code.nasa.gov expands NASA's open source activities, surfaces existing activities, and guides internal and external groups in open development, release, and contribution. In doing so, NASA hopes to lower barriers to building open technology in partnership with the public.",
        "Public Code Repo": "https://github.com/nasa/code.nasa.gov",
        "License": [
            "ALv2"
        ],
        "NASA Center": "HQ",
        "External Link": "https://github.com/nasa/code.nasa.gov",
        "Contributors": [
            "seanherron"
        ],
        "Labor_Hours": 5456,
        "Categories": [
            "operations",
            "open source",
            "NASA",
            "code",
            "software"
        ],
        "Categories_NLP": [
            "surface propertie",
            "lunar surface",
            "nasa program",
            "nasa space program",
            "technology transfer"
        ],
        "Software": "code.nasa.gov"
    },
    {
        "Update_Date": "2011-12-21",
        "Description": "The NASA Ames Stereo Pipeline is a suite of automated geodesy & stereogrammetry tools designed for processing planetary imagery captured from orbiting and landed robotic explorers on other planets.",
        "Public Code Repo": "https://github.com/nasa/StereoPipeline",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/StereoPipeline",
        "Contributors": [
            "zmoratto"
        ],
        "Labor_Hours": 31504,
        "Categories": [
            "geodesy",
            "open source",
            "Neo-Geography Toolkit",
            "imagery",
            "stereogrammetry",
            "NASA",
            "NGT"
        ],
        "Categories_NLP": [
            "explorer satellite",
            "circuit",
            "boundary layer",
            "software development tool",
            "stability",
            "planet",
            "nasa program",
            "tool",
            "pipeline",
            "reliability"
        ],
        "Software": "StereoPipeline"
    },
    {
        "Update_Date": "2011-06-30",
        "Description": "Space weather media viewer.",
        "Public Code Repo": "https://github.com/nasa/NASA-Space-Weather-Media-Viewer",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://play.google.com/store/apps/details?id=air.NasaSpaceViewer",
        "Contributors": [
            "MatthewValverde"
        ],
        "Labor_Hours": 6480,
        "Categories": [
            "imagery",
            "Google",
            "Android",
            "viewer",
            "media",
            "weather",
            "space"
        ],
        "Categories_NLP": [],
        "Software": "NASA-Space-Weather-Media-Viewer"
    },
    {
        "Update_Date": "2014-09-10",
        "Description": "Tool for Analysis of Surface Cracks (TASC) is a computer program created in MATLAB to enable easy computation of nonlinear J-integral solutions for surface cracked plates in tension by accessing and interpolating between the 600 nonlinear surface crack solutions documented in NASA/TP-2011-217480. The only required inputs are the surface crack dimensions (2c and a), plate cross-section dimensions (W and B), and linear plus power law material properties of elastic modulus, yield strength, and strain hardening coefficient. With the geometry and material parameters entered, TASC interpolates to the appropriate J(\u03a6) vs. crack mouth opening displacement (CMOD) and far-field tension stress, \u03c3, vs. CMOD solution, providing the full solution as CMOD ranges from zero out to the CMOD limit of the solution space for the given input parameters. TASC was developed by the Material and Processes Laboratory at NASA's Marshall Space Flight Center.",
        "Public Code Repo": "https://sourceforge.net/projects/tascnasa",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://sourceforge.net/projects/tascnasa/",
        "Contributors": [
            "pa-allen"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "displacement",
            "analysis",
            "cracks",
            "tool",
            "surface",
            "technology"
        ],
        "Categories_NLP": [
            "crack propagation",
            "yield point",
            "geometry",
            "structural analysi",
            "tensile stres",
            "crack geometry",
            "plates (structural members)",
            "stress analysi",
            "elastic propertie",
            "crack"
        ],
        "Software": "Tool for Analysis of Surface Cracks (TASC)"
    },
    {
        "Update_Date": "2011-11-20",
        "Description": "Datacasting is a RSS publish-subscribe method for delivering Earth Science data. A Feed Reader provides feed filtering, data download, and the ability to mash-up data with information related to geophysical events.",
        "Public Code Repo": "https://sourceforge.net/projects/datacasting/files/latest/download",
        "License": [
            "BSD"
        ],
        "NASA Center": "JPL",
        "External Link": "http://datacasting.jpl.nasa.gov/",
        "Contributors": [
            "jplsr"
        ],
        "Labor_Hours": 30,
        "Categories": [
            "filter",
            "datacasting",
            "geophysics",
            "data",
            "RSS",
            "earth science",
            "geophysical events"
        ],
        "Categories_NLP": [
            "earth surface",
            "data acquisition",
            "geography",
            "information system",
            "data processing",
            "earth (planet)",
            "earth science",
            "data reduction",
            "information management",
            "seismology"
        ],
        "Software": "Earth Science Datacasting"
    },
    {
        "Update_Date": "2014-07-08",
        "Description": "The Interplanetary Overlay Network (ION) software distribution is an implementation of Delay-Tolerant Networking (DTN) architecture as described in Internet RFC 4838. It includes implementations of the DTN Bundle Protocol, the Licklider Transmission Protocol, and two CCSDS application protocols that have been adapted to run over the BP/LTP stack: the CCSDS File Delivery Protocol and Asynchronous Message Service.",
        "Public Code Repo": "https://sourceforge.net/projects/ion-dtn/files/latest/download",
        "License": [
            "BSD"
        ],
        "NASA Center": "JPL",
        "External Link": "https://sourceforge.net/projects/ion-dtn/",
        "Contributors": [
            "jplsr"
        ],
        "Labor_Hours": 372512,
        "Categories": [
            "network",
            "distribution",
            "ION",
            "earth science",
            "software",
            "interplanetary overlay network"
        ],
        "Categories_NLP": [
            "data transmission",
            "internet",
            "communication network",
            "distributed processing",
            "protocol (computers)",
            "file maintenance (computers)",
            "computer network",
            "message",
            "architecture (computers)",
            "message processing"
        ],
        "Software": "Interplanetary Overlay Network (ION) Software Distribution (DTN)"
    },
    {
        "Update_Date": "2011-12-05",
        "Description": "The Data Productivity Toolkit is a collection of linux command-line tools designed to facilitate the analysis of text-based data sets. Modeled after the general linux pipeline tools such as awk, grep, and sed, the kit provides powerful tools for selecting/combining data, performing statistics, and visualizing results. The tools are all written in python and in many instances provide a command-line API to basic python and numpy/scipy/matplotlib routines.",
        "Public Code Repo": "https://sourceforge.net/projects/dptoolkit/files/latest/download",
        "License": [
            "BSD"
        ],
        "NASA Center": "JPL",
        "External Link": "https://sourceforge.net/projects/dptoolkit/",
        "Contributors": [
            "jplsr"
        ],
        "Labor_Hours": 80,
        "Categories": [
            "productivity",
            "data",
            "toolkit",
            "data collection"
        ],
        "Categories_NLP": [
            "data acquisition",
            "statistical analysi",
            "data management",
            "data processing",
            "data system",
            "data reduction",
            "data base",
            "on-line system",
            "pipeline",
            "data structure"
        ],
        "Software": "Data Productivity Toolkit"
    },
    {
        "Update_Date": "2014-09-08",
        "Description": "The SunPy project is an effort to create an open-source software library for solar physics using the Python programming language. More information at http://www.sunpy.org.",
        "Public Code Repo": "https://github.com/sunpy/sunpy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://www.sunpy.org",
        "Contributors": [
            "segfaulthunter"
        ],
        "Labor_Hours": 19840,
        "Categories": [
            "solar",
            "libary",
            "physics",
            "repository"
        ],
        "Categories_NLP": [
            "library",
            "information system",
            "programming environment",
            "information retrieval",
            "programming language",
            "software development tool",
            "language programming",
            "high level language",
            "information theory",
            "machine oriented language"
        ],
        "Software": "SunPy"
    },
    {
        "Update_Date": "2013-05-01",
        "Description": "Mutil is a set of standard utilities that employ multiple types of parallelism and other optimizations to achieve maximum performance on modern file systems. Multi-threading is used to ensure that nodes are kept as busy as possible. Double buffering allows individual operations within a single task to be overlapped using asynchronous I/O. Multi-node cooperation allows different nodes to take part in the same task. Split file processing allows multiple threads to operate concurrently on the same file. Finally, additional optimizations such as buffer management help eliminate other bottlenecks that can reduce performance. Mutil currently includes drop-in replacements for cp and md5sum from GNU coreutils, which have achieved 10/30x rates on one/many nodes.",
        "Public Code Repo": "https://sourceforge.net/projects/mutil/files/latest/download",
        "License": [
            "GPLv3"
        ],
        "NASA Center": "ARC",
        "External Link": "http://mutil.sourceforge.net",
        "Contributors": [
            "pkolano"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "optimization",
            "multi-thread",
            "file",
            "nodes",
            "processing",
            "parallelism",
            "utilities"
        ],
        "Categories_NLP": [
            "data management",
            "operating systems (computers)",
            "buffer storage",
            "distributed processing",
            "systems analysi",
            "parallel processing (computers)",
            "optimization",
            "information management",
            "management system",
            "computer systems design"
        ],
        "Software": "Multi-Threaded Multi-Node Utilities (Mutil)"
    },
    {
        "Update_Date": "2012-09-06",
        "Description": "Mesh is a secure, lightweight grid middleware that is based on the addition of a single sign-on capability to the built-in public key authentication mechanism of SSH using system call interposition. Resources may be added to a Mesh-based grid in a matter of minutes using just five small files and two environment variable settings. Mesh adheres to fundamental security principles and was designed to be compatible with strong security mechanisms including two-factor authentication, SSH bastions, and restrictive firewalls. Mesh uses a remote command model, which is based on stock SSH clients and the syntax and commands already understood by users, thus requires no additional software or knowledge to utilize effectively. Several existing services have been integrated with Mesh to provide resource discovery and query, high performance file transfer, and job management.",
        "Public Code Repo": "https://sourceforge.net/projects/mesh/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://mesh.sourceforge.net",
        "Contributors": [
            "pkolano"
        ],
        "Labor_Hours": 86005,
        "Categories": [
            "host",
            "ssh",
            "middleware"
        ],
        "Categories_NLP": [
            "computer information security",
            "distributed processing",
            "resource allocation",
            "information management",
            "computational grid",
            "security",
            "computer network",
            "human-computer interface",
            "operating systems (computers)",
            "file maintenance (computers)"
        ],
        "Software": "Middleware Using Existing SSH Hosts (MESH)"
    },
    {
        "Update_Date": "2013-05-13",
        "Description": "Ballast is a tool for balancing user load across SSH servers based on configurable criteria such as CPU load and system availability. Ballast is invoked as part of the SSH login process, hence has access to the user name, which is not available in traditional load balancers. This gives ballast the unique ability to perform user-specific load balancing, which has several benefits including separating users who have historically generated high loads and providing a common login interface to users who may be separated based on other criteria such as system accessibility. Ballast includes a simple client, a lightweight data server, and a data collection agent.",
        "Public Code Repo": "https://sourceforge.net/projects/ballast/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://ballast.sourceforge.net",
        "Contributors": [
            "pkolano"
        ],
        "Labor_Hours": 688,
        "Categories": [
            "host",
            "ballast",
            "ssh",
            "clustering"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "data acquisition",
            "data base",
            "interface",
            "information system",
            "data management",
            "data base management system",
            "information retrieval",
            "data system",
            "loads (forces)"
        ],
        "Software": "Balancing Load Across Systems (Ballast)"
    },
    {
        "Update_Date": "2014-08-12",
        "Description": "Software implementation of JPL published paper for performing lossless hyper-spectral and milti-spectral data compression. The implementation was executed to confirm the results obtained by JPL independently. Implemented JPL published paper and its revised version presented to the CCSDS hyper/multi-spectral data compression working group. The implementation follows every step listed in the relevant papers and usess C-code for simplicity. The software takes 3-dimensional test data provided by the CCSDS working group and created predictor error results that can be further encoded with other known techniques.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/LHD/LHD.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/LHD",
        "Contributors": [
            "pkolano"
        ],
        "Labor_Hours": 192,
        "Categories": [
            "lossless",
            "CCSDS",
            "data",
            "compression",
            "hyper-spectral",
            "milti-spectral"
        ],
        "Categories_NLP": [
            "error correcting code",
            "error detection code",
            "software development tool",
            "error",
            "error analysi",
            "c (programming language)",
            "symbol",
            "data reduction",
            "program verification (computers)",
            "data compression"
        ],
        "Software": "Lossless Hyper-multi-spectral data compression software"
    },
    {
        "Update_Date": "2013-03-08",
        "Description": "The Simple, Scalable, Script-based Science Processor for Measurements (S4PM) is a system for highly automated processing of science data, scalable up to large processing systems and scalable down to small, special-purpose processing strings.",
        "Public Code Repo": "https://sourceforge.net/projects/s4pm/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/s4pm",
        "Contributors": [
            "btrivedi"
        ],
        "Labor_Hours": 14608,
        "Categories": [
            "measurements",
            "process",
            "science",
            "automation",
            "data",
            "script-based",
            "simple",
            "scalable"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data processing equipment",
            "data processing",
            "optical data processing",
            "data system",
            "data reduction",
            "signal processing"
        ],
        "Software": "Simple, Scalable, Script-based Science Processor for Measurements (S4PM)"
    },
    {
        "Update_Date": "2014-09-16",
        "Description": "G-SDSU core modules enables users to insert their own satellite simulator to convert model-simulated atmosphere states to various types of satellite observable signals (radiance or backscattering signals), and to compare such data with comparable measurements collected by corresponding satellite level-1 measurement.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/G-SDSU-core.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/G-SDSU/index.php",
        "Contributors": [
            "opensource@gsfc.nasa.gov"
        ],
        "Labor_Hours": 3344,
        "Categories": [
            "measurements",
            "algorithm",
            "satellite",
            "observation",
            "mission",
            "modeling",
            "GPM",
            "atmoshpere"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "atmospheric model",
            "simulator",
            "data simulation",
            "radiance",
            "satellite instrument",
            "satellite transmission",
            "satellite observation",
            "simulation"
        ],
        "Software": "Goddard Satellite Data Simulation Unit (G-SDSU)"
    },
    {
        "Update_Date": "2013-04-24",
        "Description": "ViSBARD (Visual System for Browsing, Analysis, and Retrieval of Data) is an interactive visualization and analysis tool for space physics data. It provides an integrated 3-D/2-D environment to analyze measurements across many spacecraft and MHD models.",
        "Public Code Repo": "https://sourceforge.net/projects/visbard/files/latest/download",
        "License": [
            "ALv2",
            "GPLv3"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://spdf.gsfc.nasa.gov/research/visualization/visbard/index.html",
        "Contributors": [
            "boller8"
        ],
        "Labor_Hours": 325264,
        "Categories": [
            "visual",
            "browse",
            "retrieval",
            "data",
            "tool",
            "system",
            "space",
            "MHD",
            "analysis",
            "physics",
            "models"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "mathematical model",
            "data reduction",
            "data system",
            "systems analysi",
            "data retrieval",
            "data base",
            "data processing",
            "scientific visualization",
            "aerospace environment"
        ],
        "Software": "Visual System for Browsing, Analysis and Retrieval of Data (ViSBARD)"
    },
    {
        "Update_Date": "2013-04-24",
        "Description": "This software enables easy comparison of ground- and space-based radar observations. The software was initially designed to compare ground radar reflectivity from operational, ground-based, S- and C-band meteorological radars with comparable measurements from the Tropical Rainfall Measuring Mission satellite's Precipitation Radar instrument. The software is also applicable to other ground-based and space-based radars. The software allows both ground and space based radar data to be compared for validation purposes.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GSRadar/GS-Radar.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GSRadar/index.php",
        "Contributors": [
            "kenneth.r.morris@nasa.gov"
        ],
        "Labor_Hours": 6608,
        "Categories": [
            "ground",
            "comparison",
            "validation",
            "matching",
            "radar",
            "software",
            "volume",
            "space"
        ],
        "Categories_NLP": [
            "c band",
            "meteorological radar",
            "satellite instrument",
            "precipitation (meteorology)",
            "radar tracking",
            "satellite observation",
            "precipitation particle measurement",
            "trmm satellite",
            "rain",
            "radar data"
        ],
        "Software": "Ground and space radar volume matching and comparison software"
    },
    {
        "Update_Date": "2014-09-16",
        "Description": "The Global Modeling and Assimilation Office (GMAO) has delivered the next generation general circulation model, GEOS-5. This system represents a new paradigm for systems development, in that GEOS-5 has been developed with the Earth System Modeling Framework (ESMF) for its internal architecture using the MAPL software toolkit developed for GEOS-5.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/GEOSagcm-Eros_7_24.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GEOS-5/index.php",
        "Contributors": [
            "Steven Pawson"
        ],
        "Labor_Hours": 239968,
        "Categories": [
            "circulation",
            "CGM",
            "Coupled",
            "Stand-alone",
            "Numerical",
            "Prediction",
            "Land",
            "Biology",
            "Forecasting",
            "Experimental",
            "Atmosphere",
            "earth science",
            "Seasonal",
            "Weather",
            "GEOS-5",
            "Ocean",
            "analysis",
            "Climate",
            "Model",
            "software"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "dynamic model",
            "mathematical model",
            "systems engineering",
            "earth (planet)",
            "assimilation",
            "software development tool",
            "atmospheric circulation",
            "atmospheric general circulation model",
            "architecture (computers)"
        ],
        "Software": "GEOS-5 GCM Modeling Software"
    },
    {
        "Update_Date": "2016-10-26",
        "Description": "The General Mission Analysis Tool (GMAT), developed at the Goddard Space Flight Center, is the world\u2019s only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2016a/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://gmat.gsfc.nasa.gov/",
        "Contributors": [
            "stevenhughes"
        ],
        "Labor_Hours": 33152,
        "Categories": [
            "Simulations",
            "visualization",
            "mission",
            "planning",
            "mathematics",
            "tool",
            "physics"
        ],
        "Categories_NLP": [
            "navigation",
            "space navigation",
            "space mission",
            "software development tool",
            "systems engineering",
            "support system",
            "design analysi",
            "systems analysi",
            "low earth orbit",
            "mission planning"
        ],
        "Software": "General Mission Analysis Tool (GMAT R2016a)"
    },
    {
        "Update_Date": "2015-11-02",
        "Description": "The General Mission Analysis Tool (GMAT), developed at the Goddard Space Flight Center, is the world\u2019s only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2015a/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://gmat.gsfc.nasa.gov/",
        "Contributors": [
            "djcinsb"
        ],
        "Labor_Hours": 438592,
        "Categories": [
            "Simulations",
            "visualization",
            "mission",
            "planning",
            "mathematics",
            "tool",
            "physics"
        ],
        "Categories_NLP": [
            "navigation",
            "space navigation",
            "space mission",
            "software development tool",
            "systems engineering",
            "support system",
            "design analysi",
            "systems analysi",
            "low earth orbit",
            "mission planning"
        ],
        "Software": "General Mission Analysis Tool (GMAT R2015a)"
    },
    {
        "Update_Date": "2014-05-13",
        "Description": "The Goddard Mission Services Evolution Center (GMSEC) program was established in 2001 to coordinate ground and flight data systems development and services at GSFC with the ultimate goal to efficiently support current and future GSFC mission services. The GMSEC architecture is a ground systems architecture that spans the full mission lifecycle from development through operations. The architecture provides a secure, scalable and extensible communications and data system that supports all aspects of a mission from onboard processing through the Mission Operations Center (MOC) to public access on the Internet. The architecture includes an Application Programming Interface (API) and message bus to provide a publish and subscribe communication mechanism. The GMSEC architecture and source code are based on an enterprise architecture approach with a message-oriented cross-platform enterprise middleware (information software bus).",
        "Public Code Repo": "https://sourceforge.net/projects/gmsec/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://sourceforge.net/projects/gmsec/",
        "Contributors": [
            "bwiegand"
        ],
        "Labor_Hours": 475120,
        "Categories": [
            "flight",
            "mission",
            "systems",
            "MOC",
            "data",
            "GMSEC",
            "middleware",
            "ground",
            "support",
            "API"
        ],
        "Categories_NLP": [
            "onboard data processing",
            "data transmission",
            "communication network",
            "data system",
            "ground operational support system",
            "data integration",
            "real time operation",
            "information system",
            "data processing",
            "architecture (computers)"
        ],
        "Software": "Goddard Mission Services Evolution Center Architecture (GMSEC) API"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "BigView allows for interactive panning and zooming of images of arbitrary size on desktop PCs running linux. Additionally, it can work in a multi-screen environment where multiple PCs cooperate to view a single large image. Using this software, one can explore -- on relatively modest machines -- images such as the Mars Orbiter Camera mosaic [92160x33280 pixels].",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/bigView.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/bigview/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 24928,
        "Categories": [
            "image",
            "composite",
            "image processing",
            "PC",
            "bigview",
            "linux"
        ],
        "Categories_NLP": [
            "mars (planet)",
            "personal computer",
            "programming environment",
            "image resolution",
            "unix (operating system)",
            "imaging technique",
            "image analysi",
            "camera",
            "image processing",
            "ccd camera"
        ],
        "Software": "BigView"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Block GP is a Gaussian Process regression framework for multimodal data, that can be an order of magnitude more scalable than existing state-of-the-art nonlinear regression algorithms. The framework builds local Gaussian Processes on semantically meaningful partitions of the data and provides higher prediction accuracy than a single global model with very high confidence.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/BlockGP.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/block-gp/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 960,
        "Categories": [
            "guassian",
            "block-GP",
            "algorithm",
            "data",
            "regression",
            "multimodal",
            "scalable"
        ],
        "Categories_NLP": [
            "algorithm",
            "accuracy",
            "prediction",
            "regression analysi",
            "linear prediction",
            "stochastic processe",
            "mathematical model",
            "prediction analysis technique",
            "estimating",
            "random processe"
        ],
        "Software": "Block-GP: Scalable Gaussian Process Regression"
    },
    {
        "Update_Date": "2004-01-26",
        "Description": "CODE is a software framework for control and observation in distributed environments. The basic functionality of the framework allows a user to observe a distributed set of resources, services, and applications. A user can also use the framework to manage distributed resources, services, and applications.",
        "Public Code Repo": "http://www.nas.nasa.gov/Resources/Software/Open-Source/Downloads/Code/code-1_0b1.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://www.nas.nasa.gov/Resources/Software/Open-Source/code.html",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 12640,
        "Categories": [
            "distributed environments",
            "control",
            "application",
            "observation"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "programming environment",
            "distributed processing",
            "software development tool",
            "interactive control",
            "virtual reality",
            "object-oriented programming",
            "human-computer interface",
            "computer network",
            "operating systems (computers)"
        ],
        "Software": "CODE software framework"
    },
    {
        "Update_Date": "2015-05-04",
        "Description": "The purpose of this Opensource forum is to promote the development of a JAVA based Application Programming Interface for the field of Mass Properties Engineering.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/MPE_E_Std_API_Distribution_2010_08_25.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/e-standards-mass-properties-engineering/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 1216,
        "Categories": [
            "data object manipulation",
            "properties",
            "java",
            "mass",
            "engineering"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "interface",
            "programming environment",
            "standard",
            "measuring instrument",
            "systems engineering",
            "engineering",
            "mechanical engineering",
            "human-computer interface"
        ],
        "Software": "E-Standards for Mass Properties Engineering"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "The Geometry Manipulation Protocol (GMP) is a library which serializes datatypes between XML and ANSI C data structures to support CFD applications. This library currently provides a description of geometric configurations, general moving-body scenarios (prescribed and/or 6-DOF), and control surface settings.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/gmp-1.0.0.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/gmp/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 20432,
        "Categories": [
            "ANSI C",
            "library",
            "geometry",
            "earth science",
            "CFD",
            "XML",
            "GMP"
        ],
        "Categories_NLP": [
            "surface propertie",
            "library",
            "three dimensional bodie",
            "protocol (computers)",
            "aerodynamic configuration",
            "rigid structure"
        ],
        "Software": "Geometry Manipulation Protocol (GMP)"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Growler is a C++-based distributed object and event architecture. It is written in C++, and supports serialization of C++ objects as part of its Remote Method Invocation, Event Channels, and in its Interface Definition Language. Its primary application has been in support of interactive, distributed visualization, computational steering, and concurrent visualization, but it is a general purpose system for distributed programming.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/growler-0.3.5.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://growler.sourceforge.net/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 102032,
        "Categories": [
            "distributed",
            "event channels",
            "IDL",
            "remote method invocation",
            "C++",
            "data visualization",
            "GMP",
            "object"
        ],
        "Categories_NLP": [
            "distributed processing",
            "programming language",
            "parallel programming",
            "high level language",
            "c++ (programming language)",
            "object-oriented programming",
            "scientific visualization",
            "architecture (computers)",
            "parallel processing (computers)",
            "flow visualization"
        ],
        "Software": "Growler"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "IND is applicable to most data sets consisting of independent instances, each described by a fixed length vector of attribute values. An attribute value may be a number, one of a set of attribute specific symbols, or omitted. One of the attributes is delegated the 'target' and IND grows trees to predict the target. Prediction can then be done on new data or the decision tree printed out for inspection.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/IND2.1.2.1-NASA-OSA.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/ind/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 14144,
        "Categories": [
            "prediction",
            "decision tree",
            "IND",
            "data processing",
            "manipulation"
        ],
        "Categories_NLP": [
            "vectors (mathematics)",
            "prediction",
            "trees (mathematics)",
            "decision making",
            "binary data",
            "prediction analysis technique",
            "symbol",
            "inspection",
            "decision theory",
            "data structure"
        ],
        "Software": "IND: Creation and Manipulation of Decision Trees from Data"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "The Execution Service allows users to submit, monitor, and cancel complex jobs. Each job consists of a set of tasks that perform actions such as executing applications and managing data. Each task is executed based on a starting condition that is an expression on the states of other tasks. This formulation allows tasks to be executed in parallel and also allows a user to specify tasks to execute when other tasks succeed, fail or are cancelled.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-es-1.0.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/ipg/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 25856,
        "Categories": [
            "execution service",
            "parallel",
            "data processing",
            "IPG",
            "data management"
        ],
        "Categories_NLP": [
            "steady state",
            "task"
        ],
        "Software": "IPG Execution Service"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "JavaGenes is a fairly general purpose evolutionary software system written in Java. It implements several versions of the genetic algorithm, simulated annealing, stochastic hill climbing and other search techniques. JavaGenes has been used to evolve molecules, atomic force field parameters, digital circuits, Earth Observing Satellite schedules, and antennas.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/JavaGenes.0.7.68.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/javagenes/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 205936,
        "Categories": [
            "javagenes",
            "algorithm",
            "genetic",
            "java",
            "search",
            "EOS"
        ],
        "Categories_NLP": [
            "superconducting device",
            "algorithm",
            "antenna design",
            "genetic algorithm",
            "earth observing system (eos)",
            "simulated annealing"
        ],
        "Software": "JavaGenes"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Libibvpp is a C++ wrapper around libibverbs, which is part of the OpenFabrics software suite (www.openfabrics.org).",
        "Public Code Repo": "https://ti.arc.nasa.gov/opensource/projects/libibvpp",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/libibvpp/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 24304,
        "Categories": [
            "wrapper",
            "C++",
            "openfabrics",
            "libibvpp",
            "libibverbs"
        ],
        "Categories_NLP": [],
        "Software": "Libibvpp"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Livingstone2 is a reusable artificial intelligence (AI) software system designed to assist spacecraft, life support systems, chemical plants or other complex systems in operating robustly with minimal human supervision, even in the face of hardware failures or unexpected events. Livingstone2 diagnoses the current state of the spacecraft or other system and recommends commands or repair actions that will allow the system to continue operations.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/L2-OSA-unix_2.7.8.2.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/livingstone2/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 436176,
        "Categories": [
            "diagnostics",
            "spacecraft",
            "operation",
            "artificial intelligence",
            "AI",
            "livingstone2",
            "autonomous",
            "life support"
        ],
        "Categories_NLP": [
            "spacecraft environment",
            "failure analysi",
            "failure",
            "complex system",
            "systems engineering",
            "artificial intelligence",
            "life support system",
            "maintenance",
            "system failure",
            "hardware"
        ],
        "Software": "Livingstone2"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Mariana is an algorithm that efficiently optimizes the hyperparameters for Support Vector Machines for regression and classification.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/Mariana_.tgz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mariana/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 3456,
        "Categories": [
            "hyperparameters",
            "algorithm",
            "regression",
            "classification",
            "mariana"
        ],
        "Categories_NLP": [],
        "Software": "Mariana"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "The MST is a simulation framework, supporting the development of autonomy technology for planetary exploration vehicles. The MST provides a software test bed which includes simulated robotic platforms, sensors, and environments.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/MST_v1-0b.tgz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mission-simulation-toolkit/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 63872,
        "Categories": [
            "MST",
            "robotics",
            "planetary exploration",
            "test bed",
            "sensor",
            "mission simulation toolkit",
            "autonomous"
        ],
        "Categories_NLP": [
            "test vehicle",
            "environment simulation",
            "simulation",
            "underwater vehicle",
            "software development tool",
            "robotic",
            "sensor",
            "test stand",
            "autonomy",
            "flight simulation"
        ],
        "Software": "Mission Simulation ToolKit (MST)"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Multi-Fidelity Simulator, MFSim is a pluggable framework for creating an air traffic flow simulator at multiple levels of fidelity. The framework is designed to allow low-fidelity simulations of the entire US Airspace to be completed very quickly (on the order of seconds). The framework allows higher-fidelity plugins to be added to allow higher-fidelity simulations to occur in certain regions of the airspace concurrently with the low-fidelity simulation of the full airspace.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/MFSim1_0.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/mfsim/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 993056,
        "Categories": [
            "air traffic flow",
            "MFS",
            "multi-fidelity",
            "aviation",
            "MFSim",
            "airspace",
            "simulator"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "simulator",
            "air traffic control",
            "control simulation",
            "simulation",
            "airspace",
            "air flow",
            "traffic",
            "flight simulation",
            "systems simulation"
        ],
        "Software": "Multi-Fidelity Simulator (MFSim)"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "NodeMon is a resource utilization monitor tailored to the Altix architecture, but is applicable to any Linux system or cluster. It allows distributed resource monitoring via the Growler software infrastructure. It is modular, with existing modules for monitoring of cpu, memory, network, and numalink activity.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/nodemon-0.3.3.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/nodemon/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 23456,
        "Categories": [
            "nodemon",
            "resource",
            "modular",
            "growler",
            "utilization",
            "monitor"
        ],
        "Categories_NLP": [
            "distributed processing",
            "module",
            "computer storage device",
            "unix (operating system)",
            "memory (computers)",
            "network",
            "central processing unit",
            "computer network",
            "architecture (computers)",
            "monitor"
        ],
        "Software": "NodeMon"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Pour is a general-purpose information service framework designed to accommodate a wide variety of information types with support for high volume, low frequency periodic updates, user-specified updates, and automatic updates collected on-demand when needed. Information is stored exclusively in XML and retrieved using standard XPath queries over a single unified namespace independent of the information's source.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-pour-1.0.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/pour/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 7920,
        "Categories": [
            "xpath",
            "information service",
            "pour",
            "xml"
        ],
        "Categories_NLP": [
            "information theory",
            "standard",
            "information system",
            "information retrieval",
            "user requirement",
            "document markup language",
            "support system",
            "information dissemination",
            "information management",
            "frequency"
        ],
        "Software": "Pour"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "The ROBUS-2 Protocol Processor (RPP) is a custom-designed hardware component implementing the functionality of the ROBUS-2 fault-tolerant communication system. The Reliable Optical Bus (ROBUS) is the core communication system of the Scalable Processor-Independent Design for Enhanced Reliability (SPIDER), a general-purpose fault-tolerant integrated modular architecture currently under development at NASA Langley Research Center. ROBUS is a time-division multiple access (TDMA) broadcast communication system with medium access control by means of time-indexed communication schedule. ROBUS-2 is a developmental version of the ROBUS providing guaranteed fault-tolerant services to the attached processing elements (PEs), in the presence of a bounded number of faults.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/robus2.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/robus-2/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 7408,
        "Categories": [
            "processing elements",
            "spider",
            "robus-2",
            "fault tolerant",
            "TDMA",
            "robus",
            "fault-tolerant",
            "rpp"
        ],
        "Categories_NLP": [
            "data processing equipment",
            "protocol (computers)",
            "systems engineering",
            "central processing unit",
            "computer systems design",
            "fault tolerance",
            "real time operation",
            "computer component",
            "architecture (computers)",
            "channels (data transmission)"
        ],
        "Software": "ROBUS-2"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "sequenceMiner was developed to address the problem of detecting and describing anomalies in large sets of high-dimensional symbol sequences. sequenceMiner works by performing unsupervised clustering (grouping) of sequences using the normalized longest common subsequence (LCS) as a similarity measure, followed by a detailed analysis of outliers to detect anomalies. sequenceMiner utilizes a new hybrid algorithm for computing the LCS that has been shown to outperform existing algorithms by a factor of five. sequenceMiner also includes new algorithms for outlier analysis that provide comprehensible indicators as to why a particular sequence was deemed to be an outlier. This provides analysts with a coherent description of the anomalies identified in the sequence, and why they differ from more 'normal' sequences.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/SequenceMiner.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://c3.ndc.nasa.gov/dashlink/algorithm/sequenceminer-algorithm/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 1120,
        "Categories": [
            "detection",
            "outlier",
            "sequenceMiner",
            "algorithm",
            "cluster",
            "LCS",
            "longest common sequence"
        ],
        "Categories_NLP": [
            "algorithm",
            "sequencing",
            "set theory",
            "cluster analysi",
            "systems analysi",
            "problem solving",
            "computation",
            "combinatorial analysi",
            "symbol",
            "anomaly"
        ],
        "Software": "sequenceMiner"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Shift is a lightweight framework for high performance local and remote file transfers that provides resiliency across a wide variety of failure scenarios through various techniques. These include end-to-end integrity via cryptographic hashes, throttling of transfers to prevent resource exhaustion, balancing transfers across resources based on load and availability, and parallelization of transfers across multiple source and destination hosts for increased redundancy and performance.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/shift-3.1.tgz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/projects/shift/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 6112,
        "Categories": [
            "parallel",
            "Self-Healing Independent File Transfer",
            "file transfer",
            "data transfer",
            "shift"
        ],
        "Categories_NLP": [
            "failure analysi",
            "failure",
            "performance prediction",
            "redundancy",
            "loads (forces)",
            "structural failure"
        ],
        "Software": "Self-Healing Independent File Transfer (Shift)"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Surfer is an extensible framework designed to select and rank grid resources where a resource is defined to be anything that may need selecting such as compute resources, storage resources, data resources, etc.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-surfer-1.0.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://www.nas.nasa.gov/~kolano/projects/surfer.html",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 17296,
        "Categories": [
            "surfer",
            "resource",
            "data",
            "ranking"
        ],
        "Categories_NLP": [
            "data storage",
            "data processing equipment",
            "earth resource",
            "data management",
            "resource allocation",
            "computer storage device",
            "grid",
            "systems engineering",
            "data system",
            "optimization"
        ],
        "Software": "Surfer"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Swim is a software information service for the grid built on top of Pour, which is an information service framework developed at NASA. Swim provides true software resource discovery integrated with the tools used by administrators to install software.",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ipg-swim-1.0.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "http://people.nas.nasa.gov/~kolano/projects/swim.html",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 2192,
        "Categories": [
            "resource",
            "information service",
            "discovery",
            "swim"
        ],
        "Categories_NLP": [
            "programming environment",
            "information system",
            "information retrieval",
            "software development tool",
            "resource allocation",
            "computational grid",
            "nasa program",
            "information dissemination",
            "management information system",
            "information management"
        ],
        "Software": "Swim"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "IKOS is a C++ library designed to facilitate the development of sound static analyzers based on Abstract Interpretation. Specialization of a static analyzer for an application or family of applications is critical for achieving both precision and scalability. Developing such an analyzer is arduous and requires significant expertise in Abstract Interpretation. ",
        "Public Code Repo": "https://ti.arc.nasa.gov/m/opensource/downloads/ikos/ikos_arbos.0.1.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://ti.arc.nasa.gov/opensource/ikos/",
        "Contributors": [
            "Dennis Koga"
        ],
        "Labor_Hours": 9616,
        "Categories": [
            "abstract interpretation",
            "library",
            "C++",
            "application",
            "IKOS",
            "static analyzer"
        ],
        "Categories_NLP": [
            "library",
            "signal analyzer",
            "inference",
            "abstract",
            "c++ (programming language)",
            "analyzer",
            "precision",
            "kernel function"
        ],
        "Software": "Inference Kernel for Open Static Analyzers (IKOS)"
    },
    {
        "Update_Date": "2009-02-03",
        "Description": "This is the dataset used for the SIAM 2007 Text Mining Competition. This is a subset of the Aviation Safety Reporting System (ASRS) dataset.",
        "Public Code Repo": "https://github.com/Buzz-Beater/SIAM-2007-Text-Mining",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://c3.nasa.gov/dashlink/resources/138/",
        "Contributors": [
            "Nikunj Oza"
        ],
        "Labor_Hours": 240,
        "Categories": [
            "text mining",
            "safety",
            "aviation",
            "system",
            "reporting"
        ],
        "Categories_NLP": [
            "mining",
            "aeronautic",
            "safety device",
            "civil aviation",
            "data mining",
            "systems engineering",
            "safety factor",
            "safety",
            "flight safety",
            "aircraft safety"
        ],
        "Software": "SIAM 2007 Text Mining Competition data set"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Land Information System Verification Toolkit (LVT) is a hybrid Fortran90 and C software tool designed to enable the evaluation, analysis and comparison of outputs generated by the Land Information System (LIS). LIS is a software framework to support land surface modeling and data assimilation.",
        "Public Code Repo": "https://lis.gsfc.nasa.gov/sites/default/files/LIS/LIS_public_release_7_2r/LDT_public_release_7.2r.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/LVT/index.php",
        "Contributors": [
            "Christa Peters-Lidard"
        ],
        "Labor_Hours": 63296,
        "Categories": [
            "data analysis",
            "land surface",
            "verification",
            "LVT",
            "LIS"
        ],
        "Categories_NLP": [
            "earth surface",
            "proving",
            "information system",
            "assimilation",
            "software development tool",
            "data processing",
            "data system",
            "systems analysi",
            "evaluation",
            "data reduction"
        ],
        "Software": "Land Information System Verification Toolkit (LVT)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Matlab-CodeV toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/CodeV%20v2007a.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
        "Contributors": [
            "Joseph Howard"
        ],
        "Labor_Hours": 880,
        "Categories": [
            "optical",
            "matlab",
            "data conversion",
            "modeling",
            "CodeV"
        ],
        "Categories_NLP": [
            "remote sensing",
            "performance test",
            "software development tool",
            "systems engineering",
            "data system",
            "systems analysi",
            "computer systems design",
            "automatic control",
            "data transfer (computers)"
        ],
        "Software": "Matlab-CodeV Toolkit"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Matlab-OSLO toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab/Matlab_OSLO.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
        "Contributors": [
            "Joseph Howard"
        ],
        "Labor_Hours": 464,
        "Categories": [
            "optical",
            "matlab",
            "OSLO",
            "data conversion",
            "modeling"
        ],
        "Categories_NLP": [
            "remote sensing",
            "performance test",
            "software development tool",
            "systems engineering",
            "data system",
            "systems analysi",
            "automatic control",
            "data transfer (computers)",
            "computer systems design"
        ],
        "Software": "Matlab-OSLO Toolkit"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Matlab-Zemax toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/15151%20ZEMAX%20v2007a.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
        "Contributors": [
            "Joseph Howard"
        ],
        "Labor_Hours": 96,
        "Categories": [
            "optical",
            "matlab",
            "modeling",
            "data conversion",
            "zemax"
        ],
        "Categories_NLP": [
            "remote sensing",
            "performance test",
            "software development tool",
            "systems engineering",
            "data system",
            "systems analysi",
            "automatic control",
            "data transfer (computers)",
            "computer systems design"
        ],
        "Software": "Matlab-zemax Toolkit"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Converts an HDF-EOS ODL metadata file into appropriate XML. Written in Java.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/odl_java.tgz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 10096,
        "Categories": [
            "XML",
            "ODL",
            "data conversion"
        ],
        "Categories_NLP": [],
        "Software": "ODL to XML Converter"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "PARAMESH is a package of Fortran 90 subroutines designed to provide an application developer with an easy route to extend an existing serial code which uses a logically cartesian structured mesh into a parallel code with adaptive mesh refinement (AMR).",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/paramesh/paramesh3.3_beta.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/paramesh/index.php",
        "Contributors": [
            "Peter MacNiece"
        ],
        "Labor_Hours": 83648,
        "Categories": [
            "data conversion",
            "adaptive mesh refinement",
            "AMR"
        ],
        "Categories_NLP": [
            "subroutine",
            "fortran",
            "route",
            "computational grid",
            "reliability",
            "grid generation (mathematics)",
            "electronic packaging",
            "circuit"
        ],
        "Software": "PARAMESH"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "pFunit is a Fortran analog to various other xUnit testing frameworks which have been developed within the software community,and is intended to enable test driven development (TDD) within the scientific/technical programming community.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/FUNIT/pFUnit.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/FUNIT/index.php",
        "Contributors": [
            "Thomas Clune"
        ],
        "Labor_Hours": 2272,
        "Categories": [
            "testing",
            "test driven development",
            "software development"
        ],
        "Categories_NLP": [
            "programming environment",
            "performance test",
            "fortran",
            "software development tool",
            "mathematical programming",
            "analog data",
            "analog computer",
            "evaluation",
            "program verification (computers)",
            "electronic equipment test"
        ],
        "Software": "pFUnit"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The User-friendly Metadata (UFM) tool functions as a filter, taking input from standard input (STDIN) and writing output to standard output (STDOUT) and/or standard error (STDERR).",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/UFM/UFM.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/UFM/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 22384,
        "Categories": [
            "STDIN",
            "UFM",
            "metadata",
            "input",
            "output",
            "standard"
        ],
        "Categories_NLP": [
            "error signal",
            "error",
            "error analysi",
            "linear filter",
            "root-mean-square error",
            "error function",
            "filter",
            "estimating",
            "electronic filter",
            "functions (mathematics)"
        ],
        "Software": "User Friendly Metadata (UFM)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Program that takes an XML representation of the contents of an HDF-EOS file and recreates the file from that description.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2he/xml2he5.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 1856,
        "Categories": [
            "HDF",
            "data conversion",
            "converter",
            "XML",
            "EOS"
        ],
        "Categories_NLP": [
            "image converter",
            "analog to digital converter",
            "voltage converters (dc to dc)",
            "simulation",
            "systems analysi",
            "frequency converter",
            "computation",
            "knowledge representation",
            "graphs (charts)",
            "image"
        ],
        "Software": "XML to HDF-EOS Converter"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "Converts an XML file to an HDF-EOS ODL metadata file.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/xml2odl/xml2odl.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 592,
        "Categories": [
            "XML",
            "ODL",
            "data conversion",
            "converter"
        ],
        "Categories_NLP": [],
        "Software": "XML to ODL Converter"
    },
    {
        "Update_Date": "2015-02-10",
        "Description": "CFITSIO is a library of C and Fortran subroutines for reading and writing data files in FITS (Flexible Image Transport System) data format. CFITSIO provides simple high-level routines for reading and writing FITS files that insulate the programmer from the internal complexities of the FITS format. CFITSIO also provides many advanced features for manipulating and filtering the information in FITS files.",
        "Public Code Repo": "ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio_latest.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 115248,
        "Categories": [
            "data validation",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [
            "information system",
            "subroutine",
            "format",
            "data management",
            "image processing",
            "data processing",
            "data system",
            "data transfer (computers)",
            "image analysi",
            "digital data"
        ],
        "Software": "CFITSIO"
    },
    {
        "Update_Date": "2015-03-10",
        "Description": "This is a small C library for FITS I/O originally written by John Roll at SAO. It is now maintained and distributed as part of the FUNTOOLS utility package.",
        "Public Code Repo": "https://github.com/ericmandel/funtools",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/ericmandel/funtools",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 139248,
        "Categories": [
            "data validation",
            "FUNTOOLS",
            "flexible image transport system",
            "FITS",
            "SAO"
        ],
        "Categories_NLP": [
            "library",
            "boundary layer",
            "utility",
            "stability",
            "radiation",
            "roll",
            "reliability",
            "environment",
            "electronic packaging",
            "circuit"
        ],
        "Software": "fitsy/funtools"
    },
    {
        "Update_Date": "2007-01-22",
        "Description": "The qfits library is a small, portable C library that provides low level support for accessing FITS images, headers and tables.",
        "Public Code Repo": "ftp://ftp.eso.org/pub/eclipse/latest/eclipse-main-5.0.0.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://www.eso.org/sci/software/eclipse/qfits/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 49264,
        "Categories": [
            "data validation",
            "qfits",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [
            "tables (data)",
            "library",
            "support system",
            "image analysi",
            "image processing"
        ],
        "Software": "qfits"
    },
    {
        "Update_Date": "2011-12-09",
        "Description": "The CCfits library is build on top of CFITSIO and provides an interface that allows the user to manipulate FITS data through high-level object-oriented building blocks.",
        "Public Code Repo": "http://heasarc.gsfc.nasa.gov/fitsio/CCfits/CCfits-2.4.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://heasarc.gsfc.nasa.gov/fitsio/CCfits/",
        "Contributors": [
            "Phil Newman"
        ],
        "Labor_Hours": 58112,
        "Categories": [
            "CCfits",
            "data",
            "data validation",
            "CFITSIO",
            "flexible image transport system",
            "SAO",
            "FITS"
        ],
        "Categories_NLP": [
            "library",
            "user requirement",
            "graphical user interface",
            "object-oriented programming",
            "data reduction"
        ],
        "Software": "CCfits Library"
    },
    {
        "Update_Date": "1997-10-01",
        "Description": "The AIPS++ FITS library is available separately from the AIPS++ distribution.  Currently there is limited documentation.  This defines a set of C++ objects to read and write FITS files.",
        "Public Code Repo": "http://www.cv.nrao.edu/fits/src/c++fits-09.076.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://www.cv.nrao.edu/fits/src/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 5680,
        "Categories": [
            "AIPS++",
            "data",
            "data validation",
            "flexible image transport system",
            "AIPS++FITS",
            "FITS"
        ],
        "Categories_NLP": [
            "library",
            "spatial distribution",
            "set theory",
            "distribution function",
            "documentation",
            "file maintenance (computers)",
            "angular distribution",
            "c++ (programming language)",
            "reliability",
            "circuit"
        ],
        "Software": "AIPS++FITS Library"
    },
    {
        "Update_Date": "2013-11-30",
        "Description": "TThe IDL Astronomy Library contains four different sets of procedures for reading, writing, and modifying FITS files. The reason for having four different methods of FITS I/O with IDL is partly historical, as different groups developed the software independently. However, each method also has its own strengths and weakness for any particular task. For example, the procedure MRDFITS() -- which can read a FITS table into an IDL structure --is the easiest procedure for analyzing FITS files at the IDL prompt level (provided that one is comfortable with IDL structures). But mapping a table into an IDL structure includes extra overhead, so that when performing FITS I/O at the procedure level, it may be desirable to use more efficient procedures such as FITS_READ and FTAB_EXT.",
        "Public Code Repo": "https://github.com/wlandsman/IDLAstro",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://idlastro.gsfc.nasa.gov/fitsio.html",
        "Contributors": [
            "Theodore Gull"
        ],
        "Labor_Hours": 32768,
        "Categories": [
            "IDL",
            "FTAB_*",
            "WRITEFITS",
            "FITS_*",
            "FX*",
            "data",
            "data conversion",
            "MRDFITS",
            "flexible image transport system",
            "MWRFITS",
            "IDLAstro",
            "FITS",
            "READFITS"
        ],
        "Categories_NLP": [
            "library",
            "file maintenance (computers)",
            "hierarchy"
        ],
        "Software": "IDLAstro"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "A full function 100% Java library for reading and writing FITS files.",
        "Public Code Repo": "https://github.com/nom-tam-fits/nom-tam-fits",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/java/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 35632,
        "Categories": [
            "data",
            "java",
            "data conversion",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [],
        "Software": "nom-tam-fits"
    },
    {
        "Update_Date": "2008-05-16",
        "Description": "STIL/starlink is a pure Java library for generic input, output and processing of tabular data. It presents to the application programmer a view of a table which looks the same regardless of whether it came from a FITS file, a VOTable, an ASCII text file, a query on a relational database, or whatever.",
        "Public Code Repo": "https://github.com/Starlink/starjava",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/Starlink/starjava",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 2145056,
        "Categories": [
            "binary",
            "data",
            "java",
            "data conversion",
            "flexible image transport system",
            "STIL",
            "FITS",
            "starlink"
        ],
        "Categories_NLP": [
            "tables (data)",
            "data processing equipment",
            "data management",
            "data base management system",
            "input/output routine",
            "information retrieval",
            "data processing",
            "distributed processing",
            "data base",
            "query language"
        ],
        "Software": "Starlink/starjava"
    },
    {
        "Update_Date": "2015-04-16",
        "Description": "A standalone JavaScript library for reading the FITS astronomical file format. This library is built for modern browsers supporting the DataView object. These include at least Chrome 9, Firefox 15, and Safari 6. This library may be used to read various forms of the FITS format. This implementation is under active development. In its current state it supports the following: reading of multiple header data units, reading of FITS images, reading of data cubes, reading of binary tables, reading of ASCII Tables, and decompressing images using the Rice algorithm. ",
        "Public Code Repo": "https://github.com/astrojs/fitsjs",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/astrojs/fitsjs/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 4432,
        "Categories": [
            "binary",
            "javascript",
            "rice algorithm",
            "data",
            "ASCII",
            "flexible image transport system",
            "data compression",
            "FITS"
        ],
        "Categories_NLP": [
            "algorithm",
            "digital data",
            "tables (data)",
            "format",
            "data management",
            "imaging technique",
            "data compression",
            "image analysi",
            "image processing",
            "image"
        ],
        "Software": "fitsjs"
    },
    {
        "Update_Date": "2013-06-06",
        "Description": "A Perl module incorporating the CFITSIO library has been developed using XS wrappers. Most useful CFITSIO calls have direct Perl counterparts. Users will need the C version of CFITSIO to link to.",
        "Public Code Repo": "http://search.cpan.org/~pratzlaff/Astro-FITS-CFITSIO-1.10/CFITSIO.pm",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://search.cpan.org/~pratzlaff/Astro-FITS-CFITSIO-1.10/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 5088,
        "Categories": [
            "perl",
            "data",
            "data conversion",
            "CFITSIO",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [
            "library",
            "electronic module",
            "user requirement",
            "module",
            "information retrieval",
            "systems engineering",
            "scattering function",
            "c (programming language)",
            "optimization",
            "reliability"
        ],
        "Software": "CFITSIO.pm"
    },
    {
        "Update_Date": "2014-12-30",
        "Description": "A FITS reader is provided within the Perl Data Language module.  It handles FITS images and binary tables. PDL is a Perl module providing mechanisms to manipulate arrays of data efficiently.",
        "Public Code Repo": "http://www.cpan.org/modules/by-module/PDL/Data-Frame-0.003.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://www.cpan.org/modules/by-module/PDL/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 352,
        "Categories": [
            "perl",
            "binary",
            "data",
            "data conversion",
            "CFITSIO",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [
            "data acquisition",
            "tables (data)",
            "machine oriented language",
            "module",
            "data processing",
            "image analysi",
            "data reduction",
            "data base",
            "image processing"
        ],
        "Software": "PDL FITS capabilities"
    },
    {
        "Update_Date": "2015-05-06",
        "Description": "Damian Eads (at Los Alamos at that time) wrote a MatLab interface to the CFITSIO library using a tool called 'mex'. MFITSIO supports reading and writing FITS images, image subsets, and headers. (UPDATE, June 2013: MFITSIO is no longer available from the Los Alamos web site, however, the last version (1.2.4) of the MFITSIO source code .tar file has been retrieved from the Internet Archive WayBack Machine and made available here. The mfitsio interface has not been maintained for many years, and some users have reported problems with installing the software.)",
        "Public Code Repo": "http://fits.gsfc.nasa.gov/software/mfitsio-1.2.4-src.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#mfitsio",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 944,
        "Categories": [
            "matlab",
            "data",
            "data conversion",
            "flexible image transport system",
            "MFITSIO",
            "FITS"
        ],
        "Categories_NLP": [
            "world wide web",
            "response time (computers)",
            "library",
            "java (programming language)",
            "internet",
            "information retrieval",
            "software development tool",
            "human-computer interface",
            "real time operation",
            "image processing"
        ],
        "Software": "MFITSIO"
    },
    {
        "Update_Date": "2014-04-30",
        "Description": "George Gatling (NRL, email = george.gatling  'at' nrl.navy.mil) wrote an interface to the CFITSIO library for LabVIEW 2013 or later under Microsoft Windows . It supports reading and writing FITS images and ASCII and binary tables.",
        "Public Code Repo": "http://fits.gsfc.nasa.gov/software/gfitsio_v5.2_Apr_2014.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#LabVIEW",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 3216,
        "Categories": [
            "binary",
            "data",
            "data conversion",
            "Labview",
            "flexible image transport system",
            "GFITSIO",
            "FITS"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "interface",
            "tables (data)",
            "library",
            "image resolution",
            "pattern recognition",
            "electronic mail",
            "image analysi",
            "imagery",
            "image processing"
        ],
        "Software": "GFITSIO"
    },
    {
        "Update_Date": "2014-07-17",
        "Description": "PyFITS is a set of Python modules which read and write most FITS formats.",
        "Public Code Repo": "http://docs.astropy.org/en/stable/io/fits/index.html#module-astropy.io.fits",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://www.stsci.edu/institute/software_hardware/pyfits/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 11728,
        "Categories": [
            "binary",
            "data",
            "data conversion",
            "flexible image transport system",
            "python",
            "FITS"
        ],
        "Categories_NLP": [],
        "Software": "PyFITS"
    },
    {
        "Update_Date": "2015-04-17",
        "Description": "fitsio is a full featured python library to read and write data to FITS files. This is a python extension written in c and python. Data are read into numerical python arrays. A version of cfitsio is bundled with this package, which is used, in particular, to read and write images in tile-compressed format.",
        "Public Code Repo": "https://github.com/esheldon/fitsio",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/esheldon/fitsio",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 118336,
        "Categories": [
            "cfitsio",
            "data",
            "data conversion",
            "fitsio",
            "flexible image transport system",
            "python",
            "FITS"
        ],
        "Categories_NLP": [
            "digital data",
            "data management",
            "format",
            "image processing",
            "image analysi",
            "imaging technique",
            "image enhancement",
            "electronic packaging",
            "array",
            "image"
        ],
        "Software": "Python/fitsio"
    },
    {
        "Update_Date": "2009-04-08",
        "Description": "This package uses the CFITSIO library to interface to FITS files from Python. Particular attention has been paid to supporting ASCII and BINARY tables with fixed and variable-length entries. Data I/O is handled through numpy arrays. Note: this library appears to not have been updated since 2009 and may no longer be supported.",
        "Public Code Repo": "https://pypi.python.org/packages/source/p/pfits/pfits-0.0.2.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://pypi.python.org/pypi/pfits",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 70416,
        "Categories": [
            "binary",
            "PFITS",
            "data",
            "data conversion",
            "ASCII",
            "flexible image transport system",
            "python",
            "FITS"
        ],
        "Categories_NLP": [
            "tables (data)",
            "library",
            "atmospheric entry",
            "file maintenance (computers)",
            "binary data",
            "electronic packaging"
        ],
        "Software": "PFITS"
    },
    {
        "Update_Date": "2016-11-26",
        "Description": "FITSio is a contributed R package for reading and writing FITS images and reading binary tables within the R software environment. It has no dependencies other than the base R installation. The FITSio contributed package source code is available directly from the R project web site under the 'contributed extension packages' link.",
        "Public Code Repo": "http://www.astro.umd.edu/~harris/r/FITSio_2.0-0.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#Rlang",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 32,
        "Categories": [
            "FITSio",
            "data",
            "data visualization",
            "flexible image transport system",
            "R language",
            "FITS"
        ],
        "Categories_NLP": [
            "data link",
            "image processing",
            "software development tool",
            "image analysi",
            "data base",
            "installing",
            "light source",
            "world wide web"
        ],
        "Software": "fitsio"
    },
    {
        "Update_Date": "2012-02-21",
        "Description": "Liberator is a free plug-in for Adobe Photoshop or Photoshop Elements 2 for manipulating FITS images with those programs. A color composite 'Action' file is also available to simplify the process of creating color composite images from 3 separate red, green, and blue images.",
        "Public Code Repo": "https://www.spacetelescope.org/static/projects/fits_liberator/v301files/FITSLiberator3.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "http://www.spacetelescope.org/projects/fits_liberator/",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 256,
        "Categories": [
            "adobe",
            "data",
            "image processing",
            "liberator",
            "data visualization",
            "flexible image transport system",
            "ESA",
            "ESO",
            "FITS"
        ],
        "Categories_NLP": [
            "european space agency",
            "composite material",
            "image processing",
            "color photography",
            "nasa program",
            "file maintenance (computers)",
            "color",
            "image analysi"
        ],
        "Software": "ESA/ESO/NASA FITS Liberator"
    },
    {
        "Update_Date": "2014-02-12",
        "Description": "Package fits reads and processes FITS files. It is written in pure golang and is not a wrapper around another library or a direct translation of another library to golang. The main purpose is to provide a native golang solution to reading FITS file and to assess the suitability of golang for scientific and numerical applications.",
        "Public Code Repo": "https://github.com/siravan/fits",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/siravan/fits",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 544,
        "Categories": [
            "golang",
            "data",
            "data processing",
            "go",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [
            "library",
            "newton-raphson method",
            "packaging",
            "information retrieval",
            "computer storage device",
            "translating",
            "file maintenance (computers)",
            "reliability",
            "optimization",
            "electronic packaging"
        ],
        "Software": "golang fits reader"
    },
    {
        "Update_Date": "2014-07-09",
        "Description": "A set of CGo bindings to some of the most commonly used routines in the CFITSIO library (written in C).",
        "Public Code Repo": "https://github.com/astrogo/cfitsio",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/astrogo/cfitsio",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 4176,
        "Categories": [
            "wrapper",
            "data processing",
            "golang",
            "data",
            "C",
            "go",
            "CFITSIO",
            "FITS",
            "flexible image transport system"
        ],
        "Categories_NLP": [
            "computation",
            "loran c",
            "systems analysi",
            "stability",
            "set theory",
            "c (programming language)",
            "estimating",
            "image",
            "transmitter",
            "simulation"
        ],
        "Software": "golang wrapper"
    },
    {
        "Update_Date": "2015-02-06",
        "Description": "Go package to read and write FITS files. It is written in pure golang and is not a wrapper around another library.",
        "Public Code Repo": "https://github.com/astrogo/fitsio",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/astrogo/fitsio",
        "Contributors": [
            "William D. Pence"
        ],
        "Labor_Hours": 5984,
        "Categories": [
            "golang",
            "data",
            "data processing",
            "go",
            "flexible image transport system",
            "FITS"
        ],
        "Categories_NLP": [
            "library",
            "packaging",
            "scattering function",
            "reliability",
            "optimization",
            "phase control",
            "phosphorus compound",
            "electronic packaging",
            "barium oxide",
            "bending theory"
        ],
        "Software": "native golang fits package"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Advanced Land Image Assessment Systems (ALIAS) supports radiometric and geometric image processing for the Advanced Land Imager (ALI) instrument on board NASA\u2019s Earth Observing-1 (EO-1) satellite. ALIAS consists of two processing subsystems for radiometric and geometric processing of the ALI\u2019s multispectral imagery. The radiometric processing subsystem characterizes and corrects, where possible, radiometric qualities including: detector operability; gain; bias; coherent, impulse and random noise; signal-to-noise ratios (SNR); saturation levels; striping and banding; and the stability of detector performance. The geometric processing subsystem and analysis capabilities support sensor alignment calibrations; sensor chip assembly (SCA)-to-SCA alignments and related issues; geodetic accuracy assessments; modulation transfer function (MTF) characterizations; and perform image-to-image characterizations. The ALIAS also characterizes and corrects band-to-band registration, and performs systematic, precision and terrain correction of ALI images. The ALIAS can geometrically correct and automatically mosaic the SCA image strips into a seamless, map-projected image. The ALIAS was developed through collaboration between NASA and the U.S. Geological Survey (USGS).",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/Alias/alias2_1.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/Alias/Alias.zip",
        "Contributors": [
            "Vicki Zanoni"
        ],
        "Labor_Hours": 315552,
        "Categories": [
            "EO-1",
            "Advanced Land Imager",
            "image processing"
        ],
        "Categories_NLP": [
            "radiometric correction",
            "landsat satellite",
            "calibrating",
            "measuring instrument",
            "satellite-borne instrument",
            "satellite imagery",
            "modulation transfer function",
            "imagery",
            "signal to noise ratio",
            "infrared imagery"
        ],
        "Software": "ALIAS"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The ut-assert unit test tools provide a unit test framework and a collection of utilities that are designed to facilitate unit testing.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ut-assert/ut-assert%20v1_0%2011-24-14.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ut-assert/index.php",
        "Contributors": [
            "David McComas"
        ],
        "Labor_Hours": 1616,
        "Categories": [
            "unit test",
            "assert",
            "regression testing"
        ],
        "Categories_NLP": [
            "data acquisition",
            "performance test",
            "test equipment",
            "test",
            "acceptability",
            "utility",
            "systems engineering",
            "evaluation",
            "test facility",
            "electronic equipment test"
        ],
        "Software": "Assert-Based Unit Test Tools (UT-Assert)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "A gateway using OPeNDAP, implemented as a plug-in to the Hyrax server, for accessing WCS data.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/CEOP/CEOP.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/CEOP/index.php",
        "Contributors": [
            "Christopher Lynnes"
        ],
        "Labor_Hours": 23488,
        "Categories": [
            "ACCESS",
            "earth science data",
            "opendap",
            "networking"
        ],
        "Categories_NLP": [
            "data acquisition",
            "data transmission",
            "tables (data)",
            "data processing equipment",
            "data management",
            "data processing",
            "communication satellite",
            "data system",
            "satellite observation",
            "data reduction"
        ],
        "Software": "CEOP Satellite Data Server"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The RHSEG software provides hierarchical segmentation (pre-processing) of image and image-like data. The software significantly improves the extraction of patterns from complex data sets and is optimized for speed and accuracy. This algorithm provides the user with precise control for selecting the desired level of detail from the hierarchy of results.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HSEG/core_rhsegV1.47.tar.gz",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/HSEG/index.php",
        "Contributors": [
            "James Tilton"
        ],
        "Labor_Hours": 17184,
        "Categories": [
            "RHSEG",
            "object based image analysis",
            "image processing",
            "application"
        ],
        "Categories_NLP": [
            "algorithm",
            "pattern recognition",
            "imaging technique",
            "software development tool",
            "data processing",
            "image analysi",
            "automatic control",
            "segment",
            "hierarchy",
            "image processing"
        ],
        "Software": "Core RHSEG Software Package"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Data Quality Screening Service (DQSS) is designed to help automate the filtering of remote sensing data on behalf of science users.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/DQSS/dqss_64.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/DQSS/index.php",
        "Contributors": [
            "Christopher Lynnes"
        ],
        "Labor_Hours": 10544,
        "Categories": [
            "data filtering",
            "remote sensing",
            "quality"
        ],
        "Categories_NLP": [
            "data transmission",
            "data acquisition",
            "remote sensing",
            "quality control",
            "user requirement",
            "data processing",
            "data system",
            "remote sensor",
            "data reduction",
            "data base"
        ],
        "Software": "Data Quality Screening Service (DQSS)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The ECS Schema Validation tool validates an XML Document based on the BMGT Granule or Collection Schema, and generate reports listing all invalid elements.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/ECS_Metadata_validate/schemavalidator.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/ECS_Metadata_validate/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 13792,
        "Categories": [
            "validator",
            "data validation",
            "EOS"
        ],
        "Categories_NLP": [
            "finite element method",
            "document markup language",
            "tool",
            "reliability",
            "circuit"
        ],
        "Software": "ECS Metadata Validator"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The Earth Observing System Data Gateway (EDG) was developed in response to the earth science community's need for a one-stop-shopping interface to search for data and order data granules from distributed data archives. This innovation enables users to explore, discover, and order available data from geographically distributed data providers through a standard interface.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/edg/edg.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/edg/index.php",
        "Contributors": [
            "Robert Harberts"
        ],
        "Labor_Hours": 233888,
        "Categories": [
            "interface",
            "Earth science",
            "data interchange"
        ],
        "Categories_NLP": [
            "data acquisition",
            "interface",
            "data processing equipment",
            "data management",
            "data base management system",
            "user requirement",
            "earth observing system (eos)",
            "data system",
            "data base",
            "earth observations (from space)"
        ],
        "Software": "EDG"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The NFMW reads Earth science models and produces web pages that display the desired area, time, and elevation, using WMS (Web Map Service).",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/NFMW/nfmw-20081204.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
        "Contributors": [
            "Eric Sokolowsky"
        ],
        "Labor_Hours": 24304,
        "Categories": [
            "web map service",
            "earth science",
            "data visualization"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "elevation",
            "earth (planet)",
            "time dependence",
            "mapping",
            "relief map",
            "mathematical model",
            "earth science",
            "real time operation",
            "map"
        ],
        "Software": "Forecast Model Web Map Service (NFMW)"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The GPM displays grand- and space-based radar observations for easy comparison and validation. Inteded for meteorologists and other sciences; not end users.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GPMV/GPM_VN_visualization_master.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GPMV/index.php",
        "Contributors": [
            "Mathew Schwaller"
        ],
        "Labor_Hours": 6128,
        "Categories": [
            "earth science",
            "data visualization",
            "GVS",
            "meteorology",
            "GPM"
        ],
        "Categories_NLP": [
            "proving",
            "meteorology",
            "space mission",
            "display device",
            "comparison",
            "scientific visualization",
            "graphical user interface",
            "mission planning",
            "radar data",
            "precipitation (meteorology)"
        ],
        "Software": "Global Precipitation Mission (GPM) Visualization Tool for Validation Network Geometrically-Matched Ground- and Space-based Radar Data"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The GPM Collects various data sets from TRMM spacecraft, re-samples it, and generates statistics.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/GPM/GPMGV_VN_IDL_CODE.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/GPM/index.php",
        "Contributors": [
            "Mathew Schwaller"
        ],
        "Labor_Hours": 5712,
        "Categories": [
            "data processing",
            "earth science",
            "GVS",
            "GPM",
            "TRMM"
        ],
        "Categories_NLP": [
            "data sampling",
            "trmm satellite",
            "statistical analysi",
            "radar",
            "ground based control",
            "ground support equipment",
            "spacecraft instrument",
            "radar data",
            "comparison",
            "precipitation (meteorology)"
        ],
        "Software": "Global Precipitation Radar (GPM) Space and Ground Radar Comparison"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "HDF-EOS Metadata Updater updates metadata inside an HDF-EOS file.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hemu/HEMU.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/hemu/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 10432,
        "Categories": [
            "EOSDIS",
            "data file manipulator",
            "updater",
            "HDF-EOS",
            "EOS"
        ],
        "Categories_NLP": [],
        "Software": "HDF-EOS Metadata Updater"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The HDF-EOS to netCDF Convertor takes an HDF-EOS dataset and outputs a netCDF file that preserves as much as possible of the dataset's data and metadata using the CF conventions for netCDF.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/hdfeos5-netcdf.tar",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 544,
        "Categories": [
            "EOSDIS",
            "data conversion",
            "updater",
            "HDF-EOS",
            "EOS"
        ],
        "Categories_NLP": [
            "boundary layer",
            "stability",
            "radiation",
            "reliability",
            "environment",
            "data base",
            "file maintenance (computers)",
            "circuit"
        ],
        "Software": "HDF-EOS to netCDF Convertor"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The HDF-EOS Web Server converts HDF-EOS metadata into human-readable HTML and publishes it to a local web server (which must be pre-configured).",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/heserve/heserve.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/heserve/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 1248,
        "Categories": [
            "EOSDIS",
            "server",
            "data conversion",
            "HDF-EOS",
            "EOS"
        ],
        "Categories_NLP": [
            "scattering function",
            "earth observing system (eos)",
            "document markup language",
            "reliability",
            "phosphorus compound",
            "optimization",
            "phase control",
            "molecular rotation",
            "barium oxide",
            "bending theory"
        ],
        "Software": "HDF-EOS Web Server"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "The HDFEOS XML DTD and Schemas is a set of DTD and schemas for HDFEOS files.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/schemavalidator.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
        "Contributors": [
            "Richard Ullman"
        ],
        "Labor_Hours": 13792,
        "Categories": [
            "EOSDIS",
            "server",
            "data validation",
            "HDF-EOS",
            "EOS"
        ],
        "Categories_NLP": [
            "format",
            "simulation",
            "stability",
            "fatigue (materials)",
            "set theory",
            "transmitter",
            "systems analysi",
            "computation",
            "estimating",
            "image"
        ],
        "Software": "HDFEOS XML DTD and Schemas"
    },
    {
        "Update_Date": "2015-02-27",
        "Description": "This is a Java language software plug-in to The HDF Group's (formerly of NCSA at University of Illinois at Urbana-Champaign) HDFView which provides an HDF-EOS interface for both versions of HDF (4 and 5) of HDF-EOS. Browse and edit functions are provided.",
        "Public Code Repo": "https://opensource.gsfc.nasa.gov/projects/HDF/HDF.zip",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://opensource.gsfc.nasa.gov/projects/HDF/index.php",
        "Contributors": [
            "Dan Marinelli"
        ],
        "Labor_Hours": 208,
        "Categories": [
            "EOSDIS",
            "data validation",
            "HDF-EOS",
            "EOS"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "interface",
            "language",
            "software development tool",
            "language programming",
            "programming language",
            "linguistic",
            "object-oriented programming",
            "machine oriented language",
            "functions (mathematics)"
        ],
        "Software": "HDFView HDF-EOS Plug-in"
    },
    {
        "Update_Date": "2016-09-06",
        "Description": "MINX, which stands for MISR INteractive eXplorer, is an interactive visualization and analysis program written in IDL and designed to make MISR data more accessible to science users. Its principal use is to retrieve heights and motion for aerosol plumes and clouds using stereoscopic methods.",
        "Public Code Repo": "https://github.com/nasa/MINX",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "http://misr.jpl.nasa.gov/",
        "Contributors": [
            "David Nelson"
        ],
        "Labor_Hours": 31056,
        "Categories": [
            "Visualization",
            "Toolkit",
            "Analysis"
        ],
        "Categories_NLP": [
            "cloud physic",
            "clouds (meteorology)",
            "data processing",
            "scientific visualization",
            "cloud seeding",
            "aerosol",
            "cloud",
            "data reduction",
            "plume"
        ],
        "Software": "MINX"
    },
    {
        "Update_Date": "2019-02-27",
        "Description": "A meta-repository which essentially lists code related to all tools and services software for NASA JPL's PO.DAAC",
        "Public Code Repo": "https://github.com/nasa/podaac_tools_and_services",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa/podaac_tools_and_services",
        "Contributors": [
            "lewismc"
        ],
        "Labor_Hours": 1,
        "Categories": [
            "sst",
            "ocean-winds",
            "sss",
            "gravity",
            "sea-surface-salinity",
            "ocean-surface-topography",
            "oceanography",
            "ocean-circulation",
            "physical-oceanography",
            "services",
            "podaac",
            "sea-ice",
            "sea",
            "ost",
            "tools",
            "sea-surface-temperature"
        ],
        "Categories_NLP": [
            "nasa program",
            "reliability",
            "computer program integrity",
            "programming environment",
            "failure",
            "systems engineering",
            "java (programming language)",
            "optimization",
            "software development tool",
            "computer systems performance"
        ],
        "Software": "PO.DAAC Tools and Services"
    },
    {
        "Update_Date": "2016-09-28",
        "Description": "A simple python testing framework that can run unit tests under MPI (or not).",
        "Public Code Repo": "https://github.com/OpenMDAO/testflo",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/testflo/archive/master.zip",
        "Contributors": [
            "naylor-b"
        ],
        "Labor_Hours": 752,
        "Categories": [
            "MPI",
            "openmdao",
            "unit testing",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: testflo"
    },
    {
        "Update_Date": "2016-09-28",
        "Description": "OpenMDAO is a high-performance computing platform for systems analysis and optimization that enables you to decompose your models, making them easier to build and maintain, while still solving them in a tightly-coupled manner with efficient parallel numerical methods.",
        "Public Code Repo": "https://github.com/OpenMDAO/OpenMDAO",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/OpenMDAO/archive/master.zip",
        "Contributors": [
            "naylor-b"
        ],
        "Labor_Hours": 58912,
        "Categories": [
            "optimization",
            "openmdao",
            "systems analysis",
            "python"
        ],
        "Categories_NLP": [
            "performance test",
            "performance prediction",
            "systems engineering",
            "systems analysi",
            "mathematical model",
            "optimization"
        ],
        "Software": "OpenMDAO"
    },
    {
        "Update_Date": "2016-09-14",
        "Description": "Prototype of a benchmarking/regression tool.",
        "Public Code Repo": "https://github.com/OpenMDAO/benchmark",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/benchmark/archive/master.zip",
        "Contributors": [
            "swryan"
        ],
        "Labor_Hours": 656,
        "Categories": [
            "regression",
            "benchmark",
            "openmdao",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: benchmark"
    },
    {
        "Update_Date": "2016-08-11",
        "Description": "OpenMDAO plug-in.",
        "Public Code Repo": "https://github.com/OpenMDAO/CADRE",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/CADRE/archive/master.zip",
        "Contributors": [
            "swryan"
        ],
        "Labor_Hours": 2496,
        "Categories": [
            "regression",
            "benchmark",
            "openmdao",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: Cadre"
    },
    {
        "Update_Date": "2016-06-10",
        "Description": "An old problem used for NREL Training, converted to OpenMDAO 1.x",
        "Public Code Repo": "https://github.com/OpenMDAO/NRELTraining",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/NRELTraining/archive/master.zip",
        "Contributors": [
            "jcchin"
        ],
        "Labor_Hours": 3968,
        "Categories": [
            "openmdao",
            "python",
            "training",
            "NREL"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: NRELTraining"
    },
    {
        "Update_Date": "2016-04-11",
        "Description": "MBI sub-branch of the OpenMDAO repository.",
        "Public Code Repo": "https://github.com/OpenMDAO/MBI",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/MBI/archive/master.zip",
        "Contributors": [
            "hwangjt"
        ],
        "Labor_Hours": 320,
        "Categories": [
            "NAS",
            "fortran",
            "openmdao",
            "supercomputer"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: MBI"
    },
    {
        "Update_Date": "2016-01-20",
        "Description": "OpenMDAO component wrapper for FLOPS.",
        "Public Code Repo": "https://github.com/OpenMDAO/flops_wrapper",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/flops_wrapper/archive/master.zip",
        "Contributors": [
            "fcapristan"
        ],
        "Labor_Hours": 2416,
        "Categories": [
            "flops",
            "openmdao",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: flops_wrapper"
    },
    {
        "Update_Date": "2015-09-03",
        "Description": "A python based open-source (Apache 2.0) engineering analysis framework designed to facilitate the use of MDAO. To add issues, visit our user forums at http://www.openmdao.org/forum . NOTE: this version is no longer being developed. The current active version can be found here: https://github.com/OpenMDAO/OpenMDAO.",
        "Public Code Repo": "https://github.com/OpenMDAO/OpenMDAO-Framework",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/OpenMDAO-Framework/archive/dev.zip",
        "Contributors": [
            "naylor-b"
        ],
        "Labor_Hours": 102368,
        "Categories": [
            "MDAO",
            "framework",
            "openmdao",
            "python"
        ],
        "Categories_NLP": [
            "user requirement",
            "radiation source",
            "hydroelectricity",
            "optimization"
        ],
        "Software": "OpenMDAO: OpenMDAO-Framework"
    },
    {
        "Update_Date": "2015-03-24",
        "Description": "Procedures for OpenMDAO maintainers.",
        "Public Code Repo": "https://github.com/OpenMDAO/OpenMDAO-Procedures",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/OpenMDAO-Procedures/archive/master.zip",
        "Contributors": [
            "kmarsteller"
        ],
        "Labor_Hours": 256,
        "Categories": [
            "maintainers",
            "mdao",
            "procedures",
            "openmdao",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: OpenMDAO-Procedures"
    },
    {
        "Update_Date": "2015-02-17",
        "Description": "Airline allocation problem.",
        "Public Code Repo": "https://github.com/OpenMDAO/airline-allocation",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/airline-allocation/archive/master.zip",
        "Contributors": [
            "swryan"
        ],
        "Labor_Hours": 1040,
        "Categories": [
            "mdao",
            "openmdao",
            "airline",
            "python",
            "allocation"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: OpenMDAO-airline-allocation"
    },
    {
        "Update_Date": "2014-08-20",
        "Description": "Web app to manage openmdao automated testing.",
        "Public Code Repo": "https://github.com/OpenMDAO/openmdao_testapp",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/openmdao_testapp/archive/master.zip",
        "Contributors": [
            "swryan"
        ],
        "Labor_Hours": 272,
        "Categories": [
            "testing",
            "mdao",
            "application",
            "openmdao",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: openmdao_testapp"
    },
    {
        "Update_Date": "2014-07-16",
        "Description": "Aero-Velo Marathon Aircraft.",
        "Public Code Repo": "https://github.com/OpenMDAO/marathon-aircraft",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/marathon-aircraft/archive/master.zip",
        "Contributors": [
            "treforevans"
        ],
        "Labor_Hours": 224,
        "Categories": [
            "mdao",
            "openmdao",
            "aeronautics",
            "aircraft",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: marathon-aircraft"
    },
    {
        "Update_Date": "2014-04-18",
        "Description": "Python web-based geometry viewer.",
        "Public Code Repo": "https://github.com/OpenMDAO/pyV3D",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/pyV3D/archive/master.zip",
        "Contributors": [
            "treforevans"
        ],
        "Labor_Hours": 9440,
        "Categories": [
            "mdao",
            "geometry",
            "openmdao",
            "C",
            "viewer"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: pyV3D"
    },
    {
        "Update_Date": "2014-04-18",
        "Description": "Python wrappers for the GEM libraries diamond and quartz.",
        "Public Code Repo": "https://github.com/OpenMDAO/pygem",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/pygem/archive/master.zip",
        "Contributors": [
            "naylor-b"
        ],
        "Labor_Hours": 13248,
        "Categories": [
            "wrapper",
            "mdao",
            "openmdao",
            "C",
            "gem"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: pygem"
    },
    {
        "Update_Date": "2013-12-05",
        "Description": "Geometry Environment for MDAO.",
        "Public Code Repo": "https://github.com/OpenMDAO/GEM",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/GEM/archive/master.zip",
        "Contributors": [
            "naylor-b"
        ],
        "Labor_Hours": 17024,
        "Categories": [
            "wrapper",
            "mdao",
            "openmdao",
            "C",
            "gem"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: GEM"
    },
    {
        "Update_Date": "2013-01-24",
        "Description": "EGADS: Engineering Geometry Aerospace Design System.",
        "Public Code Repo": "https://github.com/OpenMDAO/EGADS",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/EGADS/archive/master.zip",
        "Contributors": [
            "haimes"
        ],
        "Labor_Hours": 34128,
        "Categories": [
            "aerospace",
            "wrapper",
            "mdao",
            "geometry",
            "openmdao",
            "C"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: EGADS"
    },
    {
        "Update_Date": "2013-12-04",
        "Description": "Simple script to create virtual environment with numpy, scipy, matplotlib and ipython.",
        "Public Code Repo": "https://github.com/OpenMDAO/SimplePylab",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/SimplePylab/archive/master.zip",
        "Contributors": [
            "kmarsteller"
        ],
        "Labor_Hours": 816,
        "Categories": [
            "mdao",
            "geometry",
            "openmdao",
            "gem",
            "python"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: SimplePylab"
    },
    {
        "Update_Date": "2013-12-04",
        "Description": "ESP: The Engineering Sketch Pad.",
        "Public Code Repo": "https://github.com/OpenMDAO/EngSketchPad",
        "License": [
            "ALv2"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/OpenMDAO/EngSketchPad/archive/master.zip",
        "Contributors": [
            "JustinSGray"
        ],
        "Labor_Hours": 48432,
        "Categories": [
            "openmdao",
            "python",
            "mdao"
        ],
        "Categories_NLP": [],
        "Software": "OpenMDAO: EngSketchPad"
    },
    {
        "Update_Date": "2017-11-09",
        "Description": "The RandomVariable Library is an C++ open source library for representing statistical uncertainty in a precise, readable, and usable manner. Value uncertainty can be represented with a parametric distribution such as Gaussian or a nonparametric distribution such as a weighted sample set. The library enables sampling from a parametric or fitting to a parametric distribution. Calculations may also be performed on multiple RandomVariable objects by sampling/overlaying techniques.",
        "Public Code Repo": "https://github.com/nasa/RVLib",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://github.com/nasa/RVLib/archive/master.zip",
        "Contributors": [
            "cullo7"
        ],
        "Labor_Hours": 544,
        "Categories": [
            "c++",
            "statistics",
            "uncertainty",
            "library"
        ],
        "Categories_NLP": [
            "random variable",
            "statistical distribution",
            "independent variable",
            "set theory",
            "object-oriented programming",
            "estimating",
            "computation",
            "normal density function",
            "random processe"
        ],
        "Software": "C++ Random Variable Library"
    },
    {
        "Update_Date": "2017-12-08",
        "Description": "The OpenVSP3Plugin is a JAVA software tool that allows for the interface between OpenVSP and an analysis framework such as Phoenix Integration\u2019s ModelCenter or the NASA developed OpenMDAO software. The OpenVSP3Plugin is designed to work on any computer desktop platform (Mac, Linux, and Windows) that has a local installation of JAVA.",
        "Public Code Repo": "https://github.com/nasa/openvsp3plugin",
        "License": [
            "ALv2"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/openvsp3plugin",
        "Contributors": [
            "jrwelstead"
        ],
        "Labor_Hours": 1392,
        "Categories": [
            "OpenMDAO",
            "OpenVSP",
            "Geometry",
            "ModelCenter"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "interface",
            "programming environment",
            "operating systems (computers)",
            "systems integration",
            "software development tool",
            "unix (operating system)",
            "computer component",
            "human-computer interface",
            "installing"
        ],
        "Software": "OpenVSP3Plugin"
    },
    {
        "Update_Date": "2016-06-23",
        "Description": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI) takes in raw Landsat 8 surface reflectance products and produces two maps to be opened in ArcMap that can be used to identify chlorophyll hotspots. It also creates a true color image.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/CBCHI",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-18794-1",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 64,
        "Categories": [
            "ArcMap",
            "Landsat 8",
            "chlorophyll",
            "Chesapeake Bay"
        ],
        "Categories_NLP": [
            "surface propertie",
            "landsat satellite",
            "chlorophyll",
            "thematic mapping",
            "image processing",
            "satellite imagery",
            "photomapping",
            "image analysi",
            "reflectance",
            "color"
        ],
        "Software": "Chesapeake Bay Chlorophyll Hotspot Identifier (CBCHI)"
    },
    {
        "Update_Date": "2018-07-16",
        "Description": "This project provides Fortran templates for defining software containers.   Of necessity the capabilities are a bit manual as compared to C++ STL, but still quite useful.  Container types supported for now are Vector, Set, and Map.   Contained objects can be specified as any intrinsic type or derived type.   This includes deferred length strings and/or unlimited polymorphic entities.   The container can contain a single static type or allow for subtypes.   In the polymorphic case, the container can either keep deep copies (allocatable) or shallow references (pointer).",
        "Public Code Repo": "https://github.com/Goddard-Fortran-Ecosystem/gFTL",
        "License": [
            "ALv2"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/Goddard-Fortran-Ecosystem/gFTL/wiki",
        "Contributors": [
            "tclune"
        ],
        "Labor_Hours": 6832,
        "Categories": [
            "Fortran",
            "Templates",
            "Containers"
        ],
        "Categories_NLP": [
            "library",
            "software development tool",
            "mapping",
            "string theory",
            "object-oriented programming",
            "c++ (programming language)",
            "manual",
            "template",
            "map",
            "vector analysi"
        ],
        "Software": "The Goddard Fortran Template Library"
    },
    {
        "Update_Date": "2017-12-01",
        "Description": "Software Architecture Framework for Extensibility using Dynamic Assembly of Reflective Types (SAFE-DART) is a framework for Qt-based C++ applications which simplifies the process of writing modular object-oriented code.",
        "Public Code Repo": "https://github.com/nasa/SAFE-DART",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/SAFE-DART",
        "Contributors": [
            "JordanRHiggins"
        ],
        "Labor_Hours": 960,
        "Categories": [
            "C++",
            "Framework",
            "Qt"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "programming environment",
            "software development tool",
            "transformations (mathematics)",
            "object-oriented programming",
            "c++ (programming language)",
            "c (programming language)",
            "parallel processing (computers)",
            "architecture (computers)",
            "computer program integrity"
        ],
        "Software": "SAFE-DART"
    },
    {
        "Update_Date": "2018-01-18",
        "Description": "Python software library that facilitates the geolocation of photographs and video frames from the International Space Station (ISS).",
        "Public Code Repo": "https://github.com/nasa/ISS_Camera_Geolocate",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/ISS_Camera_Geolocate/wiki",
        "Contributors": [
            "tjlang"
        ],
        "Labor_Hours": 384,
        "Categories": [
            "Earth Science",
            "ISS",
            "Toolkit",
            "Photographs",
            "Meteorology",
            "Cameras"
        ],
        "Categories_NLP": [
            "photography",
            "library",
            "spaceborne photography",
            "space laboratory",
            "international space station",
            "camera",
            "aerial photography",
            "video communication",
            "ccd camera",
            "video signal"
        ],
        "Software": "ISS Camera Geolocate"
    },
    {
        "Update_Date": "2018-01-30",
        "Description": "GFR (Glenn Flux Reconstruction) is a high-order computational fluid dynamics (CFD) Fortran code for large-eddy simulations. It is based on the simple and efficient flux reconstruction method and accurate to arbitrary order through a user-supplied input parameter. It is currently capable of using unstructured grids containing quadrilateral and hexahedra elements. The current release only supports UNIX-like operating systems.",
        "Public Code Repo": "https://github.com/nasa/gfr",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/nasa/gfr",
        "Contributors": [
            "scspiegel"
        ],
        "Labor_Hours": 38464,
        "Categories": [
            "Fortran",
            "Flux Reconstruction",
            "CFD",
            "LES"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "finite element method",
            "simulation",
            "unix (operating system)",
            "digital simulation",
            "grid",
            "computational grid",
            "unstructured grids (mathematics)",
            "grid generation (mathematics)",
            "computational fluid dynamic"
        ],
        "Software": "GFR"
    },
    {
        "Update_Date": "2018-03-08",
        "Description": "misr_view is a graphical user interface-driven display and analysis tool for use with MISR files that use the HDF-EOS 'grid' interface. The display and analysis tools include simultaneous display of several data planes through color assignment, contrast enhancement, pseudo coloring, data value query, image rotation, creation of stereo anaglyphs, zooming, linked analysis and view windows, vector overlays and map projections.",
        "Public Code Repo": "https://github.com/nasa/MISR-View",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "http://misr.jpl.nasa.gov/",
        "Contributors": [
            "Charles Thompson"
        ],
        "Labor_Hours": 15920,
        "Categories": [
            "Earth Science",
            "Visualization",
            "Analysis"
        ],
        "Categories_NLP": [
            "stereoscopy",
            "display device",
            "color photography",
            "computer graphic",
            "graphical user interface",
            "human-computer interface",
            "image enhancement",
            "image processing",
            "color",
            "stereophotography"
        ],
        "Software": "MISR View"
    },
    {
        "Update_Date": "2018-03-13",
        "Description": "Apache SensSoft is a user activity logging and analytics system that enables developers to instrument and extract design and user insights from their applications. SensSoft incorporates a number of components that work together to provide user-experience researchers, project managers and software developers insights about how web applications are used. UserALE.js is an open source tool to quickly and efficiently instrument a JavaScript frontend application.",
        "Public Code Repo": "http://senssoft.incubator.apache.org/releases/",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "http://senssoft.incubator.apache.org/",
        "Contributors": [
            "Lewis.J.Mcgibbney@jpl.nasa.gov"
        ],
        "Labor_Hours": 576,
        "Categories": [
            "Logging",
            "Instrumentation",
            "Analytics"
        ],
        "Categories_NLP": [
            "project management",
            "distributed processing",
            "software development tool",
            "systems engineering",
            "design analysi",
            "evaluation",
            "human-computer interface",
            "computer systems design"
        ],
        "Software": "Apache SensSoft (Incubating) UserALE.js"
    },
    {
        "Update_Date": "2018-03-13",
        "Description": "Apache SensSoft is a user activity logging and analytics system that enables developers to instrument and extract design and user insights from their applications. SensSoft incorporates a number of components that work together to provide user-experience researchers, project managers and software developers insights about how web applications are used. UserALE.js is an open source tool to quickly and efficiently instrument a JavaScript frontend application.",
        "Public Code Repo": "https://github.com/ESIPFed/sweet",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/ESIPFed/sweet",
        "Contributors": [
            "Lewis.J.Mcgibbney@jpl.nasa.gov"
        ],
        "Labor_Hours": 96,
        "Categories": [
            "Earth System Science",
            "Ontology"
        ],
        "Categories_NLP": [
            "project management",
            "distributed processing",
            "software development tool",
            "systems engineering",
            "design analysi",
            "evaluation",
            "human-computer interface",
            "computer systems design"
        ],
        "Software": "SWEET Ontology Suite"
    },
    {
        "Update_Date": "2017-11-16",
        "Description": "The Normalized Difference Vegetation Index (NDVI) for the study time period is calculated and then compared to the maximum and minimum NDVI from a baseline range of years in order to calculate Relative Greenness (RG). The change in RG from the previous year is found, and this allows the user to identify abrupt change in vegetation.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/LCD",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/LCD",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 500,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "refractivity",
            "vegetation",
            "time dependence",
            "change detection",
            "vegetative index"
        ],
        "Software": "LCD"
    },
    {
        "Update_Date": "2018-03-19",
        "Description": "We used the Google Earth Engine Code interface to create a classification of land use on the United States Virgin Islands (USVI). We used six classes: water, low density residential, high-density residential, forest/shrub, agriculture and barren. We included DEM, classification points, and landsat imagery bands to analyze the imagery.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/LUCT",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/LUCT",
        "Contributors": [
            "JDilger"
        ],
        "Labor_Hours": 208,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "earth surface",
            "remote sensing",
            "thematic mapping",
            "forest",
            "vegetation",
            "classification",
            "land use",
            "united state",
            "imagery",
            "water"
        ],
        "Software": "LUCT"
    },
    {
        "Update_Date": "2018-01-08",
        "Description": "Beta version of the Skyglow Estimation Toolbox. Documentation -> https://nasa-develop.github.io/SET/",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/SET",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/SET",
        "Contributors": [
            "rba.eos@gmail.com"
        ],
        "Labor_Hours": 20320,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [],
        "Software": "SET"
    },
    {
        "Update_Date": "2018-03-02",
        "Description": "This code develops calibration models using linear regression models with in-situ field data. The calibration models are then used to predict biomass (log), nitrogen percent, and nitrogen content for Landsat images from 2006-2016. Model results and data tables are output as separate files for each field season (i.e. winter and spring seasons).",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/COVER",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/COVER",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 90,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "remote sensing",
            "radiometric correction",
            "landsat satellite",
            "calibrating",
            "hydrology model",
            "image processing",
            "satellite imagery",
            "biomas",
            "image analysi",
            "regression analysi"
        ],
        "Software": "COVER"
    },
    {
        "Update_Date": "2018-02-02",
        "Description": "For the AcoFixDual_Tool: Geolocates and rescales ACOLITE output to make it useful in ArcMap.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/WRIT",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/WRIT",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 40,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [],
        "Software": "WRIT"
    },
    {
        "Update_Date": "2017-11-17",
        "Description": "SAVeTrEE is a script within Google Earth Engine for classifying areas of vegetation mortality. It prompts the user for a year, duration, and spectral index for which a mortality map should be produced, then fits a trend line to an imagery time sequence of vegetative spectral index values calculated from Landsat multispectral data.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/SAVeTrEE",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/SAVeTrEE",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 160,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "earth surface",
            "vegetation",
            "remote sensing",
            "landsat satellite",
            "earth (planet)",
            "mapping",
            "satellite imagery",
            "vegetative index",
            "earth resources program",
            "map"
        ],
        "Software": "SAVeTrEE"
    },
    {
        "Update_Date": "2017-11-20",
        "Description": "This software was created to address concerns of fire managers in the Missouri River Basin. Previously, fire managers inferred a regional fire risk from separate sources, (i.e. temperature maps, drought indices, and precipitation averages).",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/RIFRAF",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/RIFRAF",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 100,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "risk",
            "refractivity",
            "fire prevention",
            "structural basin",
            "river",
            "temperature effect",
            "river basin",
            "fire",
            "drought",
            "precipitation"
        ],
        "Software": "RIFRAF"
    },
    {
        "Update_Date": "2017-08-30",
        "Description": "Using the cloud-based computing power of Google Earth Engine (GEE), the Hydrologic Anomaly Index (HAE) is capable of uploading and analyzing large amounts of Earth observation climate data for the purpose of hydrologic analysis and monitoring. The end-user will be able to pull from and modify a library of scripts that are stored in Earth Engine, as well as upload and access data stored on a private data catalog. The final stage of development of the tool will include a more user-friendly application built using Google\u2019s App Engine, in which users will be able to display data products and interactive maps.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/HAE",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/HAE",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 500,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "library",
            "engine monitoring instrument",
            "clouds (meteorology)",
            "catalogs (publications)",
            "satellite observation",
            "climatology",
            "climate",
            "data reduction",
            "anomaly",
            "earth observations (from space)"
        ],
        "Software": "HAE"
    },
    {
        "Update_Date": "2017-08-07",
        "Description": "Cover Crop Remotely Observed Performance (CCROP): The Maryland Department of Agriculture (MDA) is interested in verifying winter cover crop implementation and analyzing cover crop productivity using satellite imagery.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/CCROP",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/CCROP",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 30,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "crop growth",
            "farm crop",
            "winter",
            "performance prediction",
            "productivity",
            "conference",
            "satellite imagery",
            "satellite observation",
            "agriculture",
            "crop identification"
        ],
        "Software": "CCROP"
    },
    {
        "Update_Date": "2017-08-07",
        "Description": "Flood Analysis Utilizing Landsat and ArcMap Tools (FAULT): This product was created in an effort to automate flood analysis throughout the Mississippi River Basin.",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/FAULT",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/NASA-DEVELOP/FAULT",
        "Contributors": [
            "jordan.s.vaa@nasa.gov"
        ],
        "Labor_Hours": 120,
        "Categories": [
            "Data & Image Processing"
        ],
        "Categories_NLP": [
            "failure analysi",
            "landsat satellite",
            "structural basin",
            "river",
            "satellite imagery",
            "water flow",
            "systems analysi",
            "geological fault",
            "river basin",
            "flood"
        ],
        "Software": "FAULT"
    },
    {
        "Update_Date": "2013-12-05",
        "Description": "Tiled WMS is a software package consisting of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The software was originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool (http://podaac-tools.jpl.nasa.gov/soto/), the Lunar Mapping and Modeling Project (LMMP) (http://lmmp.nasa.gov), and GIBS. Tiled WMS has also been used to serve data from JPL for NASA WorldWind and to produce movies at the Hayden Planetarium.",
        "Public Code Repo": "https://github.com/nasajpl/tiledwms",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasajpl/tiledwms",
        "Contributors": [
            "jtroberts"
        ],
        "Labor_Hours": 2144,
        "Categories": [
            "Global Imagery Browse Services",
            "GIBS"
        ],
        "Categories_NLP": [
            "software development tool",
            "imaging technique",
            "module",
            "mapping",
            "deployment",
            "scientific visualization",
            "image analysi",
            "high resolution",
            "imagery",
            "image processing"
        ],
        "Software": "tiledwms"
    },
    {
        "Update_Date": "2018-04-12",
        "Description": "Extracting structured information from PDFs - and later, diagrams",
        "Public Code Repo": "https://github.com/nasa-jpl/T-ENTacle",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-jpl/T-ENTacle",
        "Contributors": [
            "wmb@waynemosesburke.com"
        ],
        "Labor_Hours": 2496,
        "Categories": [
            "Extract information"
        ],
        "Categories_NLP": [],
        "Software": "T-ENTacle"
    },
    {
        "Update_Date": "2017-09-12",
        "Description": "Automatic Semantic Search Engine for Suitable Standards (ASSESS)",
        "Public Code Repo": "https://github.com/nasa-jpl/ASSESS",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-jpl/ASSESS",
        "Contributors": [
            "wmb@waynemosesburke.com"
        ],
        "Labor_Hours": 8208,
        "Categories": [
            "Automatic",
            "Search Engine",
            "Semantic"
        ],
        "Categories_NLP": [],
        "Software": "ASSESS"
    },
    {
        "Update_Date": "2018-04-16",
        "Description": "LiveView2 is a Qt frontend GUI for cuda_take, it displays focal plane data and basic analysis (such as the std. dev, dark subtraction, FFT, Spectral Profile, and Video Savant*-like* playback). Plots are implemented using the QCustomPlot library, which generates live color maps, bar graphs, and line graphs within the Qt C++ environment.",
        "Public Code Repo": "https://github.com/nasa-jpl/LiveView",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/nasa-jpl/LiveView",
        "Contributors": [
            "Elliott Liggett"
        ],
        "Labor_Hours": 27072,
        "Categories": [
            "focal plane",
            "QCustomPlot",
            "Qt frontend GUI",
            "C++",
            "Qt"
        ],
        "Categories_NLP": [
            "digital data",
            "spectrum analysi",
            "data processing",
            "mapping",
            "computer graphic",
            "graph theory",
            "plotting",
            "graphs (charts)",
            "map",
            "on-line system"
        ],
        "Software": "LiveView"
    },
    {
        "Update_Date": "2017-08-02",
        "Description": "The ontology analysis workflow is intended for validating ontologies based on the core IMCE ontologies. It uses OWL ontologies (TODO: OML AS INPUT) as input, and produces test reports in the quasi-standard JUnit format. The following will walk through the environment setup, and give instructions on how to run the workflow (a) locally and (b) on a CI system such as Jenkins.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analysis",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analysis",
        "Contributors": [
            "StevenJenkinsJPL"
        ],
        "Labor_Hours": 336,
        "Categories": [
            "Java 8 (JDK)",
            "OWL ontologies",
            "JRuby",
            "ontology",
            "Make",
            "ontology analysis",
            "local",
            "SBT",
            "JUint",
            "Jenkins"
        ],
        "Categories_NLP": [
            "environment simulation",
            "systems engineering",
            "systems analysi"
        ],
        "Software": "Ontology Analysis"
    },
    {
        "Update_Date": "2018-01-31",
        "Description": "JPL's IMCE ontologies for Model-Based Systems Engineering",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.public",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.public",
        "Contributors": [
            "StevenJenkinsJPL"
        ],
        "Labor_Hours": 177232,
        "Categories": [
            "engineering",
            "systems engineering",
            "ontology",
            "model-based"
        ],
        "Categories_NLP": [],
        "Software": "Ontology Public"
    },
    {
        "Update_Date": "2018-04-14",
        "Description": "The ontology processing and profile generation workflow is intended for validating and generating MagicDraw-compatible SysML profiles for core IMCE ontologies. It uses OWL ontologies (TODO: OML AS INPUT) as input. The following will walk through the environment setup, and give instructions on how to run the workflow (a) locally and (b) on a CI system such as Jenkins.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.workflow",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.workflow",
        "Contributors": [
            "StevenJenkinsJPL"
        ],
        "Labor_Hours": 5536,
        "Categories": [
            "OWL ontologies",
            "SysML profiles",
            "ontology processing",
            "ontology profile generation",
            "MagicDraw-compatible"
        ],
        "Categories_NLP": [
            "data processing equipment",
            "environment simulation",
            "image processing",
            "data processing",
            "systems engineering",
            "signal processing"
        ],
        "Software": "Ontology Workflow"
    },
    {
        "Update_Date": "2018-04-12",
        "Description": "Eclipse Tycho-based organization of the Ontological Modeling Language (OML)",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 151232,
        "Categories": [
            "Eclipse Tycho-based organization",
            "Ontological Modeling Language",
            "OML"
        ],
        "Categories_NLP": [],
        "Software": "Ontological Modeling Language (OML) Platform & Core Features"
    },
    {
        "Update_Date": "2018-04-11",
        "Description": "Definition of the normalized schema tables for JPL's Ontological Modeling Framework (OMF) at https://jpl-imce.github.io/gov.nasa.jpl.imce.oml.tables/.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.tables",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.tables",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 16400,
        "Categories": [
            "normalized schema tables",
            "OML",
            "Ontological Modeling Framework (OMF)"
        ],
        "Categories_NLP": [
            "tables (data)",
            "language",
            "data base management system",
            "machine oriented language",
            "language programming",
            "natural language (computers)",
            "linguistic",
            "object-oriented programming",
            "computation",
            "data base"
        ],
        "Software": "Normalized Database Schema Tables for JPL's Ontological Modeling Language (OML)"
    },
    {
        "Update_Date": "2018-04-11",
        "Description": "The Xcore OMF metamodel/schema is intended to be a single source for several derived artifacts whose contents is a projection of the OMF metamodel/schema. Among such artifacts, the cross-platform normalized database schema tables provide a single source specification for normalized database schema tables cross-compiled for several environments, including JVM (pure Java, pure Scala, mixed Java+Scala), JavaScript (Node.js), mixed (ScalaJS).",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.development.generators",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.development.generators",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 10336,
        "Categories": [
            "normalized database schema",
            "OML",
            "tables",
            "cross-platform",
            "Ontological Modeling Framework (OMF)"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "tables (data)",
            "radiation source",
            "specification",
            "data base",
            "light source"
        ],
        "Software": "Xtend generators for JPL's Ontological Modeling Framework (OMF)"
    },
    {
        "Update_Date": "2018-04-10",
        "Description": "This is an enhancement of the Apache XML Commons Resolver library implementation of the OASIS XML Catalog 1.1 specification. OML uses an OASIS XML Catalog to establish a mapping between external URI references (i.e., http URIs) and corresponding local URI references (i.e., file URIs). Stanford's Protege Desktop uses OASIS XML Catalogs for the same purpose.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.xml.catalog.scope",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.xml.catalog.scope",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 288,
        "Categories": [
            "Commons",
            "Library",
            "Apache",
            "Resolver",
            "XML"
        ],
        "Categories_NLP": [
            "library",
            "standard",
            "catalogs (publications)",
            "computer aided mapping",
            "information retrieval",
            "document markup language",
            "geodesy",
            "specification",
            "equipment specification",
            "file maintenance (computers)"
        ],
        "Software": "gov.nasa.jpl.imce.xml.catalog.scope"
    },
    {
        "Update_Date": "2018-03-08",
        "Description": "This Scala library provides a strongly typed API for processing Ontological Modeling Language data on Apache Spark using the expressive type extensions provided by Frameless.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.frameless",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.frameless",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 7072,
        "Categories": [
            "OMF",
            "Library",
            "Scala",
            "Ontological Modeling Framework",
            "API"
        ],
        "Categories_NLP": [
            "data acquisition",
            "tables (data)",
            "library",
            "language",
            "language programming",
            "linguistic",
            "high level language",
            "computation",
            "data reduction",
            "machine oriented language"
        ],
        "Software": "Scala/Frameless-based API for the Ontological Modeling Language"
    },
    {
        "Update_Date": "2018-03-08",
        "Description": "The OWL API binding for OMF implements the OMF Core functional API using the OWL API. This particular binding captures the conventions and restrictions on the use of OWL2-DL adopted for the development of JPL's Integrated Model-Centric Engineering (IMCE) ontologies.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.binding.owlapi",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.binding.owlapi",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 10080,
        "Categories": [
            "Ontological Modeling Language",
            "OML",
            "OWL",
            "binding",
            "API"
        ],
        "Categories_NLP": [
            "environment model",
            "systems integration",
            "engineering management",
            "model",
            "systems engineering",
            "product development",
            "engineering",
            "mathematical model",
            "spacecraft model",
            "aircraft model"
        ],
        "Software": "OWL API binding for OMF (Ontological Modeling Framework)"
    },
    {
        "Update_Date": "2018-03-08",
        "Description": "The OMG core functional API adopts techniques from the field of functional programming languages, particularly Scala, for specifying the vocabulary of ontological modeling as a set of abstract types (that is, no commitment implied or assumed about any implementation of these abstract types) and a set of functional operations on these abstract types (that is, operations in the mathematical sense of pure functions that compute output values based on input values). This functional paradigm for specifying a domain allows a clean separation between the domain of ontological modeling (i.e., the focus of the OMF Core Functional API) from specific bindings for standards-based technology frameworks such as W3C's OWL, OMG's UML/SysML and, potentially, others. More importantly, the functional nature of this OMF Core API allows decoupling algorithms for analyzing, constructing, auditing, verifying, reasoning about OMF ontological models independently of the particular technology in which these ontological models are represented.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.core",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.omf.scala.core",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 4656,
        "Categories": [
            "ontological models",
            "abstract types",
            "functional programming",
            "ontological modeling",
            "API"
        ],
        "Categories_NLP": [
            "algorithm",
            "computerized simulation",
            "programming language",
            "mathematical programming",
            "model",
            "operations research",
            "linguistic",
            "mathematical model",
            "computation",
            "random processe"
        ],
        "Software": "OMF (Ontological Modeling Framework) Core Functional API"
    },
    {
        "Update_Date": "2018-03-08",
        "Description": "This library provides an implementation of the OML Resolver API.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.resolver",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.resolver",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 3392,
        "Categories": [
            "resolver",
            "ontological models",
            "symbol table",
            "library",
            "JSON",
            "serialization"
        ],
        "Categories_NLP": [
            "tables (data)",
            "fatigue (materials)",
            "stability",
            "transmitter",
            "systems analysi",
            "computation",
            "estimating",
            "symbol",
            "image",
            "simulation"
        ],
        "Software": "Symbol table resolver for the JSON serialization of JPL's Ontological Modeling Framework Schema."
    },
    {
        "Update_Date": "2018-03-01",
        "Description": "The documentation about the Ontological Modeling Language specification",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.doc",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.doc",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 992,
        "Categories": [
            "document",
            "Ontological Modeling Language",
            "OML"
        ],
        "Categories_NLP": [],
        "Software": "JPL's Ontological Modeling Language Specification Document"
    },
    {
        "Update_Date": "2018-02-06",
        "Description": "Configuration for setting up a Fuseki server for the IMCE ontology workflows",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.fuseki",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.fuseki",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 32,
        "Categories": [
            "server",
            "ontology",
            "configuration",
            "Fuseki",
            "IMCE",
            "workflow"
        ],
        "Categories_NLP": [
            "spacecraft configuration",
            "missile",
            "scattering function",
            "systems engineering",
            "aircraft configuration",
            "phosphorus compound",
            "optimization",
            "phase control",
            "reliability",
            "barium oxide"
        ],
        "Software": "Configuration for setting up a Fuseki server for the IMCE ontology workflows"
    },
    {
        "Update_Date": "2017-12-28",
        "Description": "Aggregate of Akka, Play, Scalaz, ScalaCheck, ScalaTest, Spray libraries",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.other_scala_libraries",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.third_party.other_scala_libraries",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 32,
        "Categories": [
            "libraries",
            "aggregate",
            "library"
        ],
        "Categories_NLP": [],
        "Software": "IMCE Third-Party Other Scala Libraries"
    },
    {
        "Update_Date": "2017-11-29",
        "Description": "This sbt plugin aggregates a few community plugins used across several projects in JPL's Integrated Model-Centric Engineering initiative and in OMG's Tool Infrastructure Working Group. There is an inherent tradeoff between maintaining slight variations of similar build configurations across multiple projects (i.e. no common sbt plugin) and defining a common sbt plugin reused across multiple projects to simplify their build configurations. Conceptually, the scope and purpose of this sbt plugin is very similar to the elegant nice-sbt-settings. Practically, nice-sbt-settings is indeed nicer.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.sbt.plugin",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.sbt.plugin",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 688,
        "Categories": [
            "community plugin",
            "sbt plugin",
            "aggregate"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "systems integration",
            "engineering management",
            "configuration management",
            "engineering",
            "systems engineering",
            "aircraft model",
            "tradeoff",
            "mathematical model",
            "model"
        ],
        "Software": "JPL's IMCE SBT Plugin for Java, Scala, AspectJ projects"
    },
    {
        "Update_Date": "2017-10-18",
        "Description": "This project builds an aggregate of the OWL API published by several organizations, including: net.sourceforge.owlapi (the official OWL API as the de-facto reference implementation of the W3C OWL Functional Syntax Specification), and org.openrdf.sesame (the Eclipse RDF4J Sesame implementation of W3C Resource Description Framework, RDF)",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.owlapi_libraries",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.third_party.owlapi_libraries",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "libraries",
            "aggregate"
        ],
        "Categories_NLP": [
            "project management",
            "standard",
            "earth resource",
            "resource allocation",
            "international cooperation",
            "syntax",
            "systems engineering",
            "specification",
            "organization",
            "functional design specification"
        ],
        "Software": "IMCE Third-Party OWLAPI Libraries"
    },
    {
        "Update_Date": "2017-10-06",
        "Description": "This project builds an aggregates of several Scala libraries for graph data structures published by several organizations: com.assembla.scala-incubator (In-memory graph library intended to fit seamlessly into the Scala Collection Library), and net.liftweb (The JSON library from the Lift web framework for Scala).",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.scala_graph_libraries",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.third_party.scala_graph_libraries",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 32,
        "Categories": [
            "scala",
            "libraries",
            "graph",
            "aggregate"
        ],
        "Categories_NLP": [
            "data acquisition",
            "aggregate",
            "library",
            "data storage",
            "memory (computers)",
            "computer storage device",
            "graph theory",
            "data base",
            "graphs (charts)",
            "lift"
        ],
        "Software": "IMCE Third-Party Scala Graph Libraries"
    },
    {
        "Update_Date": "2017-09-28",
        "Description": "There is no description for this software",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analyzed",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.analyzed",
        "Contributors": [
            "none listed"
        ],
        "Labor_Hours": 96,
        "Categories": [
            "ontologies"
        ],
        "Categories_NLP": [],
        "Software": "gov.nasa.jpl.imce.ontologies.loadprod"
    },
    {
        "Update_Date": "2017-03-01",
        "Description": "The IMCE Dynamic Scripts plugin is compatible with any edition of MagicDraw 18.0.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.plugin",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.plugin",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 4992,
        "Categories": [
            "plugin",
            "MagicDraw",
            "scripts",
            "IMCE",
            "dynamic"
        ],
        "Categories_NLP": [
            "boundary layer",
            "stability",
            "fluid dynamic",
            "radiation",
            "environment",
            "reliability",
            "circuit"
        ],
        "Software": "IMCE Dynamic Scripts plugin for MagicDraw 18"
    },
    {
        "Update_Date": "2018-05-01",
        "Description": "Apache Open Climate Workbench is an effort to develop software that performs climate model evaluation using model outputs from a variety of different sources the Earth System Grid Federation, the Coordinated Regional Climate Downscaling Experiment, the U.S. National Climate Assessment and the North American Regional Climate Change Assessment Program and temporal/spatial scales with remote sensing data from NASA, NOAA and other agencies. The toolkit includes capabilities for rebinning, metrics computation and visualization.",
        "Public Code Repo": "http://www.apache.org/dyn/closer.lua/climate/1.3.0/climate-1.3.0-rc1.zip",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "http://www.apache.org/dyn/closer.lua/climate/1.3.0/climate-1.3.0-rc1.zip",
        "Contributors": [
            "lewis.j.mcgibbney@jpl.nasa.gov"
        ],
        "Labor_Hours": 15232,
        "Categories": [
            "NOAA",
            "climate",
            "downscaling",
            "assessment",
            "earth",
            "model",
            "climate change"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "remote sensing",
            "climate model",
            "climate change",
            "scientific visualization",
            "nasa program",
            "satellite observation",
            "climate",
            "earth science",
            "remote sensor"
        ],
        "Software": "Apache Open Climate Workbench 1.3.0"
    },
    {
        "Update_Date": "2017-09-05",
        "Description": "This launcher application follows the guidelines for starting MagicDraw 18.5 in a configuration for running MagicDraw 18.5 with the IMCE DynamicScripts plugin for MagicDraw 18.5. installed outside of the MagicDraw installation folder.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.launcher",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.dynamic_scripts.magicdraw.launcher",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 208,
        "Categories": [
            "DynamicScripts",
            "plugin",
            "MagicDraw",
            "IMCE",
            "launcher"
        ],
        "Categories_NLP": [
            "spacecraft configuration",
            "launcher",
            "missile",
            "vibration",
            "systems engineering",
            "aircraft configuration",
            "aerodynamic configuration",
            "optimization",
            "installing",
            "reliability"
        ],
        "Software": "Launcher for IMCE's MagicDraw DynamicScripts Plugin"
    },
    {
        "Update_Date": "2017-02-28",
        "Description": "To enable these enhancements at runtime in MD, this library uses the so-called load-time weaving strategy. AspectJ is an aspect-oriented extension to Java. Because AspectJ operates at the level of bytecode, it is also applicable to other languages like Scala that compile to the JVM.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.magicdraw.library.enhanced_api#imce-magicdraw-library-for-aspectj-based-md-api-enhancements",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.magicdraw.library.enhanced_api#imce-magicdraw-library-for-aspectj-based-md-api-enhancements",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 176,
        "Categories": [
            "diagram",
            "MagicDraw",
            "load-time",
            "IMCE",
            "browser",
            "weaving",
            "AspectJ",
            "enhancement"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "response time (computers)",
            "library",
            "language",
            "strategy",
            "hardware description language",
            "time dependence",
            "loads (forces)",
            "high level language",
            "machine oriented language"
        ],
        "Software": "IMCE MagicDraw Library for AspectJ-based MD API enhancements"
    },
    {
        "Update_Date": "2017-08-30",
        "Description": "A textual DSL for specifying browser, diagram & contextualized actions in a modeling tool. This project defines a tool-neutral, generic DSL for specifying 'dynamic scripts'. A dynamic script specifies the location of a modeling function compiled for the JVM that can be invoked for modeling elements matching the applicability criteria specified in the script. The genericity of this DSL is that the applicability criteria can be specified in terms of references to tool-neutral identifiers of metaclasses, stereotypes and library types and the context where scripts are to be made available to users is specified in terms of generic notions of model browser and diagrams; user-interface notions that are widely common to graphical modeling tools.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.dynamic_scripts.generic_dsl",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.dynamic_scripts.generic_dsl",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 480,
        "Categories": [
            "textual",
            "DSL",
            "diagram",
            "tool-neutral",
            "generic",
            "dynamic scripts",
            "browser",
            "modeling"
        ],
        "Categories_NLP": [
            "human-computer interface",
            "position (location)",
            "computerized simulation",
            "library",
            "finite element method",
            "dynamic model",
            "graphical user interface",
            "mathematical model",
            "model"
        ],
        "Software": "JPL Dynamic Scripts Generic DSL"
    },
    {
        "Update_Date": "2017-08-29",
        "Description": "This program will execute the profile generator application (gov.nasa.jpl.imce.profileGenerator.application), and will package the results. It depends on both the profile generator application and the ontology bundles produced.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.batch",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.batch",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 80,
        "Categories": [
            "profile",
            "execution",
            "batch",
            "generator",
            "application"
        ],
        "Categories_NLP": [
            "optimization",
            "electric generator",
            "temperature profile"
        ],
        "Software": "Profile Generator - Batch Execution"
    },
    {
        "Update_Date": "2017-06-27",
        "Description": "This repository contains the files required for creating a docker image with required software for ontology processing.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 128,
        "Categories": [
            "image",
            "ontology",
            "docker",
            "processing"
        ],
        "Categories_NLP": [
            "software development tool",
            "data processing",
            "digital technique",
            "architecture (computers)",
            "image analysi",
            "imaging technique",
            "signal processing",
            "image processing",
            "file maintenance (computers)",
            "circuit"
        ],
        "Software": "Ontology Processor"
    },
    {
        "Update_Date": "2017-06-01",
        "Description": "This repository provides mapping from OTI models (i.e., OMG Tool-neutral Interface for UML) to generic OMF (Ontological Modeling Framework).",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.ontologies.processor",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 1488,
        "Categories": [
            "OMF",
            "Ontological",
            "mapping",
            "UML",
            "Framework",
            "generic",
            "OMG",
            "tool-neutral",
            "OTI",
            "Modeling"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "dynamic model",
            "software development tool",
            "mapping",
            "scale model",
            "mathematical model",
            "solid-solid interface",
            "model"
        ],
        "Software": "Mapping from OTI models to Generic OMF"
    },
    {
        "Update_Date": "2017-05-09",
        "Description": "This repository provides simplified OML for exercising Xcore/Xtext/Xtend code generation and building using gradle.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.core",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 87104,
        "Categories": [
            "gradle",
            "OML",
            "Xtend",
            "Ontological",
            "Language",
            "Xcore",
            "Xtext",
            "Modeling"
        ],
        "Categories_NLP": [
            "reactor core",
            "language",
            "language programming",
            "programming language",
            "failure",
            "natural language (computers)",
            "linguistic",
            "optimization",
            "reliability",
            "machine oriented language"
        ],
        "Software": "Ontological Modeling Language core build (Xcore, Xtext, Xtend)"
    },
    {
        "Update_Date": "2017-04-18",
        "Description": "Generator from Ontological Modeling Framework (OMF) vocabularies to profiles extending UML/SysML",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.application",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.application",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 1168,
        "Categories": [
            "OMF",
            "vocabularies",
            "Ontological",
            "generator",
            "Modeling",
            "Framework",
            "profiles",
            "UML/SysML"
        ],
        "Categories_NLP": [
            "transformations (mathematics)",
            "conference",
            "systems engineering",
            "temperature profile",
            "computation",
            "reliability",
            "optimization",
            "mathematical model",
            "electric generator",
            "model"
        ],
        "Software": "A MagicDraw DynamicScript application for executing the IMCE profile generator from OMF bundles"
    },
    {
        "Update_Date": "2017-04-04",
        "Description": "The IMCE Project Template is a Giter8 template project serving as the basis for new Scala projects within the IMCE build ecosystem. Meant for developers familiar with or new to the IMCE platform, this repository contains reference guides and general purpose build and publish scripts for integration with IMCE accounts on Travis CI, Bintray and Github.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.templates.scala.g8",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.templates.scala.g8",
        "Contributors": [
            "sjiherzig"
        ],
        "Labor_Hours": 48,
        "Categories": [
            "TravisCI",
            "Giter8",
            "GitHub",
            "Scala",
            "project",
            "template",
            "IMCE",
            "Bintray"
        ],
        "Categories_NLP": [
            "project management",
            "systems integration",
            "systems engineering",
            "ecosystem",
            "manual",
            "optimization"
        ],
        "Software": "IMCE Project Template"
    },
    {
        "Update_Date": "2017-03-01",
        "Description": "This is a multi-project of mostly Xcore/Xtext/Xtend sources used to generate several components (abstract syntax metamodel; concrete syntax parser, doc, ...). There are several Xtend-based code generators that produce Scala source code.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.specification.parent",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.oml.specification.parent",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 6496,
        "Categories": [
            "scala",
            "OML",
            "composite",
            "IMCE",
            "engineering",
            "centric",
            "Xtend",
            "language",
            "integrated",
            "generator",
            "model",
            "ontological",
            "modeling"
        ],
        "Categories_NLP": [
            "mathematical model",
            "specification",
            "programming language",
            "syntax",
            "systems engineering",
            "model",
            "language",
            "bionic",
            "coder",
            "hardware description language"
        ],
        "Software": "Composite project for JPL's Integrated Model-Centric Engineering (IMCE) Ontological Modeling Language (OML) Specification"
    },
    {
        "Update_Date": "2016-12-13",
        "Description": "This contains changes from previous versions. In IMCE.ISO80000-5 Thermodynamics::Units -- 'cubic metre ratio per pascasl' has a slot value: hasReducedFactors=false -- 'metre coefficient per kelvin' has a slot value: hasReducedFactors=false",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.metrology.isoiec80000.magicdraw.library",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.metrology.isoiec80000.magicdraw.library",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "ISO",
            "integrated",
            "centric",
            "Library",
            "MagicDraw",
            "model",
            "IEC",
            "IMCE",
            "engineering"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "library",
            "mathematical model",
            "slot antenna",
            "slot"
        ],
        "Software": "ISO/IEC 80000 MagicDraw library resource from JPL's Integrated Model-Centric Engineering (IMCE)"
    },
    {
        "Update_Date": "2017-01-12",
        "Description": "This project builds an aggregate of several Apache Jena libraries published by the following organizations: 1) org.apache.jena A Java framework for building Semantic Web & Linked Data applications 2) org.apache.httpcomponents Toolset of low-level Java components focused on HTTP and associated protocols 3) xerces XML parsers for Java.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.jena_libraries",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.third_party.jena_libraries",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "Jena",
            "libraries",
            "Apache",
            "aggregate"
        ],
        "Categories_NLP": [
            "semantic",
            "java (programming language)",
            "library",
            "protocol (computers)",
            "document markup language",
            "linguistic",
            "computation",
            "object-oriented programming",
            "data base",
            "organization"
        ],
        "Software": "IMCE Third-Party Jena Libraries"
    },
    {
        "Update_Date": "2017-01-11",
        "Description": "Project Usage Integrity Checker for MagicDraw 18",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.magicdraw.projectUsageIntegrityChecker",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.magicdraw.projectUsageIntegrityChecker",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 7024,
        "Categories": [
            "usage",
            "checker",
            "integrity",
            "MagicDraw"
        ],
        "Categories_NLP": [],
        "Software": "Project Usage Integrity Checker for MagicDraw 18"
    },
    {
        "Update_Date": "2016-11-18",
        "Description": "Configuration for Semmle Analysis of JPL's open-source projects",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.semmle",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.semmle",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 96,
        "Categories": [
            "semmle",
            "analysis",
            "open-source"
        ],
        "Categories_NLP": [],
        "Software": "Configuration for Semmle Analysis of JPL's open-source projects"
    },
    {
        "Update_Date": "2016-11-04",
        "Description": "This is a prototype to explore SPARK idioms for loading & analyzing OMF Schema tabular data.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.spark.data",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.spark.data",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 112,
        "Categories": [
            "OMF",
            "tabular",
            "SPARK",
            "schema",
            "prototype"
        ],
        "Categories_NLP": [
            "simulation",
            "data processing",
            "systems analysi",
            "data system",
            "computation",
            "prototype",
            "estimating",
            "data reduction"
        ],
        "Software": "Prototyping SPARK-based analysis of IMCE OMF Schema data"
    },
    {
        "Update_Date": "2016-11-26",
        "Description": "Model for representing SysML profiles, used as an intermediate format in the profile generation process.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.profile",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.profile",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 272,
        "Categories": [
            "profile",
            "generator",
            "SysML"
        ],
        "Categories_NLP": [
            "atmospheric model",
            "format",
            "dynamic model",
            "mathematical model",
            "electric generator",
            "wave generation"
        ],
        "Software": "Profile Generator - Profile Model"
    },
    {
        "Update_Date": "2016-10-26",
        "Description": "Model for representing digest bundles, used as an intermediate format in the profile generation process.",
        "Public Code Repo": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.bundle",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/gov.nasa.jpl.imce.profileGenerator.model.bundle",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 208,
        "Categories": [
            "profile",
            "digest",
            "bundles"
        ],
        "Categories_NLP": [
            "signal generator",
            "format",
            "systems engineering",
            "mathematical model",
            "electric generator",
            "optimization",
            "reliability",
            "temperature profile",
            "aircraft model",
            "model"
        ],
        "Software": "Profile Generator - Bundle Model"
    },
    {
        "Update_Date": "2016-10-24",
        "Description": "This project builds an aggregate of the AspectJ libraries published by the following organization: org.aspectj A seamless aspect-oriented extension to the Java programming language.",
        "Public Code Repo": "https://github.com/JPL-IMCE/imce.third_party.aspectj_libraries",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JPL",
        "External Link": "https://github.com/JPL-IMCE/imce.third_party.aspectj_libraries",
        "Contributors": [
            "NicolasRouquette"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "Java",
            "libraries",
            "AspectJ",
            "aggregate"
        ],
        "Categories_NLP": [
            "java (programming language)",
            "library",
            "language",
            "programming language",
            "machine oriented language",
            "language programming",
            "linguistic",
            "high level language",
            "object-oriented programming",
            "organization"
        ],
        "Software": "IMCE Third-Party AspectJ Libraries"
    },
    {
        "Update_Date": "2018-06-26",
        "Description": "Dymos is a library for solving general optimal control problems within the context of multidisciplinary optimization via the OpenMDAO multidisciplinary optimization framework.",
        "Public Code Repo": "https://github.com/OpenMDAO/dymos",
        "License": [
            "ALv2"
        ],
        "NASA Center": "GRC",
        "External Link": "https://github.com/OpenMDAO/dymos",
        "Contributors": [
            "robfalck"
        ],
        "Labor_Hours": 2500,
        "Categories": [
            "optimal control",
            "openmdao",
            "trajectory optimization",
            "python"
        ],
        "Categories_NLP": [
            "time optimal control",
            "control theory",
            "systems analysi",
            "problem solving",
            "combinatorial analysi",
            "optimization",
            "automatic control",
            "computation",
            "control",
            "optimal control"
        ],
        "Software": "Dymos"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "'Simulation of Cryogenic Tank with Temperature Stratification' is a MATLAB-based simulation of temperature stratification effects for cryogenic fluid in a tank. It is a reduced dynamical model describing temperature stratification effects driven by natural convection in a liquid hydrogen cryogenic tank. It accounts for storage, loading, and unloading of cryogenic fluid.",
        "Public Code Repo": "https://github.com/nasa/LH2Sim",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://software.nasa.gov/software/ARC-17900-1",
        "Contributors": [
            "Christopher Teubert"
        ],
        "Labor_Hours": 416,
        "Categories": [
            "MATLAB",
            "cryogenic",
            "stratification",
            "temperature",
            "hydrogen",
            "fluid"
        ],
        "Categories_NLP": [
            "free convection",
            "cryogenic",
            "cryogenic fluid",
            "propellant tank",
            "convection",
            "stratification",
            "temperature effect",
            "convection current",
            "hydrogen",
            "liquid hydrogen"
        ],
        "Software": "Simulation of Cryogenic Tank with Temperature Stratification"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "jwst_backgrounds is a a simple program to predict the levels of background emission in JWST observations, for use in proposal planning. It accesses a precompiled background cache prepared by Space Telescope Science Institute. The background cache is hosted by the Mikulski Archive for Space Telescopes (MAST), so you need internet access to run the tool with the remote cache. It is possible to download the full background cache to your local machine. Instructions for downloading the background cache can be found at http://archive.stsci.edu/archive_news/2017/08-Aug/index.html#article1.",
        "Public Code Repo": "https://github.com/spacetelescope/jwst_backgrounds",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "ARC",
        "External Link": "https://jwst.stsci.edu/news-events/news/News%20items/the-jwst-backgrounds-tool-is-now-available",
        "Contributors": [
            "Klaus Pontoppidan"
        ],
        "Labor_Hours": 304,
        "Categories": [
            "Space",
            "Mikulski Archive for Space Telescopes",
            "observations",
            "Mikulski",
            "Archive",
            "background",
            "emission",
            "Telescopes",
            "MAST",
            "predict",
            "python"
        ],
        "Categories_NLP": [
            "space observations (from earth)",
            "internet",
            "spaceborne telescope",
            "aerospace science",
            "telescope"
        ],
        "Software": "JWST Background Tools"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "PostgreSQL (https://www.postgresql.org) is an Open Source Relational Database Management System (RDBMS). It includes a C library (libpq) for interacting with the server over the network (https://www.postgresql.org/docs/10/static/libpq.html). This module provides a rich interface to the PostgreSQL libpq library for Perl 6. It includes capabilities for prepared query caching, database connection caching, exception handling, flexible type conversion (including Boolean, Date, DateTime, Byte Arrays, etc. as well as custom types), bulk data copy in and out, listen/notify, transactions, and cursors for large query processing.",
        "Public Code Repo": "https://github.com/CurtTilmes/perl6-dbpg",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://software.nasa.gov/software/GSC-18031-1",
        "Contributors": [
            "Curt Tilmes"
        ],
        "Labor_Hours": 752,
        "Categories": [
            "Open",
            "System",
            "PostgreSQL",
            "caching",
            "Relational",
            "C",
            "Management",
            "C library",
            "conversion",
            "Source",
            "RDBMD",
            "Database",
            "processing"
        ],
        "Categories_NLP": [
            "library",
            "data management",
            "data system",
            "query language",
            "data processing equipment",
            "data base management system",
            "data processing",
            "module",
            "computer network",
            "data base"
        ],
        "Software": "Perl 6 DBPg PostgreSQL module"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "A simple wrapper exposing the Linux epoll(7) I/O event notification facility within Perl 6.",
        "Public Code Repo": "https://github.com/CurtTilmes/perl6-epoll",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://software.nasa.gov/software/GSC-18030-1",
        "Contributors": [
            "Curt Tilmes"
        ],
        "Labor_Hours": 80,
        "Categories": [
            "wrapper",
            "notification",
            "Perl 6",
            "linux"
        ],
        "Categories_NLP": [],
        "Software": "Perl 6 epoll"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "This innovation creates the capability for Fortran software developers to routinely declare and use specialized software containers for arbitrary types of data. The capability is somewhat analogous to that of the C Standard Template Library but with important differences. Although the number of containers are expected to grow, the current supported cases are Vector, Map, and Set. Contained items can be of any intrinsic type or user-defined derived type. The user can also indicate that the contained objects are polymorphic and/or pointers with corresponding implications for the semantics of using those containers.",
        "Public Code Repo": "https://github.com/nasa/gFTL",
        "License": [
            "ALv2"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://software.nasa.gov/software/GSC-17742-1",
        "Contributors": [
            "tclune"
        ],
        "Labor_Hours": 6688,
        "Categories": [
            "Fortran",
            "containers",
            "software"
        ],
        "Categories_NLP": [
            "semantic",
            "data acquisition",
            "library",
            "standard",
            "software development tool",
            "object-oriented programming",
            "c (programming language)",
            "data reduction",
            "template",
            "map"
        ],
        "Software": "Fortran Template Library (gFTL) for managing collections of objects via software containers"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "The General Mission Analysis Tool (GMAT) is the world's only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
        "Public Code Repo": "https://sourceforge.net/projects/gmat/files/latest/download",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://software.nasa.gov/software/GSC-18094-1",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 37504,
        "Categories": [
            "LRO",
            "optimizer",
            "non-linear",
            "Solar and Heliospheric Observatory",
            "Transiting Exoplanet Survey Satellite",
            "mission",
            "TESS",
            "orbit",
            "SDO",
            "SOHO",
            "open",
            "ACE",
            "Solar Dynamics Observatory",
            "Lunar Reconnaissance Orbiter",
            "space",
            "Advanced Composition Explorer",
            "Wind"
        ],
        "Categories_NLP": [
            "navigation",
            "space mission",
            "manned space flight",
            "systems engineering",
            "systems analysi",
            "space navigation",
            "design analysi",
            "low earth orbit",
            "software development tool",
            "mission planning"
        ],
        "Software": "General Mission Analysis Tool (GMAT) Version R2018a"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "The Stochastic Reduced Order Models with Python (SROMPy) software package is code written in Python to help solve uncertainty quantification and propagation problems. Stochastic Reduced Order Models (SROMs) are low-dimensional, discrete representations of a given random vector being modeled that facilitate efficient stochastic calculations. SROMs can be viewed as a smart Monte Carlo method - using the concept for uncertainty propagation is similarly straightforward, but can significantly reduce computation time. An SROM is formed for a given target random vector by solving an optimization problem that determines it's parameters by minimizing the error between the statistics of the SROM and the target. Once the SROM is formed, it can be use to efficiently perform a probabilistic analysis. The SROMPy software package is a tool to solve the optimization problem efficiently to generate an SROM that can be used to propagate uncertainty through a given model.",
        "Public Code Repo": "https://github.com/nasa/SROMPy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19359-1",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 1008,
        "Categories": [
            "vector",
            "discrete",
            "stochastic",
            "random",
            "python",
            "order",
            "propagation",
            "reduced",
            "low-dimensional",
            "representations",
            "models",
            "calculations"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "statistical analysi",
            "computation",
            "mathematical model",
            "run time (computers)",
            "error analysi",
            "error",
            "monte carlo method",
            "optimization",
            "software development tool"
        ],
        "Software": "Stochastic Reduced Order Models with Python (SROMPy)"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "The Plan Execution Interchange Language (PLEXIL) is an open source synchronous language developed by NASA for commanding and monitoring autonomous systems. PLEXIL Formal Interactive Verification Environment (PLEXIL5) is a tool that implements a formal executable semantics of PLEXIL. PLEXIL5 includes a graphical interface that enable access to formal verification techniques such as model-checking, symbolic execution, theorem proving, and static analysis of plans. The graphical environment supports formula editing and visualization of counterexamples, interactive simulation of plans at different granularity levels, and random initialization of external environment variables.",
        "Public Code Repo": "https://github.com/nasa/PLEXIL5",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19339-1",
        "Contributors": [
            "cesar.a.munoz@nasa.gov"
        ],
        "Labor_Hours": 42320,
        "Categories": [
            "Verification",
            "autonomous",
            "Interchange",
            "sychronous",
            "Execution",
            "Environment",
            "Formal",
            "Interactive",
            "Language",
            "Plan",
            "PLEXIL5"
        ],
        "Categories_NLP": [
            "computerized simulation",
            "semantic",
            "mathematical model",
            "programming language",
            "systems analysi",
            "high level language",
            "scientific visualization",
            "program verification (computers)",
            "simulation",
            "systems simulation"
        ],
        "Software": "Formal Interactive Verification Environment for the Plan Execution Interchange Language (PLEXIL5)"
    },
    {
        "Update_Date": "2017-07-16",
        "Description": "AprilNav is a mobile indoor real-time landmark navigation system.",
        "Public Code Repo": "https://github.com/nasa/AprilNav",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "MSFC",
        "External Link": "https://github.com/nasa/AprilNav",
        "Contributors": [
            "gretastudier"
        ],
        "Labor_Hours": 600,
        "Categories": [
            "Navigation",
            "Tools",
            "Autonomous Systems"
        ],
        "Categories_NLP": [],
        "Software": "AprilNav"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "This is a training tool for individuals to learn how to develop software with NASA-developed Core Flight software (CFS) framework. No agreement is necessary through this catalog. Software is available at open source site.",
        "Public Code Repo": "https://software.nasa.gov/software/LAR-19128-1",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "JSC",
        "External Link": "https://software.nasa.gov/software/LAR-19128-1",
        "Contributors": [
            "jsc-ttco-software-request@mail.nasa.gov"
        ],
        "Labor_Hours": 1,
        "Categories": [
            "framework",
            "flight",
            "training",
            "core",
            "software"
        ],
        "Categories_NLP": [
            "programming environment",
            "catalogs (publications)",
            "software development tool",
            "flight control",
            "systems engineering",
            "nasa program",
            "education",
            "astronomical catalog",
            "astronaut training",
            "space flight"
        ],
        "Software": "CFS-101 Training"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "This tool includes three general types of scripts. The first one extracts average NDVI values from Landsat 5 and Landsat 8 image collections for specified reference dates (typically a period of 10-15 years). Anomalies in NDVI values are then derived from Landsat 5 & 8 reference image collections from later dates (typically the year after the reference period to present). Various graphs and charts are produced showing positive and negative NDVI changes for specified points. The results are also visualized on the map as either areas of NDVI gain (displayed in green) or NDVI loss (displayed in red). The second types of scripts included scripts that perform unsupervised classifications to determine marsh extent for a variety of years and were made by applying a mask over the specified study area that incorporates elevation data to exclude regions over a specified height above average sea-level. These scripts require the user to choose classified pixel clusters that represent marsh land cover by using the Google Earth Inspector tab and then entering those values into the script to generate the marsh extent maps. Results of these scripts include classification maps for various years (2000, 2005, 2010, 2015, etc.). The user can then decide to export those results into either their Assets or their Drive, or both. A third type of script is used for statistics regarding the classified maps generated in the classification scripts. These statistics include total pixel number and total marsh area calculated into square meters after the marsh extent pixels are clipped to our study area (the State of Maryland).",
        "Public Code Repo": "https://github.com/NASA-DEVELOP/MARSHe",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19211-1",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "Landsat 5",
            "image",
            "evaluation",
            "marsh",
            "sensing",
            "health",
            "Landsat 8",
            "remote"
        ],
        "Categories_NLP": [
            "remote sensing",
            "landsat satellite",
            "thematic mapping",
            "classification",
            "mapping",
            "satellite imagery",
            "topography",
            "photomapping",
            "map",
            "thematic mappers (landsat)"
        ],
        "Software": "MaRSHE- Marsh Remote Sensing Health Evaluation"
    },
    {
        "Update_Date": "2018-08-21",
        "Description": "This software was developed to solve Reynolds-averaged Navier-Stokes Equations to simulate turbulent, viscous flows over three-dimensional configurations. A general multiblock grid is used to model complex configurations. A multi-stage Runge-Kutta pseudo-time stepping scheme is coupled with residual smoothing and multigrid acceleration techniques to form an efficient algorithm. TLNS3D-MB was the first CFD code to demonstrate grid independent convergence rate for transonic viscous flows over wing/fuselage configurations.",
        "Public Code Repo": "https://github.com/nasa/TLNS3D",
        "License": [
            "ALv2"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-16666-GS",
        "Contributors": [
            "larc-sra@mail.nasa.gov"
        ],
        "Labor_Hours": 29952,
        "Categories": [
            "Reynolds",
            "turbulent",
            "Stokes",
            "Navier",
            "configurations",
            "equations",
            "simulate",
            "Navier-Stokes",
            "averaged",
            "three-dimensional",
            "viscous",
            "Reynolds-averaged"
        ],
        "Categories_NLP": [
            "navier-stokes equation",
            "runge-kutta method",
            "grid generation (mathematics)",
            "aerodynamic configuration",
            "unstructured grids (mathematics)",
            "multigrid method",
            "computational fluid dynamic",
            "algorithm",
            "three dimensional flow",
            "computational grid"
        ],
        "Software": "TLNS3D"
    },
    {
        "Update_Date": "2018-09-27",
        "Description": "The Curiosity rover has been on the surface of Mars for over five years. In that time, it has sent over 200,000 photos back to Earth. Using these photos, engineers at JPL have reconstructed the 3D surface of Mars for their scientists to use as a mission planning tool \u2013 surveying the terrain and identifying geologically significant areas for Curiosity to investigate further. And now you can explore the same Martian surface in your browser in an immersive WebVR experience. Access Mars features four important mission locations: the Landing Site, Pahrump Hills, Marias Pass, and Murray Buttes. Additionally, users can visit Curiosity's 'Current Location' for a look at where the rover has been in the past two to four weeks. And while you explore it all, JPL scientist Katie Stack Morgan will be your guide, teaching you about key mission details and highlighting points of interest.",
        "Public Code Repo": "https://github.com/googlecreativelab/access-mars",
        "License": [
            "ALv2"
        ],
        "NASA Center": "JPL",
        "External Link": "https://accessmars.withgoogle.com/",
        "Contributors": [
            "jeremyabel"
        ],
        "Labor_Hours": 60208,
        "Categories": [
            "Mars",
            "WebVR",
            "Curiosity Rover"
        ],
        "Categories_NLP": [
            "mars landing",
            "mars (planet)",
            "site selection",
            "mars environment",
            "landing site",
            "terrain",
            "mars exploration",
            "roving vehicle",
            "topography",
            "mars surface"
        ],
        "Software": "Access Mars"
    },
    {
        "Update_Date": "2018-11-14",
        "Description": "This is a tool for defining over 25,000 NASA acronyms.",
        "Public Code Repo": "https://github.com/nasa/NASA-Acronyms",
        "License": [
            "MIT"
        ],
        "NASA Center": "KSC",
        "External Link": "https://nasaacronyms.com/",
        "Contributors": [
            "maliska"
        ],
        "Labor_Hours": 78128,
        "Categories": [
            "acronym",
            "search",
            "nasa",
            "tool"
        ],
        "Categories_NLP": [],
        "Software": "NASA Acronyms"
    },
    {
        "Update_Date": "2018-10-23",
        "Description": "HyperSolve AD Mini-App uses an in-house developed AD tool that is based on operator-overloading to compute linearizations of a given function.",
        "Public Code Repo": "https://github.com/T-infinity/miniapps",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://software.nasa.gov/software/LAR-19476-1",
        "Contributors": [
            "kbthomp1"
        ],
        "Labor_Hours": 320,
        "Categories": [
            "function",
            "linearization",
            "overloading",
            "operator"
        ],
        "Categories_NLP": [
            "functions (mathematics)",
            "circuit",
            "distribution function",
            "tool",
            "reliability",
            "linearization",
            "operators (mathematics)"
        ],
        "Software": "HyperSolve AD Mini-App"
    },
    {
        "Update_Date": "2018-11-08",
        "Description": "Python module for applying the Multi-Level Monte Carlo (MLMC) method for uncertainty propagation.",
        "Public Code Repo": "https://github.com/nasa/mlmcpy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/mlmcpy",
        "Contributors": [
            "lukemorrill"
        ],
        "Labor_Hours": 784,
        "Categories": [
            "carlo",
            "uncertainty",
            "multi",
            "level",
            "python",
            "monte"
        ],
        "Categories_NLP": [],
        "Software": "Multi-Level Monte Carlo"
    },
    {
        "Update_Date": "2018-11-14",
        "Description": "Python module for uncertainty quantification using a parallel sequential Monte Carlo sampler",
        "Public Code Repo": "https://github.com/nasa/SMCPy",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/SMCPy",
        "Contributors": [
            "peleser"
        ],
        "Labor_Hours": 1120,
        "Categories": [
            "uncertainty quantification",
            "parameter estimation",
            "model calibration"
        ],
        "Categories_NLP": [],
        "Software": "Sequential Monte Carlo Sampling with Python"
    },
    {
        "Update_Date": "2018-11-14",
        "Description": "Bingo is an open source package for performing symbolic regression. Its emphasis lies on the efficient use of HPC resources. For the most part, things should work \"out of the box\", with a few dependencies that are standard in many python installs.",
        "Public Code Repo": "https://github.com/nasa/bingo",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/bingo",
        "Contributors": [
            "gbomarito"
        ],
        "Labor_Hours": 34480,
        "Categories": [
            "symbolic regression",
            "HPC"
        ],
        "Categories_NLP": [
            "earth resource",
            "radiation source",
            "heat source",
            "regression analysi",
            "electronic packaging",
            "light source",
            "point source"
        ],
        "Software": "Bingo"
    },
    {
        "Update_Date": "2019-02-15",
        "Description": "FPRoCk is a software library for checking satisfiability of a set of mixed real and floating-point constraints. If this set of constraints has at least one solution, it returns one of the solutions, otherwise it returns UNSAT indicating that the set is unsatisfiable.",
        "Public Code Repo": "https://github.com/nasa/fprock",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "LaRC",
        "External Link": "https://github.com/nasa/fprock",
        "Contributors": [
            "cesar.a.munoz@nasa.gov"
        ],
        "Labor_Hours": 500,
        "Categories": [
            "floating-point SAT solver",
            "mixed floating-point/real constraints",
            "real-number SAT solver",
            "satisfiability (SAT) checker"
        ],
        "Categories_NLP": [
            "software development tool",
            "simulation",
            "set theory",
            "systems analysi",
            "problem solving",
            "computation",
            "combinatorial analysi",
            "estimating",
            "ground based control",
            "constraint"
        ],
        "Software": "FPRoCK"
    },
    {
        "Update_Date": "2019-03-11",
        "Description": "NASAaccess is R package that can generate gridded ascii tables of climate (CIMP5) and weather data (GPM, TRMM, GLDAS) needed to drive various hydrological models (e.g., SWAT, VIC, RHESSys, ..etc). The package assumes that users have already set up a registration account(s) with Earthdata login as well as authorizing NASA GESDISC data access. Please refer to  https://disc.gsfc.nasa.gov/data-access for further details. The package relies on 'curl' (https://curl.haxx.se/) commands and library to access and download data from NASA remote sensing servers.  Since Mac users have curl as part of macOS, Windows users should make sure that their local machines have 'curl' installed properly.  Creating the .netrc file at the user machine 'Home' directory and storing the user NASA GESDISC logging information in it is needed to execute the package commands. Instructions on creating the .netrc and .urs_cookies files can be accessed at https://wiki.earthdata.nasa.gov/display/EL/How+To+Access+Data+With+cURL+And+Wget.",
        "Public Code Repo": "https://github.com/nasa/NASAaccess",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/NASAaccess",
        "Contributors": [
            "ibrahim.mohammed@nasa.gov"
        ],
        "Labor_Hours": 320,
        "Categories": [
            "temperature",
            "rhessys",
            "cimp5",
            "precipitation",
            "VIC",
            "swat",
            "gpm",
            "gldas",
            "R",
            "trmm",
            "climate",
            "NEX-GDDP",
            "rainfall runoff model",
            "remote sening"
        ],
        "Categories_NLP": [
            "tables (data)",
            "remote sensing",
            "data management",
            "climate model",
            "data system",
            "climate",
            "information system",
            "data processing",
            "climatology",
            "earth observations (from space)"
        ],
        "Software": "NASAaccess: Downloading and reformatting tool for NASA Earth Observation data products"
    },
    {
        "Update_Date": "2019-03-13",
        "Description": "Landslide Hazard Analysis for Situational Awareness",
        "Public Code Repo": "https://github.com/nasa/LHASA",
        "License": [
            "NASA Open Source"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/LHASA",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 16,
        "Categories": [
            "hazard",
            "analysis",
            "awareness",
            "gpm",
            "landslide",
            "imerg"
        ],
        "Categories_NLP": [],
        "Software": "LHASA"
    },
    {
        "Update_Date": "2019-03-04",
        "Description": "The Stored Command Absolute (SCA) application is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS.  The SCA application allows a system to be commanded 24 hours a day using sequences of absolute time tagged command sequences.",
        "Public Code Repo": "https://github.com/nasa/SCA",
        "License": [
            "NASA Open Source Agreement Version 1.3"
        ],
        "NASA Center": "GSFC",
        "External Link": "https://github.com/nasa/SCA",
        "Contributors": [
            "gsfc-softwarerequest@mail.nasa.gov"
        ],
        "Labor_Hours": 1872,
        "Categories": [
            "management",
            "vehicle"
        ],
        "Categories_NLP": [
            "sequencing",
            "time dependence",
            "real time operation"
        ],
        "Software": "Core Flight System (cFS) Stored Command Absolute (SCA) application"
    },
    {
        "Update_Date": "2019-03-19",
        "Description": "LAGER (Light-weight Accumulator Gathering Efficiently in Real-time) is a reliable software logging system designed to allow multiple logging sources to log to multiple end users.",
        "Public Code Repo": "https://github.com/nasa/lager",
        "License": [
            "NASA Open Source v1.3"
        ],
        "NASA Center": "JSC",
        "External Link": "https://github.com/nasa/lager",
        "Contributors": [
            "jsc-ttco-software-request@mail.nasa.gov"
        ],
        "Labor_Hours": 2880,
        "Categories": [
            "logging",
            "LTTng",
            "high performance"
        ],
        "Categories_NLP": [
            "information system",
            "software development tool",
            "user requirement",
            "time measurement",
            "time dependence",
            "systems analysi",
            "human-computer interface",
            "real time operation",
            "light source",
            "computer systems design"
        ],
        "Software": "LAGER (Light-weight Accumulator Gathering Efficiently in Real-time)"
    }
]