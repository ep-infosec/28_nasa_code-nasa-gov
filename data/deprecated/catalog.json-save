[
	{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "Worldview Options Eosdis",
"External Link": "https://github.com/nasa-gibs/worldview-options-eosdis",
"Public Code Repo": "https://github.com/nasa-gibs/worldview-options-eosdis/archive/master.zip",
"Description": "This repository contains the configuration used by Worldview on the Earthdata site. See the Worldview repository for more information. This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "Tiled WMS","global imagery browse services", "gibs", "branding", "onearth"],
"Update_Date": "2016-02-29"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "Worldview Design",
"External Link": "https://github.com/nasa-gibs/worldview-design",
"Public Code Repo": "https://github.com/nasa-gibs/worldview-design/archive/master.zip",
"Description": "This repository contains the wireframes and designs for NASA Worldview. This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis","Tiled WMS", "global imagery browse services", "gibs", "design", "onearth"],
"Update_Date": "2016-01-28"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "Worldview Options Template",
"External Link": "https://github.com/nasa-gibs/worldview-options-template",
"Public Code Repo": "https://github.com/nasa-gibs/worldview-options-template/archive/master.zip",
"Description": "This repository contains the generic branding with basic configuration for NASA Worldview.This code was originally developed at NASA/Goddard Space Flight Center for the Earth Science Data and Information System (ESDIS) project.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "Tiled WMS","global imagery browse services", "gibs", "branding", "onearth"],
"Update_Date": "2015-05-05"
},
{
"NASA Center": "Jet Propulsion Laboratory",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "Meta Raster Format (mrf)",
"External Link": "https://github.com/nasa-gibs/mrf",
"Public Code Repo": "https://github.com/nasa-gibs/mrf/archive/master.zip",
"Description": "The source code contains the Meta Raster Format (MRF) specification and plugin for GDAL, which is a part of the OnEarth software package. OnEarth consists of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The Meta Raster Format and OnEarth software were originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool, the Lunar Mapping and Modeling Project (LMMP), and GIBS.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "Tiled WMS","global imagery browse services", "gibs", "mrf", "onearth"],
"Update_Date": "2016-02-05"
},
{
"NASA Center": "Jet Propulsion Laboratory",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "Data Curtains",
"External Link": "https://github.com/nasa-gibs/data-curtains",
"Public Code Repo": "https://github.com/nasa-gibs/data-curtains/archive/master.zip",
"Description": "NASA's Data Curtains from Space is a Google Summer of Code 2015 Project for the Cesium Community developed by Abhishek Potnis under the guidance of Mike McGann and Ryan Boller at NASA. Data Curtains from Space uses Cesium to better visualize data from the CALIPSO satellite, which is used to study clouds and aerosols in the atmosphere.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "Tiled WMS","global imagery browse services", "gibs", "onearth", "data visualization"],
"Update_Date": "2015-08-31"
},
{
"NASA Center": "Jet Propulsion Laboratory",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "OnEarth",
"External Link": "https://github.com/nasa-gibs/onearth",
"Public Code Repo": "https://github.com/nasa-gibs/onearth/archive/master.zip",
"Description": "OnEarth is a software package consisting of image formatting and serving modules which facilitate the deployment of a web service capable of efficiently serving standards-based requests for georeferenced raster imagery at multiple spatial resolutions including, but not limited to, full spatial resolution. The software was originally developed at the Jet Propulsion Laboratory (JPL) to serve global daily composites of MODIS imagery. Since then, it has been deployed and repurposed in other installations, including at the Physical Oceanography Distributed Active Archive Center (PO.DAAC) in support of the State of the Oceans (SOTO) visualization tool, the Lunar Mapping and Modeling Project (LMMP), and Worldview.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "global imagery browse services", "gibs", "onearth", "Tiled WMS"],
"Update_Date": "2016-02-12"
},
{
"NASA Center": "Jet Propulsion Laboratory",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "OnEarth Boxes",
"External Link": "https://github.com/nasa-gibs/onearth-boxes",
"Public Code Repo": "https://github.com/nasa-gibs/onearth-boxes/archive/master.zip",
"Description": "OnEarth-Boxes is a system that creates VM images for use in running, testing, and experimenting with the OnEarth and MRF tools. It uses Packer to produce a variety of pre-built VMs in different formats. OnEarth-Boxes comes pre-configured with NASA Blue Marble and MODIS Aerosol imagery layers, in 4 separate projections. There are OpenLayers endpoints for testing with WMTS, as well as TWMS/KML and Mapserver endpoints.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "global imagery browse services", "gibs", "onearth", "Tiled WMS"],
"Update_Date": "2016-02-12"
},
{
"NASA Center": "Jet Propulsion Laboratory",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "GIBS Web Examples",
"External Link": "https://github.com/nasa-gibs/gibs-web-examples",
"Public Code Repo": "https://github.com/nasa-gibs/gibs-web-examples/archive/release.zip",
"Description": "This project shows how to use GIBS as a tile source for OpenLayers, Leaflet, Cesium, Bing, and Google Maps.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "global imagery browse services", "gibs", "onearth", "Tiled WMS"],
"Update_Date": "2015-05-20"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["support@earthdata.nasa.gov"],
"Software": "Open Layers 3",
"External Link": "https://github.com/nasa-gibs/ol3",
"Public Code Repo": "https://github.com/nasa-gibs/ol3/archive/worldview.zip",
"Description": "This repository contains changes to OpenLayers 3 used by Worldview.",
"License": [ "NASA Open Source" ],
"Categories": ["worldview", "earth data science", "eosdis", "global imagery browse services", "gibs", "onearth", "Tiled WMS"],
"Update_Date": "2015-04-03"
},
	{
"NASA Center": "Langley Research Center",
"Contributors": ["rwbutler4"],
"Software": "WinASSIST",
"External Link": "https://github.com/nasa/WinASSIST",
"Public Code Repo": "https://github.com/nasa/WinASSIST",
"Description": "The WinASSIST program uses a rule-oriented language to automatically generate input files for the SURE/WinSURE program. The user describes the failure behavior and recovery behavior of a fault-tolerant computer system in an abstract language. The WinASSIST program then automatically generates a corresponding semi-Markov model. The abstract language allows efficient description of large, complex systems. A one-page WinASSIST-language description may result in a semi-Markov model with thousands of states and transitions. The WinASSIST program also provides model-reduction techniques to facilitate efficient modeling of large systems.",
"License": [ "NASA Open Source" ],
"Categories": ["NASA", "Reliability Analysis", "Markov Model Generation", "Fault Tolerance"],
"Update_Date": "2016-01-22"
},
	{
"NASA Center": "Langley Research Center",
"Contributors": ["rwbutler4"],
"Software": "WinSURE",
"External Link": "https://github.com/nasa/WinSURE",
"Public Code Repo": "https://github.com/nasa/WinSURE",
"Description": "WinSURE is a reliability analysis program used for calculating upper and lower bounds on for the operational and death state probabilities for a large class of semi-Markov models. The program is especially suited for the analysis of fault-tolerant reconfigurable systems. The calculated bounds are close enough (usually within 5 percent of each other) for use in reliability studies of ultra-reliable computer systems. The SURE bounding theorems have algebraic solutions and are consequently computationally efficient even for large and complex systems. SURE can optionally regard a specified parameter as a variable over a range of values, enabling an automatic sensitivity analysis.",
"License": [ "NASA Open Source" ],
"Categories": ["NASA", "Reliability Analysis", "Markov Model Generation", "Fault Tolerance"],
"Update_Date": "2016-01-22"
},
	{
"NASA Center": "Ames Research Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "JPF-NAS",
"External Link": "https://software.nasa.gov/software/ARC-17301-1",
"Public Code Repo": "http://babelfish.arc.nasa.gov/hg/jpf/jpf-nas/file/46d377d1a6f2/.project",
"Description": "JPF-NAS is developed to provide support for model checking distributed applications. It relies on the multiprocess support included in Java Pathfinder (JPF) which provides basic functionality to verify the bytecode of distributed applications. JPF-NAS is implemented as a JPF extension which models interprocess communication mechanisms. It uses a form of partial order reduction to explore all possible executions of a distributed Java application. Moreover, JPF-NAS provides a functionality to check the given distributed application under test against possible network failures which can occur at the operating system or the hardware layer.",
"License": [ "NASA Open Source" ],
"Categories": ["system testing", "design and integration tools"],
"Update_Date": "2015-06-30"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Autonomous eXplorer Control System (AXCS)",
"External Link": "https://software.nasa.gov/software/ARC-16721-1",
"Public Code Repo": "https://github.com/cboshuizen/AXCS/archive/master.zip",
"Description": "AXCS enables smartphones and other mobile devices to be utilized as a ground-based test bed for operations in extreme environments. For NASA, the technology is currently being used to evaluate hardware for balloon launches. The software's tool kits provide environmental and situational measurements, command and data handing (CD&H) functions, events timing, data logging, and communications with external devices.",
"License": [ "NASA Open Source" ],
"Categories": ["operations", "mobile devices"],
"Update_Date": "2011-09-13"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "General Mission Analysis Tool (GMAT), Revision 2012a",
"External Link": "https://software.nasa.gov/software/GSC-16565-1",
"Public Code Repo": "http://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2012a/gmat-datafiles-R2012a-Beta.zip/download",
"Description": "GMAT is a software system for mission analysis and trajectory optimization, estimation, and prediction. The technology can be used to design spacecraft trajectories, optimize maneuvers, perform orbit determination, visualize and communicate mission parameters, and understand a mission's trade space.",
"License": [ "NASA Open Source" ],
"Categories": ["Design and Integration Tools"],
"Update_Date": "2012-05-22"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "General Mission Analysis Tool (GMAT), Revision 2011A",
"External Link": "https://software.nasa.gov/software/GSC-16228-1",
"Public Code Repo": "http://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2011a/gmat-datafilesOnly-R2011a-Beta.zip/download",
"Description": "GMAT is a software system for mission analysis and trajectory optimization, estimation, and prediction. The technology can be used to design spacecraft trajectories, optimize maneuvers, perform orbit determination, visualize and communicate mission parameters, and understand a mission's trade space.",
"License": [ "NASA Open Source" ],
"Categories": ["Design and Integration Tools"],
"Update_Date": "2011-04-29"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Savors: A Scalable Aural-Visual Environment for Security Event Monitoring, Analysis, And Response",
"External Link": "https://software.nasa.gov/software/GSC-16228-1",
"Public Code Repo": "http://sourceforge.net/projects/savors/files/latest/download?source=files",
"Description": "Savors is a tool for security event monitoring, analysis, and response. The technology scales to real-world environments and uses high-end computing resources on-demand to compile behavior profiles that point to anomalous behavior. Auralization allows both monitoring and analysis to be performed in parallel and draws attention to critical events in one tool when utilizing another. Remote data access and response capabilities across distributed resources are enabled using grid computing that provides a secure, single sign-on environment.",
"License": [ "NASA Open Source" ],
"Categories": ["Design and Integration Tools"],
"Update_Date": "2015-01-08"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) CFDP Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16125-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-cfdp/files/latest/download",
"Description": "The CCSDS File Delivery Protocol (CFDP) application (CF) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFDP application provides the capability to transmit and receive files to/from the ground. Tables are used to allow flexibility in specifying directory priorities and configurations.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-12"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Checksum Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-15996-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-cs/files/latest/download",
"Description": "The Checksum application (CS) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. Checksum (CS) is one of the reusable applications that make up the Core Flight System (CFS). The technology performs memory integrity management by verifying the contents of critical flight memory regions. Unexpected changes in memory (i.e., due to an SEU) are reported to ground operators.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-13"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Data Storage (DS) Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16126-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-ds/files/latest/download",
"Description": "The Data Storage application (DS) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The DS application provides the ability to store data (i.e., messages) into files. Tables are used to provide the flexibility for specifying messages.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-08-04"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) File Manager (FM) Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16007-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-fm/files/latest/download",
"Description": "FM provides the user commands to perform the following operations: copy file, move file, rename file, delete file(s), close file, concatenate file, decompress file, delete directory contents, create directory, remove directory, obtain file information, obtain open file listing, and obtain directory listings.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-20"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Health and Safety Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16151-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-hs/files/latest/download",
"Description": "The plug-and-play CFS Health and Safety application is compatible with the Core Flight Executive (cFE) and uses the Operating System Abstraction Layer (OSAL), both of which were developed by Goddard Space Flight Center in order to provide a reusable, platform-independent, mission-independent, layered architecture for hosting applications. The technology can be used for any government or commercial spacecraft.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Housekeeping (HK) Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16127-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-hk/files/latest/download",
"Description": "The Housekeeping application (HK) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFS Housekeeping application provides the ability to organize data from various packets into new packets in order to best utilize the telemetry bandwidth available for a mission.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Limit Checker (LC) Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16010-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-lc/files/latest/download",
"Description": "The Limit Checker application (LC) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The Limit Checker (LC) application is responsible for monitoring telemetry values.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Memory Dwell Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16012-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-md/files/latest/download",
"Description": "The Memory Dwell application telemeters the contents of table-defined addresses at a table-defined dwell rate. Addresses can be processed using symbols if the target processor/operating system includes symbols.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Scheduler Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16123-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-sch/files/latest/download",
"Description": "The Scheduler application (SCH) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The Scheduler application uses a one-second major timeframe, which is divided into a designer-determined collection of equally divided minor timeframes. The technology is configurable and table-driven to provide greater flexibility.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-05-31"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Software Bus Network (SBN) Application, Version 1.0",
"External Link": "https://software.nasa.gov/software/GSC-16917-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-sbn/files/latest/download",
"Description": "The Software Bus Network application (SBN) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The SBN serves as a plug-in to the cFE framework to transfer messages across process/processor interfaces. The technology has three primary functions: to establish and maintain a connection to each peer over available process/processor interfaces; to distribute and maintain a subscription message database for each peer; and to distribute messages to peers that have subscribed to message identifiers.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Core Flight System (CFS) Stored Command (SC) Application Version 2",
"External Link": "https://software.nasa.gov/software/GSC-16009-1",
"Public Code Repo": "http://sourceforge.net/projects/cfs-sc/files/latest/download",
"Description": "The Stored Command application (SC) is a core Flight System (cFS) application that is a plug in to the Core Flight Executive (cFE) component of the cFS. The CFS SC application provides the ability to execute onboard absolute-time and relative-time command sequences. The technology offers a generic implementation that can be configured by a user to fit the needs of a specific mission.",
"License": [ "NASA Open Source" ],
"Categories": ["vehicle management (space/air/ground)"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "CAPTools-based Automatic Parallelizer Using OpenMP (CAPO)",
"External Link": "https://software.nasa.gov/software/ARC-14487-1",
"Public Code Repo": "http://people.nas.nasa.gov/~hjin/CAPO/dist/capo-examples-1.1.tar.gz",
"Description": "CAPO analyzes a Fortran program and inserts OpenMP directives into the code to improve its performance on a parallel machine. The tool relies on accurate inter-procedural data-dependence information currently provided by CAPTools, which was developed at the University of Greenwich.",
"License": [ "NASA Open Source" ],
"Categories": ["Data Servers Processing and Handling"],
"Update_Date": "2015-03-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Coordinated Data Analysis Workshop Web (CDAWeb)",
"External Link": "https://software.nasa.gov/software/GSC-14292-1",
"Public Code Repo": "http://cdaweb.gsfc.nasa.gov/cgi-bin/eval1.cgi",
"Description": "The CDAWeb software and the CDAWeb service built on this software have been developed and continue to be enhanced and maintained by the Space Physics Data Facility. The technology has supported NASA/Office of Space Science programs dealing with the connections between the Sun and the Earth. CDAWeb software is essentially a set of Interactive Data Language (IDL) scripts that act as the engine of the system.",
"License": [ "NASA Open Source" ],
"Categories": ["Data Servers Processing and Handling"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Dyper: Dynamic Perimeter Enforcement",
"External Link": "https://software.nasa.gov/software/ARC-16444-1",
"Public Code Repo": "http://sourceforge.net/projects/dyper/files",
"Description": "Dyper protects a site from unauthorized network flows. The tool offers dynamic perimeter enforcement by providing a general-purpose mechanism for maintaining least-privilege network security policies while still supporting the full utilization of multiport protocols. Dyper requires no changes to software or practices outside of the perimeter and only minimal changes inside.",
"License": [ "NASA Open Source" ],
"Categories": ["Data Servers Processing and Handling", "Security", "Firewalls", "Routing"],
"Update_Date": "2014-05-25"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["gsfc-softwarerelease@mail.nasa.gov"],
"Software": "Hierarchical Data Format Earth Observing System (HDF-EOS)Data Extractor (HEEX)",
"External Link": "https://software.nasa.gov/software/GSC-15009-1",
"Public Code Repo": "https://software.nasa.gov/software/GSC-15009-1",
"Description": "The Hierarchical Data Format Earth Observing System (HDF-EOS) Data Extractor (HEEX) is a tool that enables users to extract HDF-EOS data to binary or ASCII data formats in HTML or XML index. The software can be used for both HDF-EOS2 and HDF-EOS5, and it automatically recognizes the two formats.",
"License": [ "NASA Open Source" ],
"Categories": ["Data Servers Processing and Handling"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Netmark eXtensible DataBase, Data Access and Retrieval Composition (XDB3-DARC)",
"External Link": "https://software.nasa.gov/software/ARC-16119-1B",
"Public Code Repo": "http://sourceforge.net/projects/darcxdb3/files/latest/download",
"Description": "This innovation will query using a suite of operators in the Netmark/XDB query language to retrieve elements based on the absolute value of tags in the XML source. In an earlier version of the software, element retrieval was based solely on 'full-text' term searches of the tags and their values.",
"License": [ "NASA Open Source" ],
"Categories": ["Data Servers Processing and Handling", "Data Warehousing", "Front-Ends", "XML"],
"Update_Date": "2013-04-26"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Network-Form Game Software Library (libnfg)",
"External Link": "https://software.nasa.gov/software/ARC-16764-1",
"Public Code Repo": "https://sites.google.com/site/ritchielee/files",
"Description": "The libnfg software library describes how humans interact with their environment and with other humans. The tool provides a Monte Carlo analysis of user-specified 'network-form games', which are flexible modeling methodologies that combine Bayes nets and game theory to model complex systems.",
"License": [ "NASA Open Source" ],
"Categories": ["Crew and Life Support"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "AutoBayes: Automatic Design of Customized Analysis Algorithms and Programs",
"External Link": "https://software.nasa.gov/software/ARC-16276-1",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/AUTOBAYES_07202011.tgz",
"Description": "AutoBayes uses extended Bayesian networks, a powerful symbolic system, and algorithm schemas to automatically generate efficient and customized programs for data analysis. It generates a standardized design document containing a graphical representation of the Bayesian network and of the details regarding the code's generation.",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2011-07-20"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Constellation PRACA Extension of the Bugzilla Application",
"External Link": "https://software.nasa.gov/software/ARC-16033-1",
"Public Code Repo": "https://ftp.mozilla.org/pub/mozilla.org/webtools/bugzilla-5.0.2.tar.gz",
"Description": "The Constellation PRACA I-1 system is a modified version of an open-source, Web-based defect tracking tool called Bugzilla. Bugzilla allows software developers to document and track outstanding bugs in their products; in the Constellation PRACA I-1 system, these core capabilities have been extended to provide the necessary functionality and usability defined in the PRACA processing requirements.",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2015-07-07"
},
{
"NASA Center": "Langley Research Center",
"Contributors": ["larc-sra@mail.nasa.gov"],
"Software": "FilePlottingTools",
"External Link": "https://software.nasa.gov/software/LAR-18314-1",
"Public Code Repo": "http://fileplottingtools.larc.nasa.gov/files/2015/07/FilePlottingToolsInstaller_v2.0.zip",
"Description": "This Excel plugin written in VB.net allows rapid post-processing of thermal analysis data from text files or from SINDA-formatted SAV files. The software can be adapted to other data formats as well.",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2015-07-15"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Highly Scalable Matching Pursuit Signal Decomposition Algorithm (MPD)",
"External Link": "https://software.nasa.gov/software/ARC-16345-1",
"Public Code Repo": "https://c3.nasa.gov/dashlink/static/media/algorithm/MPD.zip",
"Description": "MPD is a powerful and effective iterative algorithm for signal decomposition and feature extraction. The technology decomposes any signal into linear combinations of its dictionary elements, or 'atoms.'",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2010-09-10"
},
{
"NASA Center": "Langley Research Center",
"Contributors": ["larc-sra@mail.nasa.gov"],
"Software": "Hypatheon-Searchable Database Capability for Formalized Mathematics",
"External Link": "https://software.nasa.gov/software/LAR-18232-1",
"Public Code Repo": "http://shemesh.larc.nasa.gov/people/bld/ftp/Hypatheon-1.1.tgz",
"Description": "The Hypatheon suite of software tools provide a searchable database capability for the specialized domain of formalized mathematics. The technology is designed to be a companion to a specific tool called PVS, which supports an emerging type of advanced software verification intended for safety-critical systems. Hypatheon aims to enhance PVS users' productivity by first indexing the mathematical theories rendered in the PVS specification language, then making their contents searchable by an interactive software tool.",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2013-03-28"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Multivariate Time Series Search Capability to Identify Complex Patterns in Large Datasets",
"External Link": "https://software.nasa.gov/software/ARC-16452-1",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/MTS_Search.zip",
"Description": "This software allows the user to specify a time series over multiple variables to search within massive datasets. The tool will return a listing of events (a time series) from the database that spans multiple variables and is within a threshold distance from the query. Experiments on numerous real aviation datasets have demonstrated the algorithm's capability to uncover potential aircraft safety events (as validated by multiple aviation safety experts and airlines).",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Langley Research Center",
"Contributors": ["larc-sra@mail.nasa.gov"],
"Software": "Tolerance Domain Specific Language",
"External Link": "https://software.nasa.gov/software/LAR-17546-1",
"Public Code Repo": "https://github.com/kleb/nasarb/blob/master/uq4sim/trunk/README.txt",
"Description": "This sensitivity task employs the Monte Carlo method. Thousands of simulations are run with randomly varied input parameters, and then statistical correlations are computed to determine the sensitivity of output parameters to each input parameter.",
"License": [ "NASA Open Source" ],
"Categories": ["Data and Image Processing"],
"Update_Date": "2008-06-16"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Physics-Model-Based Wiring Fault Detection Toolbox for MATLAB",
"External Link": "https://software.nasa.gov/software/ARC-17046-1",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/pbwfd_toolbox_r2.zip",
"Description": "Providing a toolbox of functionality for MATLAB, this NASA-developed software detects precursor wiring faults (e.g., chafing) in shielded impedance-controlled cabling using measurements from off-the-shelf, time-domain reflectometry or vector-network analyzer hardware. The technology combines high-fidelity analytical physics models for signal propagation with fast Bayesian inference algorithms for intrinsic cable and fault-parameter retrieval.",
"License": [ "NASA Open Source" ],
"Categories": ["Electronics and Electrical Power"],
"Update_Date": "2012-03-31"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Desktop Exploration of Remote Terrain (DERT)",
"External Link": "https://software.nasa.gov/software/ARC-17647-1",
"Public Code Repo": "https://github.com/nasa/DERT/archive/master.zip",
"Description": "Desktop Exploration of Remote Terrain (DERT) is a software tool for exploring large Digital Terrain Models (DTMs) in 3D. It aids in understanding topography and spatial relationships of terrain features, as well as performing simple analysis tasks relevant to the planetary science community.",
"License": [ "NASA Open Source" ],
"Categories": ["Environmental Science", "Earth", "Air", "Space", "Exoplanet"],
"Update_Date": "2016-01-09"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "GeoCam, Version 2",
"External Link": "https://software.nasa.gov/software/ARC-16088-1A",
"Public Code Repo": "https://github.com/geocam/geocamShare/archive/master.zip",
"Description": "GeoCam is a geospatial system for disaster response that consists of (1) low-cost consumer hardware (i.e., a digital camera or cell phone, position/orientation sensors, and an optional embedded controller) and (2) a Web-based workflow that enables images and other geo-referenced data to be shared and viewed in a variety of ways. GeoCam includes software that computes image location and provides for geo-rectification, KML-formatted geospatial data generation, image management, and geo-referenced data sharing.",
"License": [ "NASA Open Source" ],
"Categories": ["Environmental Science", "Earth", "Air", "Space", "Exoplanet"],
"Update_Date": "2012-04-05"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Google Earth Offline Cache Pre-Loader (GEOCP), Version 1",
"External Link": "https://software.nasa.gov/software/ARC-16089-1",
"Public Code Repo": "http://ti.arc.nasa.gov/m/groups/intelligent-robotics/geocp.zip",
"Description": "GEOCP enables disaster responders to utilize Google Earth quickly in the field, where Internet connectivity may be sporadic or even unavailable.",
"License": [ "NASA Open Source" ],
"Categories": ["Environmental Science", "Earth", "Air", "Space", "Exoplanet"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Kepler Community Data Analysis Tools (PyKE)",
"External Link": "https://software.nasa.gov/software/ARC-16805-1",
"Public Code Repo": "https://github.com/KeplerGO/PyKE/archive/master.zip",
"Description": "The Kepler archive contains time-series data calibrated and reduced from detector pixels. The pipelined reduction includes the removal of time-series trends systematic to a spacecraft and its environment. PyKE is a tool to create light curves with user-chosen pixel apertures and cotrend and/or detrend data.",
"License": [ "NASA Open Source" ],
"Categories": ["Environmental Science", "Earth", "Air", "Space", "Exoplanet"],
"Update_Date": "2015-12-16"
},
{
"NASA Center": "Langley Research Center",
"Contributors": ["larc-sra@mail.nasa.gov"],
"Software": "ACCoRDs Conflict-Detection (CD3D)/Conflict-Resolution (CR3D) Algorithms",
"External Link": "https://software.nasa.gov/software/LAR-17878-1",
"Public Code Repo": "http://shemesh.larc.nasa.gov/fm/fm-atm-codes.html",
"Description": "Written in Java and C and based on the Airborne Coordinated Conflict Detection and Resolution mathematical framework, CD3D and CR3D are prototype implementations of state-based conflict-detection and conflict-resolution algorithms for a 3D airspace.",
"License": [ "NASA Open Source" ],
"Categories": ["Autonomous Systems"],
"Update_Date": "2003-09-26"
},
{
"NASA Center": "Langley Research Center",
"Contributors": ["larc-sra@mail.nasa.gov"],
"Software": "Conflict Prevention Bands",
"External Link": "https://software.nasa.gov/software/LAR-17874-1",
"Public Code Repo": "https://software.nasa.gov/software/lar-17874-1#request",
"Description": "Conflict prevention information has been assembled into prevention bands that advise a crew on maneuvers that should not be taken, helping to ensure that an aircraft's path is free of conflicts with other aircraft.",
"License": [ "NASA Open Source" ],
"Categories": ["Autonomous Systems"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Extendable Uniform Remote Operations Planning Architecture (EUROPA) 2.1",
"External Link": "https://software.nasa.gov/software/ARC-15936-1",
"Public Code Repo": "https://code.google.com/p/europa-pso/wiki/EuropaDownload",
"Description": "EUROPA is a general-purpose, reusable, artificial intelligence software system. The tool generates plans for performing complex activities in parallel. Functionality includes the capability of verifying that a plan satisfies all constraints.",
"License": [ "NASA Open Source" ],
"Categories": ["Autonomous Systems"],
"Update_Date": "2011-03-30"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "NASA Tensegrity Robotics Toolkit (NTRT) v1",
"External Link": "https://software.nasa.gov/software/ARC-17093-1",
"Public Code Repo": "https://github.com/NASA-Tensegrity-Robotics-Toolkit/NTRTsim/releases/tag/V1.1",
"Description": "The NASA Tensegrity Robotics Toolkit (NTRT) is a collection of C and MATLAB software modules for the modeling, simulation, and control of Tensegrity Robots. Tensegrity Robots are a biologically inspired approach to building robots based on the tension networks of tensegrity structures, which have no rigid connections between elements. The NTRT was created to enable: the rapid co-exploration of structures and controls in a physics based simulation environment; the development of tensegrity robotics algorithms such as structural analysis, kinematics, and motion planning; and the validation of the algorithms and controls on hardware prototypes of the tensegrity robots.",
"License": [ "NASA Open Source" ],
"Categories": ["Autonomous Systems"],
"Update_Date": "2015-01-09"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Robot Application Programming Interface Delegate (RAPID), Version 2",
"External Link": "https://software.nasa.gov/software/ARC-16368-1A",
"Public Code Repo": "http://rapid.nasa.gov/index.html",
"Description": "RAPID is a software reference implementation framework for remote operations. The technology promotes interoperability between robot software modules and includes a standard programming interface and data distribution middleware. RAPID facilitates integration of experimental robot software modules created by a distributed development team; improves the compatibility and reusability of robotic functions; and offers speed prototype robot development in a wide range of configurations and environments.",
"License": [ "NASA Open Source" ],
"Categories": ["Autonomous Systems"],
"Update_Date": "2013-05-02"
},
{
"NASA Center": "Langley Research Center",
"Contributors": ["larc-sra@mail.nasa.gov"],
"Software": "Strategic Conflict Resolution (Stratway)",
"External Link": "https://software.nasa.gov/software/lar-17876-1",
"Public Code Repo": "https://software.nasa.gov/software/lar-17876-1#request",
"Description": "Stratway modifies a four-dimensional (latitude, longitude, altitude, and time) flight plan to ensure a conflict-free trajectory. This type of resolution is strategic in that it resolves conflicts over long time horizons, perhaps over several hours.",
"License": [ "NASA Open Source" ],
"Categories": ["Autonomous Systems"],
"Update_Date": "2016-01-11"
},
{
"NASA Center": "Ames Research Center Center",
"Contributors": ["arc-sra-team@mail.nasa.gov"],
"Software": "Parallel Dantzig-Wolfe Decomposition",
"External Link": "https://software.nasa.gov/software/ARC-16432-1",
"Public Code Repo": "http://sourceforge.net/projects/dwsolver/files/latest/download",
"Description": "This implementation of the Dantzig-Wolfe decomposition is built upon the GNU Linear Programming Kit. The technology provides a command-line tool for solving properly decomposed linear programs.",
"License": [ "NASA Open Source" ],
"Categories": ["Aeronautics"],
"Update_Date": "2015-02-28"
},
{
"NASA Center": "Langley Research Center",
"Contributors": [ ],
"Software": "NASTRAN 95",
"External Link": "https://github.com/nasa/NASTRAN-95",
"Public Code Repo": "https://github.com/nasa/NASTRAN-95",
"Description": "NASTRAN is the NASA Structural Analysis System, a finite element analysis program (FEA) completed in the early 1970's. It was the first of its kind and opened the door to computer-aided engineering. Subsections of a design can be modeled and then larger groupings of these elements can again be modeled. NASTRAN can handle elastic stability analysis, complex eigenvalues for vibration and dynamic stability analysis, dynamic response for transient and steady state loads, and random excitation, and static response to concentrated and distributed loads, thermal expansion, and enforced deformations.",
"License": [
"NOSA v3"
],
"Categories": [
"FEA",
"Structural Analysis",
"CAD",
"NASTRAN"
],
"Update_Date": "2015-12-03"
},
	{
	"NASA Center": "Langley Research Center",
	"Contributors": [
		"davidecox"
	],
	"Software": "GTM_DesignSim: Flight Dynamics Simulation of a Generic Transport Model",
	"External Link": "https://github.com/nasa/GTM_DesignSim/wiki",
	"Public Code Repo": "https://github.com/nasa/GTM_DesignSim",
	"Description": "The GTM_DesignSim is a Matlab/Simulink simulation intended for design and analysis of flight control laws. It models the dynamics of a 5.5% scale model of a generic transport aircraft. The simulation was developed to allow fault accommodating control algorithms to be developed and refined in simulation before being tested on an experimental subscale model.",
	"License": [
		"NASA Open Source"
	],
	"Categories": [
		"Framework",
		"Toolkit",
		"Web",
		"Simulation",
		"Flight Control"
	],
	"Update_Date": "2015-12-02"
},
	{
    "NASA Center": "Jet Propulsion Laboratory",
    "Contributors": [
      "Bob Deen"
    ],
    "Software": "VICAR",
    "External Link": "http://www-mipl.jpl.nasa.gov/vicar_open.html",
    "Public Code Repo": "https://github.com/nasa/VICAR",
    "Description": "VICAR, which stands for Video Image Communication And Retrieval, is a general purpose image processing software system that has been developed since 1966 to digitally process multi-dimensional imaging data.",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "VICAR",
      "Image Processing",
      "Toolkit",
      "Visualization",
      "Analysis",
      "Graphics"
    ],
    "Update_Date": "2015-10-12"
},

	{
    "NASA Center": "Glenn Research Center",
    "Contributors": [
      "jishac"
    ],
    "Software": "Advanced IPv6 Socket Manipulation for Python",
    "External Link": "https://github.com/nasa/ipv6_python/wiki",
    "Public Code Repo": "https://github.com/nasa/ipv6_python",
    "Description": "An extension module intended to allow more advanced manipulation of IPv6 sockets in Python (ie: flow labels)",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Python",
      "Network",
      "Networking",
      "Sockets",
      "IP",
      "IPv6",
      "Flow Labels"
    ],
    "Update_Date": "2015-09-08"
}, 
  {
    "NASA Center": "Goddard Space Flight Center (GSFC)",
      "Contributors": [
        "Patrick Quinn",
        "Bo Sun",
        "Matthew Crouch",
        "Jeff Siarto"
      ],
      "Software": "Earthdata Search",
      "External Link": "https://search.earthdata.nasa.gov",
      "Public Code Repo": "https://github.com/nasa/earthdata-search",
      "Description": "Earthdata Search is a web application developed by NASA EOSDIS to enable data discovery, search, comparison, visualization, and access across EOSDIS' Earth Science data holdings.",
      "License": [
        "Apache 2.0"
      ],
      "Categories": [
        "Earth Science",
        "EOSDIS",
        "GIBS",
        "OPeNDAP",
        "Remote Sensing",
        "Common Metadata Repository (CMR)",
        "Data Discovery",
        "Data Filtering",
        "Data Visualization"
      ],
      "Update_Date": "2015-09-03"
  },
	{
	"NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Python Polarimetric Radar Beam Blockage Calculation (PyBlock)",
    "External Link": "https://github.com/nasa/PyBlock/wiki",
    "Public Code Repo": "https://github.com/nasa/PyBlock",
    "Description": "This Python package will calculate beam blockage in polarimetric weather radar data using the specific differential phase (KDP) and fully self-consistent (FSC) methods of Timothy J. Lang et al. (2009; J. Atmos. Oceanic Technol.).",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Earth Science",
      "Toolkit",
      "Meteorology",
      "Radar",
      "Precipitation",
      "GPM"
    ],
    "Update_Date": "2015-07-07"
}, 
{
	"NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Python Polarimetric Radar Beam Blockage Calculation (PyBlock)",
    "External Link": "https://github.com/nasa/PyBlock/wiki",
    "Public Code Repo": "https://github.com/nasa/PyBlock",
    "Description": "This Python package will calculate beam blockage in polarimetric weather radar data using the specific differential phase (KDP) and fully self-consistent (FSC) methods of Timothy J. Lang et al. (2009; J. Atmos. Oceanic Technol.).",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Earth Science",
      "Toolkit",
      "Meteorology",
      "Radar",
      "Precipitation",
      "GPM"
    ],
    "Update_Date": "2015-07-07"
},

	{
	"NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Python Interface to Dual-Pol Radar Algorithms (DualPol)",
    "External Link": "https://github.com/nasa/DualPol/wiki",
    "Public Code Repo": "https://github.com/nasa/DualPol",
    "Description": "Python module that facilitates precipitation retrievals (e.g., hydrometeor type, precipitation rate, precipitation mass, particle size distribution information) from polarimetric weather radar data.",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Earth Science",
      "Toolkit",
      "Meteorology",
      "Precipitation",
      "Radar",
      "GPM"
    ],
    "Update_Date": "2015-07-07"
},

	{
	"NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Single Doppler Retrieval Toolkit (SingleDop)",
    "External Link": "https://github.com/nasa/SingleDop/wiki",
    "Public Code Repo": "https://github.com/nasa/SingleDop",
    "Description": "SingleDop is a software module, written in the Python programming language, that will retrieve two-dimensional low-level winds from either real or simulated Doppler weather radar data.",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Earth Science",
      "Toolkit",
      "Meteorology",
      "Radar",
      "Doppler",
      "Winds"
    ],
    "Update_Date": "2015-07-07"
},

{
    "NASA Center": "Langley Research Center",
    "Contributors": [
    ],
    "Software": "NASTRAN 93",
    "External Link": "https://github.com/nasa/NASTRAN-93",
    "Public Code Repo": "https://github.com/nasa/NASTRAN-93",
    "Description": "NASTRAN is the NASA Structural Analysis System, a finite element analysis program (FEA) completed in the early 1970's. It was the first of its kind and opened the door to computer-aided engineering. Subsections of a design can be modeled and then larger groupings of these elements can again be modeled. NASTRAN can handle elastic stability analysis, complex eigenvalues for vibration and dynamic stability analysis, dynamic response for transient and steady state loads, and random excitation, and static response to concentrated and distributed loads, thermal expansion, and enforced deformations.",
    "License": [
        "NOSA v3"
    ],
    "Categories": [
        "FEA",
        "Structural Analysis",
        "CAD", "NASTRAN"
    ],
    "Update_Date": "2015-12-02"
},
{
    "NASA Center": "Ames Research Center",
    "Contributors": [
        "VWoeltjen",
        "larkin",
        "charlesh88",
        "brianwyu"
    ],
    "Software": "Open MCT Web",
    "External Link": "https://github.com/nasa/openmctweb",
    "Public Code Repo": "https://github.com/nasa/openmctweb",
    "Description": "A platform for web-based user interfaces for mission operations.",
    "License": [
        "Apache 2.0"
    ],
    "Categories": [
        "Framework",
        "Platform",
        "Web"
    ],
    "Update_Date": "2015-06-15"
},
{
	
	"NASA Center": "Glenn Research Center",
	"Contributors": [ 
		"ehariton" 
	], 
	"Software": "EADINLite", 
    "External Link": "https://github.com/nasa/EADINLite/wiki",
 	"Public Code Repo": "https://github.com/nasa/EADINLite",
    "Description": "This code was created to support the Distributed Engine Control task as part of the Fixed Wing Aeronautics project. The purpose of this research was to enable multiple microcontrollers to speak with eacho ther per the protocol specified in the preliminary release of EADIN BUS. EADIN BUS is a candidate for distributed control systems on aircraft engines. The primary use of this code was to assist in the modelling of small local networks which contain 16 or fewer nodes. This communication protocol differs from typical internet protocols by using a master node which distributes information between nodes through a call and response system. The RS-485 network is simplex and thus does not allow multiple nodes to talk at the same time. No time synchronization between  nodes is required for this network. These factors enable the master to request information from sensors and command actuators, one at a time. In the current implementation, no information is passed from individual nodes without first going through the master node. While other communication protocols do exist like ModbusMaster and simple-modbus, the speed of these communication protocols on the RS-485 network was not sufficient for our needs which required message send to reply receipt times of 1 millisecond. Additionally, the other protocols did not implement the same message system as specified by the preliminary documents regarding the EADIN protocol.",
     "License": [ 
       "ALv2" 
     ], 
     "Categories": [ 
       "Communication", 
       "Protocol", 
       "Microcontroller" 
  ], 
    "Update_Date": "2015-04-13" 
},
   {
    "NASA Center": "Jet Propulsion Laboratory",
    "Contributors": [
      "Mr. Michael Joyce",
      "Dr. Chris A. Mattmann",
      "Mr. Paul Ramirez",
      "Dr. Lewis John McGibbney",
      "Dr. Kim Whitehall",
      "Ms. Shakeh Khudikyan",
      "Mr. Maziyar Boustani"
    ],
    "Software": "Apache Open Climate Workbench",
    "External Link": "https://climate.apache.org/",
    "Public Code Repo": "https://github.com/apache/climate",
    "Description": "Apache Open Climate Workbench provides a Climate Science library and a suite of tools built on top of it to facilitate multi-model and multi-observation comparisons and visualizations for Climate Scientists.",
    "License": [
      "ALv2"
    ],
    "Categories": [
      "Climate Science",
      "Climate",
      "Toolkit",
      "Web",
      "Visualization",
      "Analysis"
    ],
    "Update_Date": "2015-03-16"
  },
  {
    "NASA Center": "Marshall Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "dheater"
    ],
    "Software": "libSPRITE",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/libSPRITE/wiki",
    "Public Code Repo": "https://github.com/nasa/libSPRITE",
    "Instructional Material": "",
    "Stats": "",
    "Description": "libSPRITE is a set of libraries that have been used on several past projects including flight, technology demonstration, and simulation projects.\n\nlibSPRITE provides a diverse set of functions to attempt to simplify coding and reduce code errors. For example, libSPRITE defines engineering units as types (i.e., Meters or Radians instead of double or int). It includes an engineering unit aware math library.\n\nlibSPRITE includes a task scheduling system that abstracts pthreads and includes a publish subscribe data system for data routing.\n\nIn addition, libSPRITE includes an optional binding to the Lua scripting language for configuring the program, setting parameters, running Lua scripts within C++ tasks and even interacting with the application during runtime.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "framework",
      "library",
      "middleware"
    ],
    "New Date": "",
    "Update_Date": "2014-11-13"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "abencomo",
      "robert-nado"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "OpenSPIFe",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/OpenSPIFe/wiki",
    "Public Code Repo": "https://github.com/nasa/OpenSPIFe",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Scheduling and Planning Interface for Exploration (SPIFe) is an integrated planning and scheduling toolkit based on hundreds of hours of expert observation, use, and refinement of state-of-the-art planning and scheduling technology for several applications within NASA.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2",
      "EPL",
      "MPLv2",
      "LGPL"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Planning",
      "tool",
      "scheduling"
    ],
    "New Date": "",
    "Update_Date": "2014-08-20"
  },
  {
  "NASA Center": "Ames Research Center",
      "Contributors": [
        "teubert"
      ],
      "Software": "X-Plane Communications Toolbox (XPC)",
      "External Link": "https://github.com/nasa/XPlaneConnect/wiki",
      "Public Code Repo": "https://github.com/nasa/XPlaneConnect",
      "Description": "The X-Plane Communications Toolbox (XPC) is an open source research tool used to interact with the commercial flight simulator software X-Plane. XPC allows users to control aircraft and receive state information from aircraft simulated in X-Plane using functions written in C or MATLAB in real time over the network. This research tool has been used to visualize flight paths, test control algorithms, simulate an active airspace, or generate out-the-window visuals for in-house flight simulation software.",
      "License": [
        "NASA Open Source"
      ],
      "Categories": [
        "Flight Simulation",
        "Research Tools"
      ],
      "Update_Date": "2014-10-22"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "VWoeltjen",
      "harleigh",
      "DanBerrios",
      "danielpacak"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "MCT-Plugins",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/MCT-Plugins/wiki",
    "Public Code Repo": "https://github.com/nasa/MCT-Plugins",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This plug-in allows users to create satellites in MCT and track their orbits, in real-time, through various views: Satellite Orbits in 3D via the Earth View plug-in. Real-time locations on a 2D Mercator Projection (A new to MCT; created within this plug-in). All of the views that come standard with the core-MCT distribution (i.e.: MultiColumn View, Plots over time, Alpha, etc.).",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "MCT",
      "Mission Critical Technologies",
      "plug-in",
      "telemetry",
      "tracking",
      "satellite",
      "imagery"
    ],
    "New Date": "",
    "Update_Date": "2014-08-26"
  },
  {
    "NASA Center": "Center of Excellence for Collaborative Innovation",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader",
      "ambdiv"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Asteroid-Tracker",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Asteroid-Tracker",
    "Public Code Repo": "https://github.com/nasa/NTL-Asteroid-Tracker",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This algorithm code (from the Phase 1 Asteroid Tracker Challenge) provides the optimum subarray selection per set of object tracks provided in a predefined configuration using a fixed number of dishes - See more about the challenge at: http://www.topcoder.com/asteroids/tracker/ This code was generated via a challenge on the NASA Tournament Lab (NTL) supported by NASA's Center of Excellence for Collaborative Innovation (CoECI).",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "NTL",
      "asteroid",
      "tracker",
      "algorithm"
    ],
    "New Date": "",
    "Update_Date": "2014-09-08"
  },
  {
    "NASA Center": "NASA Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "chapman178",
      "cheesie67",
      "DanBerrios",
      "danielpacak"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "T-MATS",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/T-MATS",
    "Public Code Repo": "https://github.com/nasa/T-MATS",
    "Instructional Material": "",
    "Stats": "",
    "Description": "An open source thermodynamic modeling package completed on behalf of NASA. The Toolbox for the Modeling and Analysis of Thermodynamic Systems (T-MATS) package offers a MATLAB/Simulink toolbox that gives a developer the ability to create simulations of such thermodynamic systems as turbomachinery and gas turbines.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Matlab"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "tool",
      "analysis",
      "modeling",
      "thermodynamics",
      "TMATS",
      "control system",
      "numerical methods",
      "Newton-Raphson",
      "Jacobian Calculation",
      "Propulsion",
      "Aircraft Engine",
      "Jet",
      "Turbofan",
      "Turbojet",
      "Compressor",
      "Turbine",
      "Nozzle",
      "Inlet",
      "open source"
    ],
    "New Date": "",
    "Update_Date": "2014-08-26"
  },
  {
    "NASA Center": "Marshall Space Flight Center",
    "ProgramTeams": [
      "Goddard Space Flight Center",
      "Jet Propulsion Laboratory",
      "Ames Research Center"
    ],
    "Contributors": [
      "ambdiv",
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Lunar-Mapping-and-Modeling-Portal",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Lunar-Mapping-and-Modeling-Portal",
    "Public Code Repo": "https://github.com/nasa/NTL-Lunar-Mapping-and-Modeling-Portal",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Lunar Mapping and Modeling Portal (LMMP) is a system that has been built to support lunar exploration activities that will enable return of both manned and unmanned missions to the Moon. It provides a web-based Portal and a suite of interactive visualization and analysis tools to enable mission planners, lunar scientists, and engineers to access mapped lunar data products from past and current lunar missions. It also addresses the lunar science community, the lunar commercial community, education and public outreach, and anyone else interested in accessing or utilizing lunar data.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "modeling",
      "lunar",
      "mapping",
      "exploration",
      "tool",
      "analysis",
      "visualization"
    ],
    "New Date": "",
    "Update_Date": "2014-09-08"
  },
  {
    "NASA Center": "Marshall Space Flight Center",
    "Program Teams": [
      "Ames Research Center",
      "Goddard Space Flight Center",
      "Jet Propulsion Laboratory"
    ],
    "Contributors": [
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Planetary-Data-System-API",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Planetary-Data-System-API",
    "Public Code Repo": "https://github.com/nasa/NTL-Planetary-Data-System-API",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Lunar Mapping and Modeling Portal (LMMP) is a system that has been built to support lunar exploration activities that will enable return of both manned and unmanned missions to the Moon. It provides a web-based Portal and a suite of interactive visualization and analysis tools to enable mission planners, lunar scientists, and engineers to access mapped lunar data products from past and current lunar missions. It also addresses the lunar science community, the lunar commercial community, education and public outreach, and anyone else interested in accessing or utilizing lunar data.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "modeling",
      "planetary",
      "data",
      "system",
      "API"
    ],
    "New Date": "",
    "Update_Date": "2014-09-08"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "VWoeltjen",
      "DanBerrios",
      "alpearson",
      "harleigh",
      "adamcrume",
      "kptran",
      "danielpacak",
      "dtran320",
      "phallbic",
      "bhong",
      "chriswebster"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "mct",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/mct/wiki",
    "Public Code Repo": "https://github.com/nasa/mct",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Mission Control Technologies is a real-time monitoring and visualization platform.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "monitoring",
      "visualization",
      "MCT",
      "control",
      "application",
      "spacelfight",
      "mission"
    ],
    "New Date": "",
    "Update_Date": "2014-07-10"
  },
  {
    "NASA Center": "NASA Center for Excellence for Collaborative Innovation",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Solution-Mechanism-Guide",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Solution-Mechanism-Guide",
    "Public Code Repo": "https://github.com/nasa/NTL-Solution-Mechanism-Guide",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Solution Mechanism Guide (SMG) is a tool to educate our scientists and managers about what tools are available for them to utilize in order to solve the challenges of spaceflight.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "tool",
      "education",
      "Solution Mechanism Guide"
    ],
    "New Date": "",
    "Update_Date": "2014-08-21"
  },
  {
    "NASA Center": "NASA Langley Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "mrbcuda",
      "mrbkt"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "CertWare",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/CertWare",
    "Public Code Repo": "https://github.com/nasa/CertWare",
    "Instructional Material": "",
    "Stats": "",
    "Description": "CertWare is a collection of tools intended to support the development of safety, assurance, or dependability cases. CertWare adopts several types of structured argument models and provides an implementation of tools to support writing and verifying arguments using the chosen model. The implementations are a baseline meant to be enhanced and further integrated into development tools chains. Both textual and graphical editors are implemented. The implementation is done in Eclipse, as a large collection of Eclipse plugins and features, using several model generation tools to facilitate implementation and maintenance. See the Meta-Models section below for the kinds of models already incorporated into the workbench.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "CertWare",
      "safety cases",
      "project management",
      "planning",
      "metrics"
    ],
    "New Date": "",
    "Update_Date": "2014-08-15"
  },
  
  {
    "NASA Center": "NASA\u201a\u00c4\u00f4s Center of Excellence for Collaboration",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "rsial2"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "SCRD",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/SCRD",
    "Public Code Repo": "https://github.com/nasa/SCRD",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The SCRD is a flexible system that can be easily updated or modified for ongoing legislative mandates and is able to provide robust accounting tools for posting and adjusting payments.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "repository",
      "deposits",
      "re-deposits",
      "payment",
      "tracking"
    ],
    "New Date": "",
    "Update_Date": "2014-07-30"
  },
  {
    "NASA Center": "NASA Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "jasonduley"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NASA-3D-Resources",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NASA-3D-Resources",
    "Public Code Repo": "https://github.com/nasa/NASA-3D-Resources",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Here you'll find a growing collection of 3D models, textures, and images from inside NSA. All of these resources are free to download and use.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "repository",
      "3D",
      "models",
      "imagery",
      "images",
      "printing"
    ],
    "New Date": "",
    "Update_Date": "2014-06-17"
  },
  {
    "NASA Center": "Center of Excellence for Collaboration",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader",
      "rsial2",
      "coderReview"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-ISS-Food-Intake-Tracker",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-ISS-Food-Intake-Tracker",
    "Public Code Repo": "https://github.com/nasa/NTL-ISS-Food-Intake-Tracker",
    "Instructional Material": "",
    "Stats": "",
    "Description": "NASA Tournament Lab (NTL) International Space Station (ISS) Food Intake Tracker (FIT) app for ISS crew to use on their iPads.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "NTL",
      "ISS",
      "Food Intake Tracker",
      "application",
      "tracking"
    ],
    "New Date": "",
    "Update_Date": "2014-07-22"
  },
  {
    "NASA Center": "NASA's Open Government Team",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "jasonduley",
      "seanherron"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Digital-Strategy",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/digital-strategy",
    "Public Code Repo": "https://github.com/nasa/digital-strategy",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Machine-readable schema for NASA's response to the president's digital strategy.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "CSS"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "repository",
      "citizen",
      "developer",
      "digital strategy"
    ],
    "New Date": "",
    "Update_Date": "2014-09-17"
  },
  {
    "NASA Center": "NASA Glenn Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "TTECTrA-SIM",
      "skytland"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "TTECTrA",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/TTECTrA",
    "Public Code Repo": "https://github.com/nasa/TTECTrA",
    "Instructional Material": "",
    "Stats": "",
    "Description": "An open source, semi-automated, control design tool for subsonic aircraft engine simulations written in the MATLAB/Simulink environment. The Tool for Turbine Engine Closed-loop Transient Analysis provides the user a preliminary estimate of the closed-loop transient performance of an engine model.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Matlab"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "MATLAB",
      "Simulink",
      "control",
      "design",
      "tool",
      "engine simulations",
      "analysis",
      "Tool for Turbine Engine Closed-loop Transient Analysis"
    ],
    "New Date": "",
    "Update_Date": "2014-06-06"
  },
  {
    "NASA Center": "NASA Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "acudmore"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "eefs",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/eefs/",
    "Public Code Repo": "https://github.com/nasa/eefs/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This is the EEPROM File System Project (EEFS). It is a simple file system for memory devices such as EEPROM, RAM, ROM, etc. t can be used as a simple file system to boot an embedded system running vxWorks, RTEMS, or even no operating system. An EEFS image can be created on the development host, providing a single file to burn into an image that is loaded on a target.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "file system",
      "eefs",
      "EEPROM File System Project"
    ],
    "New Date": "",
    "Update_Date": "2014-05-13"
  },
  {
    "NASA Center": "NASA Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "acudmore"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "osal",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/osal",
    "Public Code Repo": "https://github.com/nasa/osal",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This distribution contains:The OS Abstraction Layer Library, Tests and example applications for the following targets: Generic PPC running vxWorks 6.x (Tested on vxWorks 6.4), Axiom m5235BCC Coldfire Evaluation board running the RTEMS 4.10 Operating System, A PC running Linux (Tested on CentOS 5.x and 6.x 32 bit), The sparc/sis simulator running RTEMS 4.10.2, A directory structure and makefiles to manage it all.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "operating system abstraction layer library",
      "application",
      "flight software systems"
    ],
    "New Date": "",
    "Update_Date": "2014-05-05"
  },
  {
    "NASA Center": "NASA Langley Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "cesaramh",
      "ds604"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Kodiak",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/Kodiak",
    "Public Code Repo": "https://github.com/nasa/Kodiak",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Library for rigorous verification of non-linear arithmetic.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "library",
      "repository",
      "non-linear arithmetic",
      "verification"
    ],
    "New Date": "",
    "Update_Date": "2014-05-02"
  },
  {
    "NASA Center": "NASA Langley Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "cesaramh"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "WellClear",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/WellClear",
    "Public Code Repo": "https://github.com/nasa/WellClear",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Well-Clear Boundary Models for Integration of UAS in the NAS.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Matlab"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "models",
      "integration",
      "boundary",
      "UAS"
    ],
    "New Date": "",
    "Update_Date": "2014-04-23"
  },
  {
    "NASA Center": "Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader",
      "rsial2"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "CoECI-CMS-Healthcare-Fraud-Prevention",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/CoECI-CMS-Healthcare-Fraud-Prevention",
    "Public Code Repo": "https://github.com/nasa/CoECI-CMS-Healthcare-Fraud-Prevention",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Code from the Healthcare Fraud Prevention Partnership (HFPP) through United States Centers for Medicare & Medicaid Services (CMS) challenge in collaboration with NASA's Center of Excellence for Collaboration (CoECI), Harvard, and TopCoder developed software that supports a data exchange network that enables healthcare insurance-paying entities in both the public and private sector to safely and securely share information for purposes of prevention and detection of fraud, waste and abuse across partners.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "HFPP",
      "Medicare & Medicaid Services",
      "fraud prevention"
    ],
    "New Date": "",
    "Update_Date": "2014-04-07"
  },
  {
    "NASA Center": "Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader",
      "rsial2"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Collective-Minds-and-Machines-Exploration",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Collective-Minds-and-Machines-Exploration",
    "Public Code Repo": "https://github.com/nasa/NTL-Collective-Minds-and-Machines-Exploration",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This code includes the algorithms that resulted from a challenge on the NASA Tournament Lab (NTL). This challenge was to study select satellite imagery of the region of the lost tomb of Genghis Khan and then develop an algorithm that will recognize human built, and potentially historically significant, structures found in those images.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ASL"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "algorithm",
      "NTL",
      "imagery",
      "satellite",
      "archeology"
    ],
    "New Date": "",
    "Update_Date": "2014-01-16"
  },
  {
    "NASA Center": "NASA\u201a\u00c4\u00f4s Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "cyberjag",
      "alamora",
      "ksirmons"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "coeci-cms-mpsp",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/coeci-cms-mpsp",
    "Public Code Repo": "https://github.com/nasa/coeci-cms-mpsp",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This is the Medicaid Provider Enrollment Screening Portal Project multi-state, multi-program provider screening application capable of risk scoring, credentialing validation, identify authentication, and sanction checks, that lowered the burden on providers and reduced administrative and infrastructure expenses for states and federal programs.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "medicaid",
      "enrollment",
      "screening"
    ],
    "New Date": "",
    "Update_Date": "2014-01-14"
  },
  {
    "NASA Center": "NASA\u201a\u00c4\u00f4s Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader",
      "athackst"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-ISS-Robonaut-2-Vision-Algorithm-Challenge",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-ISS-Robonaut-2-Vision-Algorithm-Challenge",
    "Public Code Repo": "https://github.com/nasa/NTL-ISS-Robonaut-2-Vision-Algorithm-Challenge",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The NASA Tournament Lab (NTL) challenge to create an algorithm to help Robonaut 'see' objects and recognize them. This repository contains the set of winning algorithms that are being used to develop the next generation Robonaut control software.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "NTL",
      "control",
      "robotics",
      "repository"
    ],
    "New Date": "",
    "Update_Date": "2014-01-09"
  },
  {
    "NASA Center": "Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "dlconner"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "cash",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/cash",
    "Public Code Repo": "https://github.com/nasa/cash",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Cassini Structured Homepages uses LDAP authorization to provide a security layer to webpage content.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Shell"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Cassini",
      "security"
    ],
    "New Date": "",
    "Update_Date": "2013-12-31"
  },
  {
    "NASA Center": "Ames Research Center\u201a\u00c4\u00f9",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "dlconner"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "autodoc",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/autodoc",
    "Public Code Repo": "https://github.com/nasa/autodoc",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Automatic Documentation software creates Microsoft Documents automatically using Text and Template files.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ASL"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "document",
      "templates",
      "application",
      "automation"
    ],
    "New Date": "",
    "Update_Date": "2013-12-31"
  },
  {
    "NASA Center": "Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "rsial2",
      "AetBoston",
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "COECI-USAID-Atrocity-Prevention-Model",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/CoECI-USAID-Atrocity-Prevention-Model",
    "Public Code Repo": "https://docs.google.com/file/d/0B5LAtOowzIeoNjNMZ1VZTzZDNTg/edit?pli=1",
    "Instructional Material": "https://github.com/nasa/CoECI-USAID-Atrocity-Prevention-Model/blob/master/readme",
    "Stats": "",
    "Description": "Code from the United States Agency for International Development (USAID) and Humanity United (HU) challenge for Atrocity Prevention Modeling in collaboration with NASA's Center of Excellence for Collaboration (CoECI). This package contains the top 5 solutions submitted for the 'Tech Challenge for Atrocity Prevention' competition.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Analytics",
      "algorithm",
      "data mining",
      "prediction"
    ],
    "New Date": "",
    "Update_Date": "2013-12-03"
  },
  {
    "NASA Center": "NASA Tournament Lab",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Crater-Detection-Challenge",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Crater-Detection-Challenge",
    "Public Code Repo": "https://github.com/nasa/NTL-Crater-Detection-Challenge",
    "Instructional Material": "https://github.com/nasa/NTL-Crater-Detection-Challenge/blob/master/README.md",
    "Stats": "",
    "Description": "NASA Tournament Lab (NTL) challenge to develop an algorithm that can detect craters from imagery.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Analytics",
      "algorithm",
      "data mining",
      "imagery",
      "detection"
    ],
    "New Date": "",
    "Update_Date": "2013-12-03"
  },
  {
    "NASA Center": "Center of Excellence for Collaboration (CoECI)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "CoECI-CMS-Open-Payment",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/CoECI-CMS-Open-Payment",
    "Public Code Repo": "https://github.com/nasa/CoECI-CMS-Open-Payment",
    "Instructional Material": "https://github.com/nasa/CoECI-CMS-Open-Payment/blob/master/README.md",
    "Stats": "",
    "Description": "Code from the United States Centers for Medicare & Medicaid Services (CMS) challenge in collaboration with NASA's Center of Excellence for Collaboration (CoECI), Harvard, and TopCoder developed an iPhone app and reporting web application used to track and compile transfers of value (e.g. gift, meal, speaking fee) from industry manufacturers (e.g. pharmaceutical companies) to physicians.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Analytics",
      "reporting",
      "tracking",
      "application"
    ],
    "New Date": "",
    "Update_Date": "2013-11-06"
  },
  {
    "NASA Center": "NASA Tournament Lab (NTL)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Electrocardiogram",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Electrocardiogram",
    "Public Code Repo": "https://github.com/nasa/NTL-Electrocardiogram",
    "Instructional Material": "https://github.com/nasa/NTL-Electrocardiogram/blob/master/README.md",
    "Stats": "",
    "Description": "Algorithm code to address the NTL Electrocardiogram (ECG) Challenge to develop an algorithm to optimize the contents for the medical kits that accompany astronauts on missions.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Analytics",
      "tracking",
      "application",
      "algorithm"
    ],
    "New Date": "",
    "Update_Date": "2013-11-06"
  },
  {
    "NASA Center": "NASA Tournament Lab (NTL)",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "nasarader"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NTL-Disruption-Tolerant-Networking",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NTL-Disruption-Tolerant-Networking",
    "Public Code Repo": "https://github.com/nasa/NTL-Disruption-Tolerant-Networking",
    "Instructional Material": "https://github.com/nasa/NTL-Disruption-Tolerant-Networking/blob/master/README.md",
    "Stats": "",
    "Description": "DTN is an approach to computer network architecture that seeks to address the technical issues in heterogeneous networks that may lack continuous network connectivity.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Analytics",
      "network",
      "application",
      "algorithm"
    ],
    "New Date": "",
    "Update_Date": "2013-10-31"
  },
  {
    "NASA Center": "Kennedy Space Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "skytland"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "39A",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/39A",
    "Public Code Repo": "https://github.com/nasa/39A",
    "Instructional Material": "https://github.com/nasa/39A/blob/master/README.rst",
    "Stats": "",
    "Description": "39A is the software used to power the 2013 International Space Apps Challenge, a global hackathon focusing on space technology and issues.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "software",
      "International Space Apps Challenge",
      "2013",
      "operations"
    ],
    "New Date": "",
    "Update_Date": "2013-09-28"
  },
  {
    "NASA Center": "Johnson Space Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pmosbach",
      "ecabuhay",
      "jdtunage"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "VADER",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/VADER/wiki",
    "Public Code Repo": "https://github.com/nasa/VADER",
    "Instructional Material": "https://github.com/nasa/VADER/blob/master/README.txt",
    "Stats": "",
    "Description": "This repository consists of the various scripts required to make our VADER system work. The variable emissivity radiator aerogel insulation blanket dual zone thermal control experiment suite for responsive space (STP-H3-VADER) investigation tests a variable emissivity radiator and a new form of multilayer insulation that uses Aerogel as the thermal isolator in order to protect the spacecraft from the harsh extremes of the space environment. The Aerogel material provides a more durable, lighter and cheaper alternative to traditional spacecraft thermal blankets. The use of this material could reduce the costs related to spaceflight by reducing the required spacecraft mass and increasing design efficiency.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "software",
      "operations",
      "VADER"
    ],
    "New Date": "",
    "Update_Date": "2013-09-03"
  },
  {
    "NASA Center": "Headquarters",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "seanherron"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "data.nasa.gov",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/data.nasa.gov",
    "Public Code Repo": "https://github.com/nasa/data.nasa.gov",
    "Instructional Material": "https://github.com/nasa/data.nasa.gov/blob/master/README.md",
    "Stats": "",
    "Description": "This is the source code for the WordPress theme that powers data.nasa.gov. Data.nasa.gov is NASA's flagship platform for sharing information about the vast data we collect and store over 100 years of U.S. aeronautics and space data. Developers, technologists, entrepreneurs, citizen scientists, and many others can contribute directly to the exploration of space and Earth by helping to create new ways of looking at this data.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "PHP"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "software",
      "operations",
      "open source",
      "datasets",
      "NASA"
    ],
    "New Date": "",
    "Update_Date": "2013-06-14"
  },
  {
    "NASA Center": "Headquarters",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "seanherron"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "code.nasa.gov",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/code.nasa.gov",
    "Public Code Repo": "https://github.com/nasa/code.nasa.gov",
    "Instructional Material": "https://github.com/nasa/code.nasa.gov/blob/master/README.md",
    "Stats": "",
    "Description": "This is the source code for the WordPress theme that powers code.nasa.gov. Code.nasa.gov expands NASA's open source activities, surfaces existing activities, and guides internal and external groups in open development, release, and contribution. In doing so, NASA hopes to lower barriers to building open technology in partnership with the public.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "software",
      "operations",
      "open source",
      "code",
      "NASA"
    ],
    "New Date": "",
    "Update_Date": "2013-06-14"
  },
  {
    "NASA Center": "Headquarters",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "skytland"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NASA-APIs",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/NASA-APIs",
    "Public Code Repo": "https://github.com/nasa/NASA-APIs",
    "Instructional Material": "https://github.com/nasa/NASA-APIs/blob/master/README.md",
    "Stats": "",
    "Description": "This is the source code for the WordPress theme that powers code.nasa.gov. Over the past 50 years, NASA has collected a vast amount of data that has helped us better understand Earth, other planets in our solar system, and the depths of space. Almost all of of this data is now in the public domain petabytes upon petabytes waiting for you to explore. Although the Agency offers petabytes of publicly available data to the world from a variety of missions, only a small portion is accessible through API interfaces. NASA sees huge promise in web APIs, as they can enhance our ability to deliver data to both established and new audiences. The Digital Strategy mandate directed NASA to use web APIs to make available high-value data and content for at least two existing major customer-facing systems.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "repository",
      "issue tracking",
      "open source",
      "API",
      "NASA"
    ],
    "New Date": "",
    "Update_Date": "2013-05-20"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "ramcdona"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "OpenVSP",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/OpenVSP",
    "Public Code Repo": "https://github.com/nasa/OpenVSP",
    "Instructional Material": "https://github.com/nasa/OpenVSP/blob/master/README",
    "Stats": "",
    "Description": "OpenVSP is a parametric aircraft geometry tool that allows the user to create a 3D model of an aircraft defined by common engineering parameters.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "repository",
      "tool",
      "open source",
      "3D model",
      "NASA"
    ],
    "New Date": "",
    "Update_Date": "2013-01-13"
  },
  {
    "NASA Center": "Glenn Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "naylor-b",
      "Kenneth-T-Moore",
      "justinopenmdao",
      "swryan",
      "pziegfeld",
      "setowns1",
      "JustinSGray",
      "cnkavanaugh",
      "hschilling",
      "kmarsteller",
      "eshendricks"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "OpenMDAO-Framework",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/OpenMDAO-Framework",
    "Public Code Repo": "https://github.com/nasa/OpenMDAO-Framework",
    "Instructional Material": "https://github.com/nasa/OpenMDAO-Framework/blob/dev/README.txt",
    "Stats": "",
    "Description": "OpenMDAO is an open-source Multidisciplinary Design Analysis and Optimization (MDAO) framework, written in Python. It helps users solve complex problems by allowing them to link together analysis codes from multiple disciplines at multiple levels of fidelity. The development effort for OpenMDAO is being led out of the NASA Glenn Research Center in the MDAO branch. The development effort is being funded by the Fundamental Aeronautic Program, Subsonic Fixe Wing project. The ultimate goal is to provide a flexible common analysis platform that can be shared between industry, academia, and government.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Python"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "analytics",
      "code",
      "open source"
    ],
    "New Date": "",
    "Update_Date": "2011-12-28"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "zmoratto",
      "broxtronix",
      "novas0x2a",
      "khusmann",
      "anefian",
      "trey0",
      "mstyer",
      "rbeyer",
      "mdhancher",
      "harguess",
      "saravkin"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "StereoPipeline",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/StereoPipeline",
    "Public Code Repo": "https://github.com/nasa/StereoPipeline",
    "Instructional Material": "https://github.com/nasa/StereoPipeline/blob/master/README",
    "Stats": "",
    "Description": "The NASA Ames Stereo Pipeline is a suite of automated geodesy & stereogrammetry tools designed for processing planetary imagery captured from orbiting and landed robotic explorers on other planets.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "NGT",
      "Neo-Geography Toolkit",
      "NASA",
      "open source",
      "geodesy",
      "stereogrammetry",
      "imagery"
    ],
    "New Date": "",
    "Update_Date": "2011-12-21"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "tgaskins"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "World-Wind-Java",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/World-Wind-Java",
    "Public Code Repo": "https://github.com/nasa/World-Wind-Java",
    "Instructional Material": "https://github.com/nasa/World-Wind-Java/blob/master/README.txt",
    "Stats": "",
    "Description": "World Wind, an open source 3D interactive world viewer, was created by NASA's Learning Technologies project, and released in mid-2004. It is now developed by NASA staff and open source community developers.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "3D",
      "SDK",
      "imagery"
    ],
    "New Date": "",
    "Update_Date": "2011-12-23"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "zmoratto",
      "broxtronix",
      "novas0x2a",
      "khusmann",
      "anefian",
      "trey0",
      "mstyer",
      "mdhancher",
      "harguess",
      "iansaxton",
      "radishman",
      "ekpneo",
      "mallan",
      "iceboundflame"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "visionworkbench",
    "Internal Link": "",
    "External Link": "https://github.com/nasa/visionworkbench",
    "Public Code Repo": "https://github.com/nasa/visionworkbench",
    "Instructional Material": "https://github.com/nasa/visionworkbench/blob/master/README",
    "Stats": "",
    "Description": "The NASA Vision Workbench is a general purpose image processing and computer vision library developed by the Autonomous Systems and Robotics (ASR) Area in the Intelligent Systems Division at the NASA Ames Research Center.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "image processing",
      "imagery",
      "computer vision library"
    ],
    "New Date": "",
    "Update_Date": "2011-11-29"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "MatthewValverde"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NASA-Space-Weather-Media-Viewer",
    "Internal Link": "",
    "Public Code Repo": "https://github.com/nasa/NASA-Space-Weather-Media-Viewer",
    "External Link": "https://play.google.com/store/apps/details?id=air.NasaSpaceViewer",
    "Instructional Material": "https://github.com/nasa/NASA-Space-Weather-Media-Viewer/blob/master/README",
    "Stats": "",
    "Description": "Space weather media viewer.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "media",
      "viewer",
      "imagery",
      "space",
      "weather",
      "Google",
      "Android"
    ],
    "New Date": "",
    "Update_Date": "2011-06-30"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      "Glenn Research Center",
      "Goddard Space Flight Center",
      "Jet Propulsion Laboratory",
      "Langley Research Center",
      "Marshall Space Flight Center"
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "NASA Technology Transfer Program 2014 Software Catalog",
    "Internal Link": "",
    "External Link": "http://technology.nasa.gov/NASA_Software_Catalog_2014.pdf",
    "Public Code Repo": "http://technology.nasa.gov/NASA_Software_Catalog_2014.pdf",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The NASA Technology Transfer Program 2014 Software Catalog is now available. The technologies featured in this catalog represent NASA's best solutions to a wide array of complex problems, and they are on offer here to the public for use. They cover project management systems, design tools, data handling, and image processing, as well as solutions for life support functions, aeronautics, structural analysis, and robotic and autonomous systems.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "technology",
      "transfer",
      "image processing",
      "project management",
      "repository",
      "catalog"
    ],
    "New Date": "",
    "Update_Date": "2014-09-12"
  },
  {
    "NASA Center": "Marshall Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pa-allen"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Tool for Analysis of Surface Cracks (TASC)",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/tascnasa/",
    "Public Code Repo": "http://sourceforge.net/projects/tascnasa/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Tool for Analysis of Surface Cracks (TASC) is a computer program created in MATLAB to enable easy computation of nonlinear J-integral solutions for surface cracked plates in tension by accessing and interpolating between the 600 nonlinear surface crack solutions documented in NASA/TP-2011-217480. The only required inputs are the surface crack dimensions (2c and a), plate cross-section dimensions (W and B), and linear plus power law material properties of elastic modulus, yield strength, and strain hardening coefficient. With the geometry and material parameters entered, TASC interpolates to the appropriate J(Φ) vs. crack mouth opening displacement (CMOD) and far-field tension stress, σ, vs. CMOD solution, providing the full solution as CMOD ranges from zero out to the CMOD limit of the solution space for the given input parameters. TASC was developed by the Material and Processes Laboratory at NASA's Marshall Space Flight Center.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "MATLAB"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "technology",
      "tool",
      "analysis",
      "surface",
      "cracks",
      "displacement"
    ],
    "New Date": "",
    "Update_Date": "2014-09-10"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Data Quality Screening Service",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/DQSS/index.php",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/DQSS/index.php",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Data Quality Screening Service (DQSS) is designed to help automate the filtering of remote sensing data on behalf of science users. Whereas this process today involves much research through quality documents, followed by laborious coding, the DQSS can act as a Web Service to provide data users with data pre-filtered to their particular criteria, while at the same time guiding the user with filtering recommendations of the cognizant data experts.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "XML"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "remote sensing",
      "filter",
      "tool",
      "web service",
      "quality assurance"
    ],
    "New Date": "",
    "Update_Date": "2014-09-15"
  },
  {
    "NASA Center": "Jet Propulsion Laboratory",
    "Program Teams": [
      ""
    ],
    "Contributors": [
            "Dr. Chris A. Mattmann", 
            "Mr. Paul Ramirez",
            "Mr. Maziyar Boustani", 
            "Ms. Shakeh Khudikyan",
            "Mr. Mike Joyce",
            "Mr. Rishi Verma",
            "Dr. Lewis John McGibbney",
            "Mr. Tyler Palsulich" 
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Apache OODT",
    "Internal Link": "",
    "External Link": "http://oodt.apache.org",
    "Public Code Repo": "http://oodt.apache.org/",
    "Instructional Material": "https://cwiki.apache.org/confluence/display/OODT/Home",
    "Stats": "",
    "Description": "Apache OODT is NASA's first project to be stewarded at the open source Apache Software Foundation. OODT is middleware for information integration and for science data processing and retrieval. It provides components including file management, workflow management, resource management, and automated remote data acquisition, file crawling and ingestion, and science algorithm wrapping and integration.",
    "Internal Code Repo": "",
    "License": [
      "ALv2"
    ],
    "Languages": [
       "Java",
       "Python"
    ],
    "Platform Requirements": [
      "*nix Environment"
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
            "agility",
            "app",
            "balance",
            "catalog",
            "cli",
            "commons",
            "core",
            "crawler",
            "curator",
            "filemgr",
            "grid",
            "metadata",
            "mvn",
            "opendapps",
            "pcs",
            "pge",
            "product",
            "profile",
            "protocol",
            "pushpull",
            "resource",
            "sso",
            "tools",
            "webapp",
            "workflow",
            "xmlps",
            "xmlquery"
    ],
    "Component module URLs": [
            "http://svn.apache.org/repos/asf/oodt/trunk/agility/",
            "http://svn.apache.org/repos/asf/oodt/trunk/app/",
            "http://svn.apache.org/repos/asf/oodt/trunk/balance/",
            "http://svn.apache.org/repos/asf/oodt/trunk/catalog/",
            "http://svn.apache.org/repos/asf/oodt/trunk/cli/",
            "http://svn.apache.org/repos/asf/oodt/trunk/commons/",
            "http://svn.apache.org/repos/asf/oodt/trunk/core/",
            "http://svn.apache.org/repos/asf/oodt/trunk/crawler/",
            "http://svn.apache.org/repos/asf/oodt/trunk/curator/",
            "http://svn.apache.org/repos/asf/oodt/trunk/filemgr/",
            "http://svn.apache.org/repos/asf/oodt/trunk/grid/",
            "http://svn.apache.org/repos/asf/oodt/trunk/metadata/",
            "http://svn.apache.org/repos/asf/oodt/trunk/mvn/",
            "http://svn.apache.org/repos/asf/oodt/trunk/opendapps/",
            "http://svn.apache.org/repos/asf/oodt/trunk/pcs/",
            "http://svn.apache.org/repos/asf/oodt/trunk/pge/",
            "http://svn.apache.org/repos/asf/oodt/trunk/product/",
            "http://svn.apache.org/repos/asf/oodt/trunk/profile/",
            "http://svn.apache.org/repos/asf/oodt/trunk/protocol/",
            "http://svn.apache.org/repos/asf/oodt/trunk/pushpull/",
            "http://svn.apache.org/repos/asf/oodt/trunk/resource/",
            "http://svn.apache.org/repos/asf/oodt/trunk/sso/",
            "http://svn.apache.org/repos/asf/oodt/trunk/tools/",
            "http://svn.apache.org/repos/asf/oodt/trunk/webapp/",
            "http://svn.apache.org/repos/asf/oodt/trunk/workflow/",
            "http://svn.apache.org/repos/asf/oodt/trunk/xmlps/",
            "http://svn.apache.org/repos/asf/oodt/trunk/xmlquery/"
    ],
    "Industry": [
      "Federally Funded Research and Development Centre"
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "file",
      "management",
      "workflow",
      "resource",
      "automated",
      "remote data",
      "acquisition",
      "file",
      "crawling",
      "ingestion",
      "science",
      "algorithm",
      "wrapping",
      "integration"
    ],
    "New Date": "",
    "Update_Date": "2014-10-08"
  },
  {
    "NASA Center": "Jet Propulsion Laboratory",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "jplsr"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Earth Science Datacasting",
    "Internal Link": "",
    "External Link": "http://datacasting.jpl.nasa.gov/",
    "Public Code Repo": "http://sourceforge.net/projects/datacasting/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Datacasting is a RSS publish-subscribe method for delivering Earth Science data. A Feed Reader provides feed filtering, data download, and the ability to mash-up data with information related to geophysical events.",
    "Internal Code Repo": "",
    "License": [
      "BSD"
    ],
    "Languages": [
      "XML"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "datacasting",
      "RSS",
      "data",
      "filter",
      "geophysical events",
      "geophysics",
      "earth science"
    ],
    "New Date": "",
    "Update_Date": "2011-11-20"
  },
  {
    "NASA Center": "Jet Propulsion Laboratory",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "jplsr",
      "hkruse",
      "sburleig",
      "shawnostermann"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Interplanetary Overlay Network (ION) Software Distribution (DTN)",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/ion-dtn/",
    "Public Code Repo": "http://sourceforge.net/projects/ion-dtn/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Interplanetary Overlay Network (ION) software distribution is an implementation of Delay-Tolerant Networking (DTN) architecture as described in Internet RFC 4838. It includes implementations of the DTN Bundle Protocol, the Licklider Transmission Protocol, and two CCSDS application protocols that have been adapted to run over the BP/LTP stack: the CCSDS File Delivery Protocol and Asynchronous Message Service.",
    "Internal Code Repo": "",
    "License": [
      "BSD"
    ],
    "Languages": [
      "XML"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "software",
      "distribution",
      "network",
      "interplanetary overlay network",
      "ION",
      "earth science"
    ],
    "New Date": "",
    "Update_Date": "2014-07-08"
  },
  {
    "NASA Center": "Jet Propulsion Laboratory",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "jplsr"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Data Productivity Toolkit",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/dptoolkit/",
    "Public Code Repo": "http://sourceforge.net/projects/dptoolkit/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Data Productivity Toolkit is a collection of linux command-line tools designed to facilitate the analysis of text-based data sets. Modeled after the general linux pipeline tools such as awk, grep, and sed, the kit provides powerful tools for selecting/combining data, performing statistics, and visualizing results. The tools are all written in python and in many instances provide a command-line API to basic python and numpy/scipy/matplotlib routines.",
    "Internal Code Repo": "",
    "License": [
      "BSD"
    ],
    "Languages": [
      "Python"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "data",
      "productivity",
      "toolkit",
      "data collection"
    ],
    "New Date": "",
    "Update_Date": "2011-12-05"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "acudmore"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Core Flight Executive (cFE)",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/coreflightexec/files/cFE-6.1.1/",
    "Public Code Repo": "http://sourceforge.net/projects/coreflightexec/files/cFE-6.1.1/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Core Flight Executive is a portable, platform independent embedded system framework developed by NASA Goddard Space Flight Center. This framework is used as the basis for the flight software for satellite data systems and instruments, but can be used on other embedded systems. The Core Flight Executive is written in C and depends on another software library called the Operating System Abstraction Layer (OSAL). The OSAL is available at http://osal.sf.net and will be hosted on http://code.nasa.gov.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "framework",
      "flight",
      "software",
      "satellite",
      "data",
      "instruments",
      "embedded",
      "Operating System Abstraction Layer",
      "OSAL"
    ],
    "New Date": "",
    "Update_Date": "2012-01-20"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "segfaulthunter",
      "Cadair",
      "khughitt",
      "ehsteve",
      "wafels",
      "derdon",
      "ayshih",
      "DanRyanIrish",
      "aringlis",
      "rhewett",
      "drewleonard42",
      "kaichogami",
      "dpshelio",
      "VaticanCameos",
      "nabobalis",
      "mattearnshaw",
      "gunner272",
      "amras1",
      "CyclingNinja",
      "ndchorley",
      "quintusdias",
      "mjm159",
      "rubendv",
      "rajul-iitkgp",
      "Hypnus1803",
      "ankit-maverick",
      "ToyDragon",
      "larrymanley",
      "JordanBallew",
      "transientlunatic",
      "mateoi",
      "examon",
      "astrofrog",
      "bmampaey",
      "jaylenw",
      "airyens",
      "freekv"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "SunPy",
    "Internal Link": "",
    "External Link": "http://www.sunpy.org",
    "Public Code Repo": "https://github.com/sunpy/sunpy",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The SunPy project is an effort to create an open-source software library for solar physics using the Python programming language. More information at http://www.sunpy.org.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Python"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "libary",
      "repository",
      "solar",
      "physics"
    ],
    "New Date": "",
    "Update_Date": "2014-09-08"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pkolano"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Synchronization, Archival, Validation, and IP Exchange (Save)",
    "Internal Link": "",
    "External Link": "http://save-ha.sourceforge.net",
    "Public Code Repo": "http://sourceforge.net/projects/save-ha/files/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Save is a lightweight framework for creating high availability systems. Save manages IP addresses shared between multiple servers with the same function and monitors the health of those servers to determine which should be actively servicing requests at any given time. Save has additional features to facilitate the administration of high availability systems. Synchronization mechanisms allow configuration files to be kept consistent between systems as well as allowing commands to be executed across all servers of a particular type. Archival mechanisms provide automatic version control of configuration files to aid in recovery in case of errant configuration. Validation mechanisms allow configuration files to be automatically checked for correctness before they are installed on all peer servers.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Perl"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "framework",
      "health",
      "systems",
      "administration",
      "archive",
      "validation",
      "high availability"
    ],
    "New Date": "",
    "Update_Date": "2010-11-19"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pkolano"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Multi-Threaded Multi-Node Utilities (Mutil)",
    "Internal Link": "",
    "External Link": "http://mutil.sourceforge.net",
    "Public Code Repo": "http://sourceforge.net/projects/mutil/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Mutil is a set of standard utilities that employ multiple types of parallelism and other optimizations to achieve maximum performance on modern file systems. Multi-threading is used to ensure that nodes are kept as busy as possible. Double buffering allows individual operations within a single task to be overlapped using asynchronous I/O. Multi-node cooperation allows different nodes to take part in the same task. Split file processing allows multiple threads to operate concurrently on the same file. Finally, additional optimizations such as buffer management help eliminate other bottlenecks that can reduce performance. Mutil currently includes drop-in replacements for cp and md5sum from GNU coreutils, which have achieved 10/30x rates on one/many nodes.",
    "Internal Code Repo": "",
    "License": [
      "GPLv3"
    ],
    "Languages": [
      "Perl"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "file",
      "processing",
      "utilities",
      "nodes",
      "multi-thread",
      "optimization",
      "parallelism"
    ],
    "New Date": "",
    "Update_Date": "2013-05-01"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pkolano"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Middleware Using Existing SSH Hosts (MESH)",
    "Internal Link": "",
    "External Link": "http://mesh.sourceforge.net",
    "Public Code Repo": "http://sourceforge.net/projects/mesh/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Mesh is a secure, lightweight grid middleware that is based on the addition of a single sign-on capability to the built-in public key authentication mechanism of SSH using system call interposition. Resources may be added to a Mesh-based grid in a matter of minutes using just five small files and two environment variable settings. Mesh adheres to fundamental security principles and was designed to be compatible with strong security mechanisms including two-factor authentication, SSH bastions, and restrictive firewalls. Mesh uses a remote command model, which is based on stock SSH clients and the syntax and commands already understood by users, thus requires no additional software or knowledge to utilize effectively. Several existing services have been integrated with Mesh to provide resource discovery and query, high performance file transfer, and job management.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Perl",
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "middleware",
      "ssh",
      "host"
    ],
    "New Date": "",
    "Update_Date": "2012-09-06"
  },
  {
    "NASA Center": "Ames Research Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pkolano"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Balancing Load Across Systems (Ballast)",
    "Internal Link": "",
    "External Link": "http://ballast.sourceforge.net",
    "Public Code Repo": "http://sourceforge.net/projects/ballast/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Ballast is a tool for balancing user load across SSH servers based on configurable criteria such as CPU load and system availability. Ballast is invoked as part of the SSH login process, hence has access to the user name, which is not available in traditional load balancers. This gives ballast the unique ability to perform user-specific load balancing, which has several benefits including separating users who have historically generated high loads and providing a common login interface to users who may be separated based on other criteria such as system accessibility. Ballast includes a simple client, a lightweight data server, and a data collection agent.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Perl",
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "ballast",
      "ssh",
      "host",
      "clustering"
    ],
    "New Date": "",
    "Update_Date": "2013-05-13"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "pkolano"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Lossless Hyper-multi-spectral data compression software",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/LHD",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/LHD",
    "Instructional Material": "",
    "Stats": "",
    "Description": "Software implementation of JPL published paper for performing lossless hyper-spectral and milti-spectral data compression. The implementation was executed to confirm the results obtained by JPL independently. Implemented JPL published paper and its revised version presented to the CCSDS hyper/multi-spectral data compression working group. The implementation follows every step listed in the relevant papers and usess C-code for simplicity. The software takes 3-dimensional test data provided by the CCSDS working group and created predictor error results that can be further encoded with other known techniques.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "lossless",
      "hyper-spectral",
      "milti-spectral",
      "data",
      "compression",
      "CCSDS"
    ],
    "New Date": "",
    "Update_Date": "2014-08-12"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "btrivedi",
      "clynnes",
      "sberrick"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Simple, Scalable, Script-based Science Processor for Measurements (S4PM)",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/s4pm",
    "Public Code Repo": "http://sourceforge.net/projects/s4pm",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Simple, Scalable, Script-based Science Processor for Measurements (S4PM) is a system for highly automated processing of science data, scalable up to large processing systems and scalable down to small, special-purpose processing strings.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Perl"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "science",
      "process",
      "automation",
      "data",
      "simple",
      "scalable",
      "script-based",
      "measurements"
    ],
    "New Date": "",
    "Update_Date": "2013-03-08"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Goddard Satellite Data Simulation Unit (G-SDSU)",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/G-SDSU/",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/G-SDSU/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "G-SDSU core modules enables users to insert their own satellite simulator to convert model-simulated atmosphere states to various types of satellite observable signals (radiance or backscattering signals), and to compare such data with comparable measurements collected by corresponding satellite level-1 measurement.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "modeling",
      "GPM",
      "satellite",
      "mission",
      "observation",
      "atmoshpere",
      "algorithm",
      "measurements"
    ],
    "New Date": "",
    "Update_Date": "2014-09-16"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Core HSEG Software Package",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/HSEG/",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/HSEG/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The RHSEG software provides hierarchical segmentation (pre-processing) of image and image-like data. The software significantly improves the extraction of patterns from complex data sets and is optimized for speed and accuracy. This algorithm provides the user with precise control for selecting the desired level of detail from the hierarchy of results.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "software",
      "core",
      "RHSEG",
      "recursive",
      "hierarchical",
      "segmentation",
      "HSEG",
      "algorithm",
      "image",
      "analysis"
    ],
    "New Date": "",
    "Update_Date": "2009-12-02"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "boller8"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Visual System for Browsing, Analysis and Retrieval of Data (ViSBARD)",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/visbard/",
    "Public Code Repo": "http://sourceforge.net/projects/visbard/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "ViSBARD (Visual System for Browsing, Analysis, and Retrieval of Data) is an interactive visualization and analysis tool for space physics data. It provides an integrated 3-D/2-D environment to analyze measurements across many spacecraft and MHD models.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source",
      "ALv2",
      "GPLv3"
    ],
    "Languages": [
      "C",
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "visual",
      "system",
      "browse",
      "analysis",
      "retrieval",
      "data",
      "tool",
      "space",
      "physics",
      "MHD",
      "models"
    ],
    "New Date": "",
    "Update_Date": "2013-04-24"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Ground and space radar volume matching and comparison software",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/GSRadar/",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/GSRadar/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "This software enables easy comparison of ground- and space-based radar observations. The software was initially designed to compare ground radar reflectivity from operational, ground-based, S- and C-band meteorological radars with comparable measurements from the Tropical Rainfall Measuring Mission satellite's Precipitation Radar instrument. The software is also applicable to other ground-based and space-based radars. The software allows both ground and space based radar data to be compared for validation purposes.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "ground",
      "space",
      "radar",
      "validation",
      "volume",
      "matching",
      "comparison",
      "software"
    ],
    "New Date": "",
    "Update_Date": "2013-04-24"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Orbit Determination Toolbox",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/ODTBX",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/ODTBX",
    "Instructional Material": "",
    "Stats": "",
    "Description": "ODTBX is an orbit determination analysis tool based on Matlab and Java that provides a flexible way to do early mission analysis, especially for formation flying and exploration systems. ODTBX is composed of both Matlab and Java code.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java",
      "MATLAB"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "orbit",
      "determination",
      "tool",
      "formation",
      "flying",
      "exploration",
      "system",
      "mission",
      "analysis"
    ],
    "New Date": "",
    "Update_Date": "2014-09-16"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "International Polar Orbiter Processing Package (IPOPP)",
    "Internal Link": "",
    "External Link": "http://directreadout.sci.gsfc.nasa.gov/?id=dspContent&cid=68",
    "Public Code Repo": "http://directreadout.sci.gsfc.nasa.gov/?id=dspContent&cid=68",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The International Polar Orbiter Processing Package (IPOPP) is the primary processing package that will enable the Direct Readout community to process, visualize, and evaluate National Polar-orbiting Operational Environmental Satellite System (NPOESS) Preparatory Project (NPP) Sensor and Environmental Data Records, which is a necessity for the Direct Readout community during the transition from the Earth Observing System (EOS) era to the NPOESS era.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "Java"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "orbit",
      "determination",
      "tool",
      "formation",
      "flying",
      "exploration",
      "system",
      "mission",
      "analysis",
      "earth science",
      "Aqua",
      "Terra",
      "JPSS",
      "direct readout laboratory"
    ],
    "New Date": "",
    "Update_Date": "2014-09-16"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      ""
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "GEOS-5 GCM Modeling Software",
    "Internal Link": "",
    "External Link": "http://opensource.gsfc.nasa.gov/projects/GEOS-5/",
    "Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/GEOS-5/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Global Modeling and Assimilation Office (GMAO) has delivered the next generation general circulation model, GEOS-5. This system represents a new paradigm for systems development, in that GEOS-5 has been developed with the Earth System Modeling Framework (ESMF) for its internal architecture using the MAPL software toolkit developed for GEOS-5.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Stand-alone",
      "Atmosphere",
      "Land",
      "Ocean",
      "Coupled",
      "CGM",
      "Climate",
      "Biology",
      "Model",
      "Numerical",
      "Weather",
      "Prediction",
      "Experimental",
      "Seasonal",
      "Forecasting",
      "GEOS-5",
      "software",
      "earth science",
      "circulation",
      "analysis"
    ],
    "New Date": "",
    "Update_Date": "2014-09-16"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "djcinsb",
      "jjkparker",
      "qure0013",
      "space_egd",
      "stevenhughes",
      "wendys-dev",
      "dcooley",
      "dktkgks",
      "hykim9501",
      "jbez",
      "lindajun",
      "mhkim0522",
      "shawnhoffman",
      "tgrubb",
      "tnguye2"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "General Mission Analysis Tool (GMAT R2015a)",
    "Internal Link": "",
    "External Link": "http://gmat.gsfc.nasa.gov/",
    "Public Code Repo": "http://sourceforge.net/projects/gmat/files/GMAT/GMAT-R2015a/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The General Mission Analysis Tool (GMAT), developed at the Goddard Space Flight Center, is the world’s only enterprise, multi-mission, open source software system for space mission design, optimization, and navigation. The system supports missions in flight regimes ranging from low Earth orbit to lunar, libration point, and deep space missions. GMAT is developed by a team of NASA, private industry, public, and private contributors and is used for real-world mission support, engineering studies, as a tool for education, and public engagement.",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "Simulations",
      "visualization",
      "mathematics",
      "physics",
      "mission",
      "planning",
      "tool"
    ],
    "New Date": "",
    "Update_Date": "2015-11-02"
  },
  {
    "NASA Center": "Goddard Space Flight Center",
    "Program Teams": [
      ""
    ],
    "Contributors": [
      "bwiegand",
      "mhandy"
    ],
    "Sub-contractors": [
      ""
    ],
    "Software": "Goddard Mission Services Evolution Center Architecture (GMSEC) API",
    "Internal Link": "",
    "External Link": "http://sourceforge.net/projects/gmsec/",
    "Public Code Repo": "http://sourceforge.net/projects/gmsec/",
    "Instructional Material": "",
    "Stats": "",
    "Description": "The Goddard Mission Services Evolution Center (GMSEC) program was established in 2001 to coordinate ground and flight data systems development and services at GSFC with the ultimate goal to efficiently support current and future GSFC mission services. The GMSEC architecture is a ground systems architecture that spans the full mission lifecycle from development through operations. The architecture provides a secure, scalable and extensible communications and data system that supports all aspects of a mission from onboard processing through the Mission Operations Center (MOC) to public access on the Internet. The architecture includes an Application Programming Interface (API) and message bus to provide a publish and subscribe communication mechanism. The GMSEC architecture and source code are based on an enterprise architecture approach with a message-oriented cross-platform enterprise middleware (information software bus).",
    "Internal Code Repo": "",
    "License": [
      "NASA Open Source"
    ],
    "Languages": [
      "C++",
      "C",
      "Java",
      "Perl"
    ],
    "Platform Requirements": [
      ""
    ],
    "Dependent modules": [
      ""
    ],
    "Dependent module URLs": [
      ""
    ],
    "Component modules": [
      ""
    ],
    "Component module URLs": [
      ""
    ],
    "Industry": [
      ""
    ],
    "Functionality": [
      ""
    ],
    "Categories": [
      "mission",
      "support",
      "GMSEC",
      "API",
      "MOC",
      "ground",
      "data",
      "flight",
      "systems",
      "middleware"
    ],
    "New Date": "",
    "Update_Date": "2014-05-13"
  },
  {
    "NASA Center": "Langley Research Center",
    "Contributors": [
		"bjax"
	],
    "Software": "DAVEtools", 
    "External Link": "https://github.com/nasa/DAVEtools/wiki",
    "Public Code Repo": "https://github.com/nasa/DAVEtools",
    "Description": "A Java package, nominally built in NetBeans, that provides utilities for dynamic models written in ANSI/AIAA-S-119 DAVE-ML markup, including translation to Matlab(R) and Simulink(R). See http://www.daveml.org",
    "Languages": [
	"Java"
    ],
    "Industries": [
	"Flight simulation"
    ],
    "License": [
	"NASA Open Source"
    ],
    "Categories": [
	"Simulation",
	"Modeling",
	"Standards"
    ],
    "Update_Date": "2014-11-18"
  },
  {
    "NASA Center": "Johnson Space Center",
    "Contributors": [
      "alexlin0",
      "jmpenn"
    ],
    "Software": "Trick Simulation Environment",
    "External Link": "https://github.com/nasa/Trick/wiki",
    "Public Code Repo": "https://github.com/nasa/Trick",
    "Description": "The Trick Simulation Environment provides a framework and build utilities for creating high fidelity training and engineering simulations.  Trick simulations are designed for both real-time and non-realtime applications having both time-based scheduling requirements. Trick simulations may include math models, flight software, human input devices, and hardware control functions.  Trick provides the user with math model job scheduling, checkpoint/restore, data recording, batch input processing, and interactive variable manipulation.  Trick also includes tools to create plots and tables of simulation recorded data.", 
    "Languages": [
      "C++",
      "C",
      "Java",
      "Python",
      "Perl"
    ],
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Simulation","Framework"
    ],
    "Update_Date": "2015-02-10"
  },
  {
	"NASA Center": "Ames Research Center",
	"Contributors": [
		"sonielau"
	],
	"Software": "Java Path Finder", 
	"External Link": "http://babelfish.arc.nasa.gov/trac/jpf/wiki",
	"Public Code Repo": "http://babelfish.arc.nasa.gov/trac/jpf/wiki/install/repositories",
	"Description": "You might have noticed that we were a bit vague about what JPF actually is. It started as a software model checker, but nowadays there are various different execution modes and extensions, hence we have to explain what JPF does without getting lost in details of its application. What all JPF modes, which are runtime configured and not hardwired, have in common is that they are used to verify Java programs, to: find and explain defects, collect \"deep\" runtime information like coverage metrics, deduce interesting test vectors and create corresponding test drivers and many more... Although classic SW model checking is only one of these applications, it is still what JPF is mostly associated with. People often confuse this with testing, and indeed JPFs notion of model checking can be close to systematic testing, so we throw in a little example that illustrates the differences. See http://babelfish.arc.nasa.gov/trac/jpf/wiki/intro/start",
	"Languages": [
	"Java"
	],
	"Industries": [
	],
	"License": [
	"NASA Open Source"
	],
	"Categories": ["Model Checker"],
	"Update_Date": "2007-10-30"
},
{
    "NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Marshall MRMS Mosaic Python Toolkit (MMM-Py)",
    "External Link": "https://github.com/nasa/MMM-Py",
    "Public Code Repo": "https://github.com/nasa/MMM-Py",
    "Description": "The National Oceanic and Atmospheric Administration (NOAA) regularly produces national 3D radar reflectivity mosaics via its Multi-Radar/Multi-Sensor (MRMS) system. These mosaics are wonderful for storm and precipitation analysis and research, but they are distributed in odd formats that NOAA is ever changing. Sometimes you just want to read a file and make a plot! This is what MMM-Py is for. With it, you can read any version of the MRMS radar mosaics, past or present, and you can analyze, plot, subsection, and output custom mosaics of your own, which MMM-Py can ingest later. MMM-Py is free and open source. It is capable of producing publication-ready figures and analyses, but it also can do quicklook plots so you can check out the cool storm that just happened.",
    "Languages": [
      "Python"
    ],
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Analysis",
      "Visualization",
      "Toolkit",
      "MRMS",
      "Radar",
      "NMQ"
    ],
    "Update_Date": "2015-03-17"
},
{
    "NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Python Advanced Microwave Precipitation Radiometer Data Toolkit (PyAMPR)",
    "External Link": "https://github.com/nasa/PyAMPR",
    "Public Code Repo": "https://github.com/nasa/PyAMPR",
    "Description": "Download AMPR data from http://ghrc.nsstc.nasa.gov. AMPR brightness temperature data from NASA field projects are in ASCII format. This python script defines a class that will read in single file from an individual aircraft flight and pull out timing, brightness temperatures from each channel, geolocation, and other information and store them as attributes using numpy arrays of the appropriate type. The approach is to ingest the entire file as a text string and then parse and type convert as necessary. The file is read and the data are populated when the class is instantiated with the full path and name of an AMPR file. Numerous visualization methods are provided, including track plots, strip charts, and Google Earth KMZs. In addition, polarization deconvolution is available.",
    "Languages": [
      "Python"
    ],
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Analysis",
      "Visualization",
      "Toolkit",
      "Radiometer",
      "Airborne",
      "Precipitation",
      "AMPR"
    ],
    "Update_Date": "2015-03-17"
},
{
    "NASA Center": "Marshall Space Flight Center",
    "Contributors": [
      "tjlang"
    ],
    "Software": "Python Turbulence Detection Algorithm (PyTDA)",
    "External Link": "https://github.com/nasa/PyTDA",
    "Public Code Repo": "https://github.com/nasa/PyTDA",
    "Description": "This software provides Python functions that will estimate turbulence from Doppler radar data.",
    "Languages": [
      "Python"
    ],
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Analysis",
      "Doppler",
      "Toolkit",
      "Turbulence",
      "Radar"
    ],
    "Update_Date": "2015-03-17"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "BigView",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/bigview/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/bigView.tar.gz",
"Description": "BigView allows for interactive panning and zooming of images of arbitrary size on desktop PCs running linux. Additionally, it can work in a multi-screen environment where multiple PCs cooperate to view a single large image. Using this software, one can explore -- on relatively modest machines -- images such as the Mars Orbiter Camera mosaic [92160x33280 pixels].",
"License": [ "NASA Open Source" ],
"Categories": ["image processing", "composite", "image", "linux", "PC", "bigview"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Block-GP: Scalable Gaussian Process Regression",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/block-gp/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/BlockGP.tar.gz",
"Description": "Block GP is a Gaussian Process regression framework for multimodal data, that can be an order of magnitude more scalable than existing state-of-the-art nonlinear regression algorithms. The framework builds local Gaussian Processes on semantically meaningful partitions of the data and provides higher prediction accuracy than a single global model with very high confidence.",
"License": [ "NASA Open Source" ],
"Categories": ["guassian", "regression", "data", "multimodal", "algorithm", "block-GP", "scalable"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "CFD Utilities",
"External Link": "http://sourceforge.net/projects/cfdutilities/",
"Public Code Repo": "http://sourceforge.net/projects/cfdutilities/files/latest/download",
"Description": "The CFD Utility Software Library consists of nearly 30 libraries of Fortran 90 and 77 subroutines and almost 100 applications built on those libraries. Many of the utilities apply to multiblock structured grids and flow solutions, but numerous other reusable modules in such categories as interpolation, optimization, quadrature, rapid searching, and character manipulation appear from several decades of software development in the Aerodynamics Division and Space Technology Division at NASA Ames Research Center.",
"License": [ "NASA Open Source" ],
"Categories": ["CFD", "library", "data", "optimization", "interpolation", "application"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "CODE software framework",
"External Link": "http://www.nas.nasa.gov/Resources/Software/Open-Source/code.html",
"Public Code Repo": "http://www.nas.nasa.gov/Resources/Software/Open-Source/Downloads/Code/code-1_0b1.tar.gz",
"Description": "CODE is a software framework for control and observation in distributed environments. The basic functionality of the framework allows a user to observe a distributed set of resources, services, and applications. A user can also use the framework to manage distributed resources, services, and applications.",
"License": [ "NASA Open Source" ],
"Categories": ["observation", "control", "distributed environments", "application"],
"Update_Date": "2004-01-26"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Crisis Mapping Toolkit",
"External Link": "https://github.com/nasa/CrisisMappingToolkit",
"Public Code Repo": "https://github.com/nasa/CrisisMappingToolkit/archive/master.zip",
"Description": "The Crisis Mapping Toolkit (CMT) is a collection of tools for processing geospatial data (images, satellite data, etc.) into cartographic products that improve understanding of large-scale crises, such as natural disasters. The cartographic products produced by CMT include flood inundation maps, maps of damaged or destroyed structures, forest fire maps, population density estimates, etc. CMT is designed to rapidly process large-scale data using Google Earth Engine and other geospatial data systems.",
"License": [ "NASA Open Source" ],
"Categories": ["map", "crisis mapping toolkit", "CMT", "data processing", "Google Earth", "geospatial data systems"],
"Update_Date": "2015-05-04"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "E-Standards for Mass Properties Engineering",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/e-standards-mass-properties-engineering/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/MPE_E_Std_API_Distribution_2010_08_25.zip",
"Description": "The purpose of this Opensource forum is to promote the development of a JAVA based Application Programming Interface for the field of Mass Properties Engineering.",
"License": [ "NASA Open Source" ],
"Categories": ["java", "data object manipulation", "mass", "properties", "engineering"],
"Update_Date": "2015-05-04"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "EOS Clearinghouse (ECHO)",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/echo/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/ECHO501.zip",
"Description": "ECHO is a clearinghouse of Earth science Metadata under the EOS Program.",
"License": [ "NASA Open Source" ],
"Categories": ["earth science", "metadata", "EOS"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Geometry Manipulation Protocol (GMP)",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/gmp/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/gmp-1.0.0.tar.gz",
"Description": "The Geometry Manipulation Protocol (GMP) is a library which serializes datatypes between XML and ANSI C data structures to support CFD applications. This library currently provides a description of geometric configurations, general moving-body scenarios (prescribed and/or 6-DOF), and control surface settings.",
"License": [ "NASA Open Source" ],
"Categories": ["earth science", "geometry", "XML", "CFD", "ANSI C", "library", "GMP"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Growler",
"External Link": "http://growler.sourceforge.net/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/growler-0.3.5.tar.gz",
"Description": "Growler is a C++-based distributed object and event architecture. It is written in C++, and supports serialization of C++ objects as part of its Remote Method Invocation, Event Channels, and in its Interface Definition Language. Its primary application has been in support of interactive, distributed visualization, computational steering, and concurrent visualization, but it is a general purpose system for distributed programming.",
"License": [ "NASA Open Source" ],
"Categories": ["data visualization", "distributed", "object", "remote method invocation", "event channels", "IDL", "C++", "GMP"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "IND: Creation and Manipulation of Decision Trees from Data",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/ind/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/IND2.1.2.1-NASA-OSA.tar.gz",
"Description": "IND is applicable to most data sets consisting of independent instances, each described by a fixed length vector of attribute values. An attribute value may be a number, one of a set of attribute specific symbols, or omitted. One of the attributes is delegated the 'target' and IND grows trees to predict the target. Prediction can then be done on new data or the decision tree printed out for inspection.",
"License": [ "NASA Open Source" ],
"Categories": ["IND", "decision tree", "prediction", "data processing", "manipulation"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "IPG Execution Service",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/ipg/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/ipg-es-1.0.tar.gz",
"Description": "The Execution Service allows users to submit, monitor, and cancel complex jobs. Each job consists of a set of tasks that perform actions such as executing applications and managing data. Each task is executed based on a starting condition that is an expression on the states of other tasks. This formulation allows tasks to be executed in parallel and also allows a user to specify tasks to execute when other tasks succeed, fail or are cancelled.",
"License": [ "NASA Open Source" ],
"Categories": ["IPG", "execution service", "data management", "data processing", "parallel"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "JavaGenes",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/javagenes/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/JavaGenes.0.7.68.tar.gz",
"Description": "JavaGenes is a fairly general purpose evolutionary software system written in Java. It implements several versions of the genetic algorithm, simulated annealing, stochastic hill climbing and other search techniques. JavaGenes has been used to evolve molecules, atomic force field parameters, digital circuits, Earth Observing Satellite schedules, and antennas.",
"License": [ "NASA Open Source" ],
"Categories": ["java", "javagenes", "genetic", "algorithm", "search", "EOS"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Libibvpp",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/libibvpp/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/libibvpp-0.1.tar.gz",
"Description": "Libibvpp is a C++ wrapper around libibverbs, which is part of the OpenFabrics software suite (www.openfabrics.org).",
"License": [ "NASA Open Source" ],
"Categories": ["libibvpp", "openfabrics", "C++", "wrapper", "libibverbs"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Livingstone2",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/livingstone2/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/L2-OSA-unix_2.7.8.2.tar.gz",
"Description": "Livingstone2 is a reusable artificial intelligence (AI) software system designed to assist spacecraft, life support systems, chemical plants or other complex systems in operating robustly with minimal human supervision, even in the face of hardware failures or unexpected events. Livingstone2 diagnoses the current state of the spacecraft or other system and recommends commands or repair actions that will allow the system to continue operations.",
"License": [ "NASA Open Source" ],
"Categories": ["livingstone2", "artificial intelligence", "AI", "spacecraft", "life support", "autonomous", "diagnostics", "operation"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Mariana",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/mariana/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/Mariana_.tgz",
"Description": "Mariana is an algorithm that efficiently optimizes the hyperparameters for Support Vector Machines for regression and classification.",
"License": [ "NASA Open Source" ],
"Categories": ["mariana", "algorithm", "classification", "regression", "hyperparameters"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Mission Simulation ToolKit (MST)",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/mission-simulation-toolkit/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/MST_v1-0b.tgz",
"Description": "The MST is a simulation framework, supporting the development of autonomy technology for planetary exploration vehicles. The MST provides a software test bed which includes simulated robotic platforms, sensors, and environments.",
"License": [ "NASA Open Source" ],
"Categories": ["mission simulation toolkit", "MST", "autonomous", "planetary exploration", "robotics", "sensor", "test bed"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Multiple Kernel Anomaly Detection (MKAD) Algorithm",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/mkad/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/MKAD.tar.gz",
"Description": "The Multiple Kernel Anomaly Detection (MKAD) algorithm is designed for anomaly detection over a set of files.",
"License": [ "NASA Open Source" ],
"Categories": ["multiple kernel anomaly detection", "MKAD", "algorithm", "FOQA", "one class support vector machine", "OCSVM"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Multi-Fidelity Simulator (MFSim)",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/mfsim/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/MFSim1_0.zip",
"Description": "Multi-Fidelity Simulator, MFSim is a pluggable framework for creating an air traffic flow simulator at multiple levels of fidelity. The framework is designed to allow low-fidelity simulations of the entire US Airspace to be completed very quickly (on the order of seconds). The framework allows higher-fidelity plugins to be added to allow higher-fidelity simulations to occur in certain regions of the airspace concurrently with the low-fidelity simulation of the full airspace.",
"License": [ "NASA Open Source" ],
"Categories": ["multi-fidelity", "simulator", "MFS", "MFSim", "air traffic flow", "airspace", "aviation"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "NodeMon",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/nodemon/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/nodemon-0.3.3.tar.gz",
"Description": "NodeMon is a resource utilization monitor tailored to the Altix architecture, but is applicable to any Linux system or cluster. It allows distributed resource monitoring via the Growler software infrastructure. It is modular, with existing modules for monitoring of cpu, memory, network, and numalink activity.",
"License": [ "NASA Open Source" ],
"Categories": ["nodemon", "resource", "utilization", "monitor", "growler", "modular"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Optimal Alarm System Design and Implementation",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/optimalalarm/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/optalarm_osrelease.tar.gz",
"Description": "An optimal alarm system can robustly predict a level-crossing event that is specified over a fixed prediction horizon. The code contained in this packages provides the tools necessary to design an optimal alarm system for a simple stationary linear dynamic system driven by white Gaussian noise.",
"License": [ "NASA Open Source" ],
"Categories": ["optimal", "alarm", "system", "prediction", "design"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Peter Mehlitz"],
"Software": "PathDroid",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/pathdroid/",
"Public Code Repo": "http://babelfish.arc.nasa.gov/hg/jpf/jpf-pathdroid",
"Description": "Pathdroid is a framework to analyze binary Android applications for program defects and malicious behaviors. Pathdroid is based on the Java Pathfinder (JPF) verification system (http://babelfish.arc.nasa.gov/trac/jpf), and thus provides model checking capabilities for applications that are distributed as standard Android .dex or .apk files.",
"License": [ "NASA Open Source" ],
"Categories": ["pathdroid", "JPF", "java pathfinder", "java", "verification", "model checking"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Pour",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/pour/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/ipg-pour-1.0.tar.gz",
"Description": "Pour is a general-purpose information service framework designed to accommodate a wide variety of information types with support for high volume, low frequency periodic updates, user-specified updates, and automatic updates collected on-demand when needed. Information is stored exclusively in XML and retrieved using standard XPath queries over a single unified namespace independent of the information's source.",
"License": [ "NASA Open Source" ],
"Categories": ["pour", "xml", "xpath", "information service"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "QuIP",
"External Link": "http://scanpath.arc.nasa.gov/quip/",
"Public Code Repo": "http://scanpath.arc.nasa.gov/quip/quip-0.11.tar.gz",
"Description": "QuIP (QUick Image Processing) is an interpreter for image processing, graphics, psychophysical experimentation and general scientific computing.",
"License": [ "NASA Open Source" ],
"Categories": ["quip", "quick", "image processing", "graphics", "scientific computing"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "ROBUS-2",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/robus-2/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/robus2.zip",
"Description": "The ROBUS-2 Protocol Processor (RPP) is a custom-designed hardware component implementing the functionality of the ROBUS-2 fault-tolerant communication system. The Reliable Optical Bus (ROBUS) is the core communication system of the Scalable Processor-Independent Design for Enhanced Reliability (SPIDER), a general-purpose fault-tolerant integrated modular architecture currently under development at NASA Langley Research Center. ROBUS is a time-division multiple access (TDMA) broadcast communication system with medium access control by means of time-indexed communication schedule. ROBUS-2 is a developmental version of the ROBUS providing guaranteed fault-tolerant services to the attached processing elements (PEs), in the presence of a bounded number of faults.",
"License": [ "NASA Open Source" ],
"Categories": ["robus-2", "robus", "rpp", "spider", "processing elements", "TDMA", "fault tolerant", "fault-tolerant"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "sequenceMiner",
"External Link": "https://c3.ndc.nasa.gov/dashlink/algorithm/sequenceminer-algorithm/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/SequenceMiner.tar.gz",
"Description": "sequenceMiner was developed to address the problem of detecting and describing anomalies in large sets of high-dimensional symbol sequences. sequenceMiner works by performing unsupervised clustering (grouping) of sequences using the normalized longest common subsequence (LCS) as a similarity measure, followed by a detailed analysis of outliers to detect anomalies. sequenceMiner utilizes a new hybrid algorithm for computing the LCS that has been shown to outperform existing algorithms by a factor of five. sequenceMiner also includes new algorithms for outlier analysis that provide comprehensible indicators as to why a particular sequence was deemed to be an outlier. This provides analysts with a coherent description of the anomalies identified in the sequence, and why they differ from more 'normal' sequences.",
"License": [ "NASA Open Source" ],
"Categories": ["sequenceMiner", "detection", "cluster", "longest common sequence", "LCS", "algorithm", "outlier"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Self-Healing Independent File Transfer (Shift)",
"External Link": "http://ti.arc.nasa.gov/opensource/projects/shift/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/shift-3.1.tgz",
"Description": "Shift is a lightweight framework for high performance local and remote file transfers that provides resiliency across a wide variety of failure scenarios through various techniques. These include end-to-end integrity via cryptographic hashes, throttling of transfers to prevent resource exhaustion, balancing transfers across resources based on load and availability, and parallelization of transfers across multiple source and destination hosts for increased redundancy and performance.",
"License": [ "NASA Open Source" ],
"Categories": ["shift", "file transfer", "data transfer", "parallel", "Self-Healing Independent File Transfer"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "SLAB Spatial Audio Renderer",
"External Link": "http://human-factors.arc.nasa.gov/SLAB/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/SLABv5_8_1.msi",
"Description": "SLAB is a software-based, real-time virtual acoustic environment rendering system being developed as a tool for the study of spatial hearing. SLAB is designed to work in the personal computer environment to take advantage of the low-cost PC platform while providing a flexible, maintainable, and extensible architecture to enable the quick development of experiments. The software provides an API (Application Programming Interface) for specifying the acoustic scene as well as an extensible architecture for exploring multiple rendering strategies.",
"License": [ "NASA Open Source" ],
"Categories": ["slab", "render", "acoustic", "spatial hearing", "api"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Surfer",
"External Link": "http://www.nas.nasa.gov/~kolano/projects/surfer.html",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/ipg-surfer-1.0.tar.gz",
"Description": "Surfer is an extensible framework designed to select and rank grid resources where a resource is defined to be anything that may need selecting such as compute resources, storage resources, data resources, etc.",
"License": [ "NASA Open Source" ],
"Categories": ["surfer", "resource", "data", "ranking"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Swim",
"External Link": "http://people.nas.nasa.gov/~kolano/projects/swim.html",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/ipg-swim-1.0.tar.gz",
"Description": "Swim is a software information service for the grid built on top of Pour, which is an information service framework developed at NASA. Swim provides true software resource discovery integrated with the tools used by administrators to install software.",
"License": [ "NASA Open Source" ],
"Categories": ["swim", "resource", "discovery", "information service"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Dennis Koga"],
"Software": "Inference Kernel for Open Static Analyzers (IKOS)",
"External Link": "http://ti.arc.nasa.gov/opensource/ikos/",
"Public Code Repo": "http://ti.arc.nasa.gov/m/opensource/downloads/ikos/ikos_arbos.0.1.tar.gz",
"Description": "IKOS is a C++ library designed to facilitate the development of sound static analyzers based on Abstract Interpretation. Specialization of a static analyzer for an application or family of applications is critical for achieving both precision and scalability. Developing such an analyzer is arduous and requires significant expertise in Abstract Interpretation. ",
"License": [ "NASA Open Source" ],
"Categories": ["C++", "library", "IKOS", "static analyzer", "application", "abstract interpretation"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Nikunj Oza"],
"Software": "Advanced Diagnostics and Prognostics Testbed (ADAPT)",
"External Link": "https://dashlink.arc.nasa.gov/data/adapt-an-electrical-power-system-testbed/",
"Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/Exp_BN.tar.gz",
"Description": "The IVHM Project in the Aviation Safety Program has funded research in electrical power system (EPS) health management. This problem domain contains both discrete and continuous behavior, and thus is directly relevant for the hybrid diagnostic tool HyDE. In FY2007 work was performed to expand the HyDE diagnosis model of the ADAPT system. The work completed resulted in a HyDE model with the capability to diagnose five times the number of ADAPT components than was previously tested. The expanded diagnosis model passed a corresponding set of new ADAPT fault injection scenario tests with no incorrect faults reported. The time required for the HyDE diagnostic system to isolate the fault varied widely between tests; this variance was reduced by tuning of the HyDE input parameters. These results and other diagnostic design tradeoffs are discussed. Finally, possible future improvements for both the HyDE diagnostic model and HyDE itself are presented.",
"License": [ "NASA Open Source" ],
"Categories": ["electrical power system", "IVHM", "testbed", "ADAPT", "diagnostics", "prognostics"],
"Update_Date": "2008-05-30"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Nikunj Oza"],
"Software": "C-MAPSS Aircraft Engine Simulator",
"External Link": "https://dashlink.arc.nasa.gov/",
"Public Code Repo": "https://dashlink.arc.nasa.gov/",
"Description": "The data provided is from a high fidelity system level engine simulation designed to simulate nominal and fault engine degradation over a series of flights. The flights are full flight recording sampled at 1 Hz and consists of 30 engine and flight condition parameters. Each flight contains 7 unique flight conditions for an approximately 90 min flight including ascent to cruise at 35K ft and descent back to sea level. The simulated data was created with a Matlab Simulink tool called C-MAPSS.",
"License": [ "NASA Open Source" ],
"Categories": ["engine", "aircraft", "simulation", "health"],
"Update_Date": "2009-06-09"
},
{
"NASA Center": "Glenn Research Center",
"Contributors": ["Nikunj Oza"],
"Software": "Disk Defect Data",
"External Link": "https://dashlink.arc.nasa.gov/data/disk-defect-data/",
"Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/DefectDisk-Data.tar.gz",
"Description": "The Rotary Dynamics Laboratory at NASA Glenn Research Center. The lab has acquired data on simulated engine disks for the purpose of developing crack detection schemes. They have taken data on a baseline disk and on a disk that has a fairly large crack introduced on it. The data consists of blade tip clearance measurements acquired at several speeds for a given duration. The intent is to see if one can detect the change in the center of mass of the disk due to the crack.",
"License": [ "NASA Open Source" ],
"Categories": ["disk", "defect", "systems", "health"],
"Update_Date": "2009-02-01"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Nikunj Oza"],
"Software": "FLTz",
"External Link": "https://dashlink.arc.nasa.gov/data/fltz/",
"Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/FLTz.tar.gz",
"Description": "The IFC data set is a simulated data set based on the flight simulator 'FLTz' used by the Intelligent Flight Control group at NASA Ames Research Center. Flights were preprogrammed to fly through randomly generated circular flight paths starting from San Francisco International Airport (SFO) and ending at approximately the same location. Flights include 4 stages of flight takeoff, climb, cruise, and descent and consist of 37 parameters. There are a total of 20 flights, which range from 15 to 40 mins and are sampled at a rate of 1Hz. The flights were generated by programming in the climb/decent rate, cruise and altitude into the flight manage computer and used the auto pilot to track the flight path waypoints.",
"License": [ "NASA Open Source" ],
"Categories": ["flight", "simulation", "simulator", "IFC", "intelligent flight control"],
"Update_Date": "2009-06-01"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Nikunj Oza"],
"Software": "SIAM 2007 Text Mining Competition data set",
"External Link": "https://dashlink.arc.nasa.gov/data/siam-2007-text-mining-competition-dataset/",
"Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/TestData.txt.gz",
"Description": "This is the dataset used for the SIAM 2007 Text Mining Competition. This is a subset of the Aviation Safety Reporting System (ASRS) dataset.",
"License": [ "NASA Open Source" ],
"Categories": ["aviation", "safety", "reporting", "system", "text mining"],
"Update_Date": "2009-02-03"
},
{
"NASA Center": "Ames Research Center",
"Contributors": ["Nikunj Oza"],
"Software": "Turbofan engine degradation simulation",
"External Link": "https://dashlink.arc.nasa.gov/data/siam-2007-text-mining-competition-dataset/",
"Public Code Repo": "https://dashlink.arc.nasa.gov/static/dashlink/media/dataset/TestData.txt.gz",
"Description": "Run-to-failure data: Engine degradation simulation was carried out using C-MAPSS tool. Four different sets were simulated under different combinations of operational conditions and fault modes. Several sensor channels were recorded to characterize fault evolution.",
"License": [ "NASA Open Source" ],
"Categories": ["aviation", "engine", "degradation", "simulation", "turbofan"],
"Update_Date": "2009-03-18"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Troy Ames"],
"Software": "Interoperable Remote Component (IRC)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/IRC/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/IRC/irc_v6.zip",
"Description": "IRC architecture is a flexible, platform-independent application framework that is well suited for the distributed control and monitoring of remote devices and sensors.",
"License": [ "NASA Open Source" ],
"Categories": ["IRC", "control", "monitoring", "framework"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["David Gaylor"],
"Software": "Java Astrodynamics Toolkit (JAT)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/JAT/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/JAT/JAT.zip",
"Description": "The Java Astrodynamics Toolkit (JAT) is an open source software library of reusable software components for space mission design, trajectory optimization, and analysis of navigation, guidance and control systems.",
"License": [ "NASA Open Source" ],
"Categories": ["JAT", "astrodynamics", "navigation", "space mission design", "simulation"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Christa Peters-Lidard"],
"Software": "Land Information System Verification Toolkit (LVT)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/LVT/index.php",
"Public Code Repo": "http://lis.gsfc.nasa.gov/LVT/LVT_sourcecode.php",
"Description": "The Land Information System Verification Toolkit (LVT) is a hybrid Fortran90 and C software tool designed to enable the evaluation, analysis and comparison of outputs generated by the Land Information System (LIS). LIS is a software framework to support land surface modeling and data assimilation.",
"License": [ "NASA Open Source" ],
"Categories": ["LVT", "LIS", "land surface", "verification", "data analysis"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Joseph Howard"],
"Software": "Matlab-CodeV Toolkit",
"External Link": "http://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/Matlab_Code_V/CodeV%20v2007a.zip",
"Description": "Matlab-CodeV toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
"License": [ "NASA Open Source" ],
"Categories": ["matlab", "CodeV", "optical", "modeling", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Joseph Howard"],
"Software": "Matlab-OSLO Toolkit",
"External Link": "http://opensource.gsfc.nasa.gov/projects/Matlab/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/Matlab/Matlab_OSLO.zip",
"Description": "Matlab-OSLO toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
"License": [ "NASA Open Source" ],
"Categories": ["matlab", "OSLO", "optical", "modeling", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Joseph Howard"],
"Software": "Matlab-zemax Toolkit",
"External Link": "http://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/Matlab_Zemax/15151%20ZEMAX%20v2007a.zip",
"Description": "Matlab-Zemax toolkit: software enabling rapid transfer of optical modeling data into the Matlab environment for custom performance analyses, integrated modeling, wavefront sensing and control operations, and systems modeling.",
"License": [ "NASA Open Source" ],
"Categories": ["matlab", "zemax", "optical", "modeling", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "Metadata Check",
"External Link": "http://opensource.gsfc.nasa.gov/projects/metacheck/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/metacheck/MetCheck.zip",
"Description": "Metadata Check is a command-line tool to check EOS metadata with metadata descriptor. The tool takes metadata and its descriptor as input and generates a output file containing the check results.",
"License": [ "NASA Open Source" ],
"Categories": ["metadata", "EOS", "data validation"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Timothy Carnahan"],
"Software": "MYSTRAN",
"External Link": "http://opensource.gsfc.nasa.gov/projects/mystran/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/mystran/MYSTRAN-FEA-Program.zip",
"Description": "MYSTRAN provides a way to perform static and modal analysis of structures using classical FEA techniques.",
"License": [ "NASA Open Source" ],
"Categories": ["model analysis", "FEA", "Finite Element Analysis", "computer aided engineering"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["David Matusow"],
"Software": "NASA Image 2000",
"External Link": "http://opensource.gsfc.nasa.gov/projects/nasaimage2000/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/nasaimage2000/i2ksetup.zip",
"Description": "The purpose of NASA Image2000 is to provide a host-independent image processing system for students and educators using tutorials developed by SEE and the Center for Image Processing in Education (CIPE).",
"License": [ "NASA Open Source" ],
"Categories": ["image processing", "CIPE", "education"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Denis Nadeau"],
"Software": "Obs4MIPS",
"External Link": "http://opensource.gsfc.nasa.gov/projects/obs4mips/index.php",
"Public Code Repo": "https://svn.apache.org/repos/asf/incubator/climate/trunk/obs4MIPs/",
"Description": "Obs4MIPS onverts different scientific data formats into CF-compliant netCDF standardized files, as specified by the CMIP5 project, or publication into the Earth System Grid Federation (ESGF).",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "CMIPS", "ESGF", "climate", "earth science"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "ODL to XML Converter",
"External Link": "http://opensource.gsfc.nasa.gov/projects/ODL_XML/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/ODL_XML/odl_java.tgz",
"Description": "Converts an HDF-EOS ODL metadata file into appropriate XML. Written in Java.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "XML", "ODL"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Peter MacNiece"],
"Software": "PARAMESH",
"External Link": "http://opensource.gsfc.nasa.gov/projects/paramesh/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/paramesh/paramesh3.3_beta.tar.gz",
"Description": "PARAMESH is a package of Fortran 90 subroutines designed to provide an application developer with an easy route to extend an existing serial code which uses a logically cartesian structured mesh into a parallel code with adaptive mesh refinement (AMR).",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "adaptive mesh refinement", "AMR"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Thomas Clune"],
"Software": "pFUnit",
"External Link": "http://opensource.gsfc.nasa.gov/projects/FUNIT/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/FUNIT/pFUnit.tar",
"Description": "pFunit is a Fortran analog to various other xUnit testing frameworks which have been developed within the software community,and is intended to enable test driven development (TDD) within the scientific/technical programming community.",
"License": [ "NASA Open Source" ],
"Categories": ["testing", "test driven development", "software development"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Jane Hayes"],
"Software": "Requirements Tracing On Target (RETRO)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/RETRO/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/RETRO/Retro_20081205s.zip",
"Description": "Requirements Tracing On target (RETRO) assists users in tracing textual software engineering artifacts to each other using standard information retrieval techniques.",
"License": [ "NASA Open Source" ],
"Categories": ["RETRO", "requirements tracing", "software development", "information retrieval"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Gene Feldman"],
"Software": "SeaDAS",
"External Link": "http://opensource.gsfc.nasa.gov/projects/seadas/index.php",
"Public Code Repo": "http://seadas.gsfc.nasa.gov/installers/",
"Description": "The SeaWiFS Data Analysis System (SeaDAS) is a comprehensive image analysis package for the processing, display, analysis, and quality control of ocean color data.",
"License": [ "NASA Open Source" ],
"Categories": ["SeaDAS", "image analysis", "quality control", "ocean color", "image processing"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Robert Candey"],
"Software": "Space Physics Data Facility Web Services (SPDWFS)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/spdfws/index.php",
"Public Code Repo": "http://spdf.gsfc.nasa.gov/dev_services.html",
"Description": "The Space Physics Data Facility (SPDF) Web services provides a distributed programming interface to a portion of the SPDF software. This programming interface conforms to all applicable Web services specifications (especially the SOAP recommendations) of the World Wide Web Consortium (W3C). The interface is specified by a Web Services Description Language (WSDL) file.",
"License": [ "NASA Open Source" ],
"Categories": ["Space physics data facility", "api", "SPDF", "World Wide Web Consortium", "W3C", "SOAP"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Robert Candey"],
"Software": "TIPSOD",
"External Link": "http://opensource.gsfc.nasa.gov/projects/tipsod/index.php",
"Public Code Repo": "http://sscweb.gsfc.nasa.gov/tipsod/",
"Description": "TIPSOD is a software application designed for interactive, animated, 4D (space and time) visualization of satellite orbits. It utilizes the SSCWeb services programming interface to communicate with SSC logic and database over the open protocols of the internet.",
"License": [ "NASA Open Source" ],
"Categories": ["TIPSOD", "4D", "application", "data visualization", "satellite", "orbit"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "User Friendly Metadata (UFM)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/UFM/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/UFM/UFM.zip",
"Description": "The User-friendly Metadata (UFM) tool functions as a filter, taking input from standard input (STDIN) and writing output to standard output (STDOUT) and/or standard error (STDERR).",
"License": [ "NASA Open Source" ],
"Categories": ["UFM", "metadata", "STDIN", "standard", "input", "output"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Dalia Kirschbaum"],
"Software": "Vectorization of Global Flood Monitoring System using TopoJSON",
"External Link": "http://opensource.gsfc.nasa.gov/projects/vgfms/index.php",
"Public Code Repo": "http://ojo-streamer.herokuapp.com/",
"Description": "Allows for the generation of vectors by reading the Global Flood Monitoring data, processing the data and generating a TopoJSON encoded file.",
"License": [ "NASA Open Source" ],
"Categories": ["global flood monitoring system", "topojson", "vector", "GFMS"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Ryan Boller"],
"Software": "Worldview",
"External Link": "http://opensource.gsfc.nasa.gov/projects/worldview/index.php",
"Public Code Repo": "https://github.com/nasa-gibs/worldview",
"Description": "Interactive satellite imagery browsing and downloading tool.",
"License": [ "NASA Open Source" ],
"Categories": ["data visualization","imagery", "satellite"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "XML to HDF-EOS Converter",
"External Link": "http://opensource.gsfc.nasa.gov/projects/xml2he/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/xml2he/xml2he5.tar.gz",
"Description": "Program that takes an XML representation of the contents of an HDF-EOS file and recreates the file from that description.",
"License": [ "NASA Open Source" ],
"Categories": ["XML","HDF", "EOS", "converter", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "XML to ODL Converter",
"External Link": "http://opensource.gsfc.nasa.gov/projects/xml2odl/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/xml2odl/xml2odl.zip",
"Description": "Converts an XML file to an HDF-EOS ODL metadata file.",
"License": [ "NASA Open Source" ],
"Categories": ["XML","ODL", "converter", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "CFITSIO",
"External Link": "http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html",
"Public Code Repo": "ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio_latest.tar.gz",
"Description": "CFITSIO is a library of C and Fortran subroutines for reading and writing data files in FITS (Flexible Image Transport System) data format. CFITSIO provides simple high-level routines for reading and writing FITS files that insulate the programmer from the internal complexities of the FITS format. CFITSIO also provides many advanced features for manipulating and filtering the information in FITS files.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "FITS", "flexible image transport system"],
"Update_Date": "2015-02-10"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "WCS FITS library",
"External Link": "http://tdc-www.harvard.edu/software/wcstools/",
"Public Code Repo": "http://tdc-www.harvard.edu/software/wcstools/wcstools-3.9.1.tar.gz",
"Description": "The WCS FITS library provides support for reading and writing primary images and reading extension data. It is quite compact, requiring only four files in the distribution. The package is particularly complete in reading header information, and of course in dealing with FITS World Coordinate System (WCS) information. A small addition allows the reading of IRAF format data.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "FITS", "flexible image transport system", "world coordinate system", "WCS"],
"Update_Date": "2015-01-13"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "fitsy/funtools",
"External Link": "https://github.com/ericmandel/funtools",
"Public Code Repo": "https://github.com/ericmandel/funtools/blob/master/INSTALL",
"Description": "This is a small C library for FITS I/O originally written by John Roll at SAO. It is now maintained and distributed as part of the FUNTOOLS utility package.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "FITS", "flexible image transport system", "SAO", "FUNTOOLS"],
"Update_Date": "2015-03-10"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "qfits",
"External Link": "http://www.eso.org/sci/software/eclipse/qfits/",
"Public Code Repo": "http://www.eso.org/sci/software/eclipse/distrib/index.html",
"Description": "The qfits library is a small, portable C library that provides low level support for accessing FITS images, headers and tables.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "FITS", "flexible image transport system", "qfits"],
"Update_Date": "2007-01-22"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Phil Newman"],
"Software": "CCfits Library",
"External Link": "http://heasarc.gsfc.nasa.gov/fitsio/CCfits/",
"Public Code Repo": "http://heasarc.gsfc.nasa.gov/fitsio/CCfits/CCfits-2.4.tar.gz",
"Description": "The CCfits library is build on top of CFITSIO and provides an interface that allows the user to manipulate FITS data through high-level object-oriented building blocks.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "data", "CFITSIO", "FITS", "flexible image transport system", "SAO", "CCfits"],
"Update_Date": "2011-12-09"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "AIPS++FITS Library",
"External Link": "http://www.cv.nrao.edu/fits/src/",
"Public Code Repo": "http://www.cv.nrao.edu/fits/src/c++fits-09.076.tar.gz",
"Description": "The AIPS++ FITS library is available separately from the AIPS++ distribution.  Currently there is limited documentation.  This defines a set of C++ objects to read and write FITS files.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "data", "FITS", "flexible image transport system", "AIPS++FITS", "AIPS++"],
"Update_Date": "1997-10-01"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "CSharpFITS",
"External Link": "http://vo.iucaa.ernet.in/~voi/CSharpFITS.html",
"Public Code Repo": "http://vo.iucaa.ernet.in/~voi/CSharpFITS_v1.1_source.zip",
"Description": "The CSharpFITS package is a pure C# .NET port of Tom McGlynn's nom.tam.fits Java package. It provides native C# support for reading and writing FITS files. It also supports writing FITS binary tables directly from database result streams.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "data", "CSharpFITS", "FITS", "flexible image transport system", "C#"],
"Update_Date": "2008-01-16"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "FitsLib",
"External Link": "http://vo.iucaa.ernet.in/~voi/CSharpFITS.html",
"Public Code Repo": "http://www.cs.jhu.edu/~haridas/tech/Fits/Downloads/1.3/FitsLib/Debug/FitsLib.dll",
"Description": "FitsLib aims to provide an interface to the FITS file on the Dot Net Platform. It is built as an object oriented wrapper around the CFITSIO library's interface to the FITS files.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "data", "Fitslib", "FITS", "flexible image transport system", "C#"],
"Update_Date": "2004-01-08"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Theodore Gull"],
"Software": "IDLAstro",
"External Link": "http://idlastro.gsfc.nasa.gov/fitsio.html",
"Public Code Repo": "https://github.com/wlandsman/IDLAstro/archive/master.zip",
"Description": "TThe IDL Astronomy Library contains four different sets of procedures for reading, writing, and modifying FITS files. The reason for having four different methods of FITS I/O with IDL is partly historical, as different groups developed the software independently. However, each method also has its own strengths and weakness for any particular task. For example, the procedure MRDFITS() -- which can read a FITS table into an IDL structure --is the easiest procedure for analyzing FITS files at the IDL prompt level (provided that one is comfortable with IDL structures). But mapping a table into an IDL structure includes extra overhead, so that when performing FITS I/O at the procedure level, it may be desirable to use more efficient procedures such as FITS_READ and FTAB_EXT.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "MRDFITS","MWRFITS", "FITS", "flexible image transport system", "IDL", "IDLAstro", "FX*", "FITS_*", "FTAB_*", "READFITS", "WRITEFITS"],
"Update_Date": "2013-11-30"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Theodore Gull"],
"Software": "IUEDAC",
"External Link": "http://archive.stsci.edu/iue/iuedacfits.html",
"Public Code Repo": "http://archive.stsci.edu/pub/iue/software/iuedac/mac/INSTALL.mac",
"Description": "Package of IDL routines developed to read and write IUE (International Ultraviolet Explorer) data.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "IDL", "IUE", "international ultraviolet explorer"],
"Update_Date": "1999-06-30"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "nom-tam-fits",
"External Link": "http://heasarc.gsfc.nasa.gov/docs/heasarc/fits/java/",
"Public Code Repo": "https://github.com/nom-tam-fits/nom-tam-fits/archive/master.zip",
"Description": "A full function 100% Java library for reading and writing FITS files.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "java"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Phil Newman"],
"Software": "eap.fits",
"External Link": "http://swift.gsfc.nasa.gov/sdc/software/java/",
"Public Code Repo": "http://swift.gsfc.nasa.gov/sdc/java/fits1.3.jar",
"Description": "Includes an applet and application for viewing and editing FITS files. Also includes a general purpose package for reading and writing FITS data. It can read PGP encrypted files if the optional PGP jar file is available.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "java", "swift quick-look"],
"Update_Date": "2012-05-08"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "jfits",
"External Link": "http://www.hq.eso.org/~pgrosbol/fits_java/jfits.html",
"Public Code Repo": "http://www.hq.eso.org/~pgrosbol/fits_java/jfits-0.94.jar",
"Description": "The jfits library supports FITS images and ASCII and binary tables. In-line modification of keywords and data is supported.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "java", "binary", "ASCII"],
"Update_Date": "2008-05-16"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "Starlink/starjava",
"External Link": "https://github.com/Starlink/starjava",
"Public Code Repo": "https://github.com/Starlink/starjava/archive/master.zip",
"Description": "STIL/starlink is a pure Java library for generic input, output and processing of tabular data. It presents to the application programmer a view of a table which looks the same regardless of whether it came from a FITS file, a VOTable, an ASCII text file, a query on a relational database, or whatever.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "java", "binary", "STIL", "starlink"],
"Update_Date": "2008-05-16"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "fitsjs",
"External Link": "https://github.com/astrojs/fitsjs/",
"Public Code Repo": "https://github.com/astrojs/fitsjs/archive/master.zip",
"Description": "A standalone JavaScript library for reading the FITS astronomical file format. This library is built for modern browsers supporting the DataView object. These include at least Chrome 9, Firefox 15, and Safari 6. This library may be used to read various forms of the FITS format. This implementation is under active development. In its current state it supports the following: reading of multiple header data units, reading of FITS images, reading of data cubes, reading of binary tables, reading of ASCII Tables, and decompressing images using the Rice algorithm. ",
"License": [ "NASA Open Source" ],
"Categories": ["data compression", "data", "FITS", "flexible image transport system", "javascript", "binary", "ASCII", "rice algorithm"],
"Update_Date": "2015-04-16"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "CFITSIO.pm",
"External Link": "http://search.cpan.org/~pratzlaff/Astro-FITS-CFITSIO-1.10/",
"Public Code Repo": "http://search.cpan.org/~pratzlaff/Astro-FITS-CFITSIO-1.10/CFITSIO.pm",
"Description": "A Perl module incorporating the CFITSIO library has been developed using XS wrappers. Most useful CFITSIO calls have direct Perl counterparts. Users will need the C version of CFITSIO to link to.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "CFITSIO","perl"],
"Update_Date": "2013-06-06"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "PDL FITS capabilities",
"External Link": "http://www.cpan.org/modules/by-module/PDL/",
"Public Code Repo": "http://www.cpan.org/modules/by-module/PDL/Data-Frame-0.003.tar.gz",
"Description": "A FITS reader is provided within the Perl Data Language module.  It handles FITS images and binary tables. PDL is a Perl module providing mechanisms to manipulate arrays of data efficiently.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "CFITSIO","perl", "binary"],
"Update_Date": "2014-12-30"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "MFITSIO",
"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#mfitsio",
"Public Code Repo": "http://fits.gsfc.nasa.gov/software/mfitsio-1.2.4-src.tar.gz",
"Description": "Damian Eads (at Los Alamos at that time) wrote a MatLab interface to the CFITSIO library using a tool called 'mex'. MFITSIO supports reading and writing FITS images, image subsets, and headers. (UPDATE, June 2013: MFITSIO is no longer available from the Los Alamos web site, however, the last version (1.2.4) of the MFITSIO source code .tar file has been retrieved from the Internet Archive WayBack Machine and made available here. The mfitsio interface has not been maintained for many years, and some users have reported problems with installing the software.)",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "MFITSIO", "matlab"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "GFITSIO",
"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#LabVIEW",
"Public Code Repo": "http://fits.gsfc.nasa.gov/software/gfitsio_v5.2_Apr_2014.zip",
"Description": "George Gatling (NRL, email = george.gatling  'at' nrl.navy.mil) wrote an interface to the CFITSIO library for LabVIEW 2013 or later under Microsoft Windows . It supports reading and writing FITS images and ASCII and binary tables.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "GFITSIO", "binary", "Labview"],
"Update_Date": "2014-04-30"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "PyFITS",
"External Link": "http://www.stsci.edu/institute/software_hardware/pyfits/",
"Public Code Repo": "http://docs.astropy.org/en/stable/io/fits/index.html#module-astropy.io.fits",
"Description": "PyFITS is a set of Python modules which read and write most FITS formats.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "python", "binary"],
"Update_Date": "2014-07-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "Python/fitsio",
"External Link": "https://github.com/esheldon/fitsio",
"Public Code Repo": "https://github.com/esheldon/fitsio/archive/master.zip",
"Description": "fitsio is a full featured python library to read and write data to FITS files. This is a python extension written in c and python. Data are read into numerical python arrays. A version of cfitsio is bundled with this package, which is used, in particular, to read and write images in tile-compressed format.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "python", "cfitsio", "fitsio"],
"Update_Date": "2015-04-17"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "PFITS",
"External Link": "https://pypi.python.org/pypi/pfits",
"Public Code Repo": "https://pypi.python.org/packages/source/p/pfits/pfits-0.0.2.tar.gz",
"Description": "This package uses the CFITSIO library to interface to FITS files from Python. Particular attention has been paid to supporting ASCII and BINARY tables with fixed and variable-length entries. Data I/O is handled through numpy arrays. Note: this library appears to not have been updated since 2009 and may no longer be supported.",
"License": [ "NASA Open Source" ],
"Categories": ["data conversion", "data", "FITS", "flexible image transport system", "python", "ASCII", "PFITS", "binary"],
"Update_Date": "2009-04-08"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "FITSload",
"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#IgorPro",
"Public Code Repo": "http://fits.gsfc.nasa.gov/FITSLoad-104-Mac.tar.gz",
"Description": "IGOR Pro is a scientific graphing, data analysis, image processing and programming software tool for scientists and engineers, similar to Mathematica. The user-contributed FITSload XOP (external operation) loads FITS files into IGOR for further analysis. FITSload uses the CFITSIO library to read the FITS file. As of Igor version 6.12, FITS files can be read natively via Data > Load Waves > Packages > Load FITS.",
"License": [ "NASA Open Source" ],
"Categories": ["data visualization", "data", "FITS", "flexible image transport system", "IGOR Pro", "mathematica", "FITSload"],
"Update_Date": "2014-11-18"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "fitsio",
"External Link": "http://fits.gsfc.nasa.gov/fits_libraries.html#Rlang",
"Public Code Repo": "http://www.astro.umd.edu/~harris/r/FITSio_2.0-0.zip",
"Description": "FITSio is a contributed R package for reading and writing FITS images and reading binary tables within the R software environment. It has no dependencies other than the base R installation. The FITSio contributed package source code is available directly from the R project web site under the 'contributed extension packages' link.",
"License": [ "NASA Open Source" ],
"Categories": ["data visualization", "data", "FITS", "flexible image transport system", "R language", "FITSio"],
"Update_Date": "2015-05-06"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "ESA/ESO/NASA FITS Liberator",
"External Link": "http://www.spacetelescope.org/projects/fits_liberator/",
"Public Code Repo": "http://www.spacetelescope.org/projects/fits_liberator/download_v301/",
"Description": "Liberator is a free plug-in for Adobe Photoshop or Photoshop Elements 2 for manipulating FITS images with those programs. A color composite 'Action' file is also available to simplify the process of creating color composite images from 3 separate red, green, and blue images.",
"License": [ "NASA Open Source" ],
"Categories": ["data visualization", "image processing", "data", "FITS", "flexible image transport system", "ESA", "ESO", "liberator", "adobe"],
"Update_Date": "2012-02-21"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "golang fits reader",
"External Link": "https://github.com/siravan/fits",
"Public Code Repo": "https://github.com/siravan/fits/archive/master.zip",
"Description": "Package fits reads and processes FITS files. It is written in pure golang and is not a wrapper around another library or a direct translation of another library to golang. The main purpose is to provide a native golang solution to reading FITS file and to assess the suitability of golang for scientific and numerical applications.",
"License": [ "NASA Open Source" ],
"Categories": ["data processing", "data", "FITS", "flexible image transport system", "golang", "go"],
"Update_Date": "2014-02-12"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "golang wrapper",
"External Link": "https://github.com/astrogo/cfitsio",
"Public Code Repo": "https://github.com/astrogo/cfitsio/archive/master.zip",
"Description": "A set of CGo bindings to some of the most commonly used routines in the CFITSIO library (written in C).",
"License": [ "NASA Open Source" ],
"Categories": ["data processing", "data", "FITS", "flexible image transport system", "golang", "wrapper", "C", "CFITSIO", "go"],
"Update_Date": "2014-07-09"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["William D. Pence"],
"Software": "native golang fits package",
"External Link": "https://github.com/astrogo/fitsio",
"Public Code Repo": "https://github.com/astrogo/fitsio/archive/master.zip",
"Description": "Go package to read and write FITS files. It is written in pure golang and is not a wrapper around another library.",
"License": [ "NASA Open Source" ],
"Categories": ["data processing", "data", "FITS", "flexible image transport system", "golang", "go"],
"Update_Date": "2015-02-06"
}, 
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["John Dorband"],
"Software": "Architecture Adaptive Computing Environment (ACE)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/ace/aCe_Distro_Notes.txt",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/ace/ace-1.00.60.tar.gz",
"Description": "aCe (Architecture Adaptive Computing Environment) is a project to develop a programming environment that can be supported on all computing architectures. aCe was developed around a parallel super-set of ANS C.",
"License": [ "NASA Open Source" ],
"Categories": ["Parallel Programming","C","ANS C"],
"Languages": ["C"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Vicki Zanoni"],
"Software": "ALIAS",
"External Link": "http://opensource.gsfc.nasa.gov/projects/Alias/Alias.zip",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/Alias/alias2_1.tar",
"Description": "The Advanced Land Image Assessment Systems (ALIAS) supports radiometric and geometric image processing for the Advanced Land Imager (ALI) instrument on board NASA’s Earth Observing-1 (EO-1) satellite. ALIAS consists of two processing subsystems for radiometric and geometric processing of the ALI’s multispectral imagery. The radiometric processing subsystem characterizes and corrects, where possible, radiometric qualities including: detector operability; gain; bias; coherent, impulse and random noise; signal-to-noise ratios (SNR); saturation levels; striping and banding; and the stability of detector performance. The geometric processing subsystem and analysis capabilities support sensor alignment calibrations; sensor chip assembly (SCA)-to-SCA alignments and related issues; geodetic accuracy assessments; modulation transfer function (MTF) characterizations; and perform image-to-image characterizations. The ALIAS also characterizes and corrects band-to-band registration, and performs systematic, precision and terrain correction of ALI images. The ALIAS can geometrically correct and automatically mosaic the SCA image strips into a seamless, map-projected image. The ALIAS was developed through collaboration between NASA and the U.S. Geological Survey (USGS).",
"License": [ "NASA Open Source" ],
"Categories": ["image processing", "Advanced Land Imager", "EO-1"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["David McComas"],
"Software": "Assert-Based Unit Test Tools (UT-Assert)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/ut-assert/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/ut-assert/ut-assert%20v1_0%2011-24-14.zip",
"Description": "The ut-assert unit test tools provide a unit test framework and a collection of utilities that are designed to facilitate unit testing.",
"License": [ "NASA Open Source" ],
"Categories": ["regression testing", "unit test", "assert"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Christopher Lynnes"],
"Software": "CEOP Satellite Data Server",
"External Link": "http://opensource.gsfc.nasa.gov/projects/CEOP/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/CEOP/CEOP.tar.gz",
"Description": "A gateway using OPeNDAP, implemented as a plug-in to the Hyrax server, for accessing WCS data.",
"License": [ "NASA Open Source" ],
"Categories": ["networking", "opendap", "ACCESS", "earth science data"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Susan Strege"],
"Software": "Core Flight Executive (cFE)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/cfe/index.php",
"Public Code Repo": "http://sourceforge.net/projects/coreflightexec/files/latest/download",
"Description": "The Core Flight Executive (cFE) is an application development and run-time environment. The cFE provides a set of core services including Software Bus (messaging), Time, Event (Alerts), Executive (startup and runtime), and Table services.",
"License": [ "NASA Open Source" ],
"Categories": ["programming", "environment", "application", "core flight"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["James Tilton"],
"Software": "Core RHSEG Software Package",
"External Link": "http://opensource.gsfc.nasa.gov/projects/HSEG/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/HSEG/core_rhsegV1.47.tar.gz",
"Description": "The RHSEG software provides hierarchical segmentation (pre-processing) of image and image-like data. The software significantly improves the extraction of patterns from complex data sets and is optimized for speed and accuracy. This algorithm provides the user with precise control for selecting the desired level of detail from the hierarchy of results.",
"License": [ "NASA Open Source" ],
"Categories": ["image processing", "RHSEG", "application", "object based image analysis"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Kathy Fontaine"],
"Software": "Cost Estimation Toolkit and Comparables Database",
"External Link": "http://opensource.gsfc.nasa.gov/projects/CET/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/CET/CET%20V2.4.zip",
"Description": "The Cost Estimation Toolkit(CET) is designed to provide NASA budget estimators, PIs, project managers, and resource planners with the capability to generate life-cycle cost estimates for implementing, operating and maintaining a science data system.",
"License": [ "NASA Open Source" ],
"Categories": ["productivity", "cost estimation", "application", "comparables database"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Christopher Lynnes"],
"Software": "Data Quality Screening Service (DQSS)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/DQSS/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/DQSS/dqss_64.tar",
"Description": "The Data Quality Screening Service (DQSS) is designed to help automate the filtering of remote sensing data on behalf of science users.",
"License": [ "NASA Open Source" ],
"Categories": ["data filtering", "remote sensing", "quality"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "ECS Metadata Validator",
"External Link": "http://opensource.gsfc.nasa.gov/projects/ECS_Metadata_validate/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/ECS_Metadata_validate/schemavalidator.zip",
"Description": "The ECS Schema Validation tool validates an XML Document based on the BMGT Granule or Collection Schema, and generate reports listing all invalid elements.",
"License": [ "NASA Open Source" ],
"Categories": ["data validation", "validator", "EOS"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Robert Harberts"],
"Software": "EDG",
"External Link": "http://opensource.gsfc.nasa.gov/projects/edg/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/edg/edg.zip",
"Description": "The Earth Observing System Data Gateway (EDG) was developed in response to the earth science community's need for a one-stop-shopping interface to search for data and order data granules from distributed data archives. This innovation enables users to explore, discover, and order available data from geographically distributed data providers through a standard interface.",
"License": [ "NASA Open Source" ],
"Categories": ["data interchange", "interface", "Earth science"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Jacob Englander"],
"Software": "Evolutionary Mission Trajectory Generator (EMTG)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/emtg/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/emtg/EMTGv8.zip",
"Description": "Goddard's autonomous low-thrust trajectory optimization tool. EMTG is capable of designing complex low-thrust trajectories with minimal input from the user.",
"License": [ "NASA Open Source" ],
"Categories": ["trajectory design", "interplanetary space", "space science"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Edward Gaddy"],
"Software": "EQFlux",
"External Link": "http://opensource.gsfc.nasa.gov/projects/eqflux/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/eqflux/EQFlux.zip",
"Description": "General EQFlux is a generalized version of the Fortran Programs EQFRUX and EQGAFLUX, the code for which is published in The Solar Cell Radiation Handbook, JPL Publication 82-69 and the GaAs Solar Cell Radiation Handbook JPL Publication 96-9.",
"License": [ "NASA Open Source" ],
"Categories": ["computation", "damage coefficients", "algorithm"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Eric Sokolowsky"],
"Software": "Forecast Model Web Map Service (NFMW)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/NFMW/nfmw-20081204.zip",
"Description": "The NFMW reads Earth science models and produces web pages that display the desired area, time, and elevation, using WMS (Web Map Service).",
"License": [ "NASA Open Source" ],
"Categories": ["web map service", "earth science", "data visualization"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Eric Sokolowsky"],
"Software": "Forecast Model Web Map Service (NFMW)",
"External Link": "http://opensource.gsfc.nasa.gov/projects/NFMW/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/NFMW/nfmw-20081204.zip",
"Description": "The NFMW reads Earth science models and produces web pages that display the desired area, time, and elevation, using WMS (Web Map Service).",
"License": [ "NASA Open Source" ],
"Categories": ["web map service", "earth science", "data visualization"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Dalia Kirschbaum"],
"Software": "GeoSocial Consumer Application",
"External Link": "http://opensource.gsfc.nasa.gov/projects/gsca/index.php",
"Public Code Repo": "http://ojo-streamer.herokuapp.com/",
"Description": "The GeoSocial Consumer Application abstracts the work of interpreting the server interface, constructing workflows, and executing them by serving JavaScript executable code from each server.",
"License": [ "Apache License, Version 2.0." ],
"Categories": ["GEOSS", "space science", "data visualization"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Mathew Schwaller"],
"Software": "Global Precipitation Mission (GPM) Visualization Tool for Validation Network Geometrically-Matched Ground- and Space-based Radar Data",
"External Link": "http://opensource.gsfc.nasa.gov/projects/GPMV/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/GPMV/GPM_VN_visualization_master.tar",
"Description": "The GPM displays grand- and space-based radar observations for easy comparison and validation. Inteded for meteorologists and other sciences; not end users.",
"License": [ "NASA Open Source" ],
"Categories": ["meteorology", "earth science", "data visualization", "GVS", "GPM"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Mathew Schwaller"],
"Software": "Global Precipitation Radar (GPM) Space and Ground Radar Comparison",
"External Link": "http://opensource.gsfc.nasa.gov/projects/GPM/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/GPM/GPMGV_VN_IDL_CODE.tar",
"Description": "The GPM Collects various data sets from TRMM spacecraft, re-samples it, and generates statistics.",
"License": [ "NASA Open Source" ],
"Categories": ["TRMM", "earth science", "data processing", "GVS", "GPM"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "HDF-EOS2 and HDF-EOS5 Compatibility Library",
"External Link": "http://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/HDF-EOS2/he2he5_lib.zip",
"Description": "The HDF-EOS2 and HDF-EOS5 Compatibility Library provides a consistent API to both EOS-2 and EOS-5 APIs, which are slightly different.",
"License": [ "NASA Open Source" ],
"Categories": ["HDF-EOS2", "HDF-EOS5", "EOS", "EOSDIS"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "HDF-EOS5 Validator",
"External Link": "http://opensource.gsfc.nasa.gov/projects/HDF-EOS2/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/HDF-EOS2/he2he5_lib.zip",
"Description": "The HDF-EOS5 Validator validates an XML description of an HDF-EOS file against that file.",
"License": [ "NASA Open Source" ],
"Categories": ["validator", "HDF-EOS5", "EOS", "EOSDIS"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "HDF-EOS Metadata Updater",
"External Link": "http://opensource.gsfc.nasa.gov/projects/hemu/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/hemu/HEMU.zip",
"Description": "HDF-EOS Metadata Updater updates metadata inside an HDF-EOS file.",
"License": [ "NASA Open Source" ],
"Categories": ["updater", "HDF-EOS", "EOS", "EOSDIS", "data file manipulator"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "HDF-EOS to netCDF Convertor",
"External Link": "http://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/hdfeos2netcdf/hdfeos5-netcdf.tar",
"Description": "The HDF-EOS to netCDF Convertor takes an HDF-EOS dataset and outputs a netCDF file that preserves as much as possible of the dataset's data and metadata using the CF conventions for netCDF.",
"License": [ "NASA Open Source" ],
"Categories": ["updater", "HDF-EOS", "EOS", "EOSDIS", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "HDF-EOS Web Server",
"External Link": "http://opensource.gsfc.nasa.gov/projects/heserve/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/heserve/heserve.zip",
"Description": "The HDF-EOS Web Server converts HDF-EOS metadata into human-readable HTML and publishes it to a local web server (which must be pre-configured).",
"License": [ "NASA Open Source" ],
"Categories": ["server", "HDF-EOS", "EOS", "EOSDIS", "data conversion"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Richard Ullman"],
"Software": "HDFEOS XML DTD and Schemas",
"External Link": "http://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/XML_DTD_Schemas/schemavalidator.zip",
"Description": "The HDFEOS XML DTD and Schemas is a set of DTD and schemas for HDFEOS files.",
"License": [ "NASA Open Source" ],
"Categories": ["server", "HDF-EOS", "EOS", "EOSDIS", "data validation"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Dan Marinelli"],
"Software": "HDFView HDF-EOS Plug-in",
"External Link": "http://opensource.gsfc.nasa.gov/projects/HDF/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/HDF/HDF.zip",
"Description": "This is a Java language software plug-in to The HDF Group's (formerly of NCSA at University of Illinois at Urbana-Champaign) HDFView which provides an HDF-EOS interface for both versions of HDF (4 and 5) of HDF-EOS. Browse and edit functions are provided.",
"License": [ "NASA Open Source" ],
"Categories": ["HDF-EOS", "EOS", "EOSDIS", "data validation"],
"Update_Date": "2015-02-27"
},
{
"NASA Center": "Goddard Space Flight Center",
"Contributors": ["Stephen Talabac"],
"Software": "ILIADS",
"External Link": "http://opensource.gsfc.nasa.gov/projects/ILIADS/index.php",
"Public Code Repo": "http://opensource.gsfc.nasa.gov/projects/ILIADS/iliads-windows.zip",
"Description": "ILIADS provides the user with the ability to locate, query, and download remotely sensed mapped lunar data products from geographically distributed lunar data repositories or sources.",
"License": [ "NASA Open Source" ],
"Categories": ["ILIADS", "GIS", "lunar", "data visualization"],
"Update_Date": "2015-02-27"
}, 
{
    "NASA Center": "Jet Propulsion Laboratory",
    "Contributors": [
      "mcduffie", "mikesmyth"
    ],
    "Software": "RT Retrieval Framework",
    "External Link": "https://github.com/nasa/RtRetrievalFramework",
    "Public Code Repo": "https://github.com/nasa/RtRetrievalFramework",
    "Description": "This software retrieves a set of atmospheric/surface/instrument parameters from a simultaneous fit to spectra from multiple absorption bands. The software uses an iterative, non-linear retrieval technique (optimal estimation). After the retrieval process has converged, the software performs an error analysis. The products of the software include all quantities needed to understand the information content of the measurement, its uncertainty, and its dependence on interfering atmospheric properties. Spectra from ground-based or space-based measurement with arbitrary observation geometry can be analyzed. The retrieved parameters can be chosen from a large set of atmospheric (e.g., volume mixing ratio of gases or aerosol optical depth), surface (e.g., Lambertian reflection), and instrument (e.g., spectral shift or instrument line shape parameters) parameters. The software uses an accurate, state-of-the-art, multiple-scattering radiative transfer code combined with an efficient polarization approximation to simulate measured spectra. The software enables fast and highly accurate simulations of broad spectral ranges by an optional parallelization of the frequency processing in the radiative transfer model. The framework was written with flexibility in mind. New algorithms and instruments are added by creating additional classes that implement the defined interfaces. Bindings are available for both Python and Lua.",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "Framework",
      "Radiative Transfer",
      "Forward Model",
      "Atmosphere",
      "Retrieval",
      "Earth Science",
      "C++", "Python", "Lua"
    ],
    "Update_Date": "2016-02-01"
},
{
    "NASA Center": "Johnson Space Center",
    "Contributors": [
      "walshahi"
    ],
    "Software": "NASA LaTeX Docs",
    "External Link": "https://github.com/nasa/nasa-latex-docs/wiki",
    "Public Code Repo": "https://github.com/nasa/nasa-latex-docs",
    "Description": "This is a flexible LaTeX document template designed to separate content from styling and remove all of the grunt work associated with creating professional documents. Can be used for technical reports as well as public documents such as research papers and conference papers.",
    "License": [
      "NASA Open Source"
    ],
    "Categories": [
      "LaTeX",
      "TeX",
      "Documents",
      "Reports",
      "Papers"
    ],
    "Update_Date": "2016-02-05"
}
]
